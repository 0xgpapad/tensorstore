Search.setIndex({docurls:["context.html","driver/array/index.html","driver/cast/index.html","driver/downsample/index.html","driver/image/jpeg/index.html","driver/image/png/index.html","driver/index.html","driver/json/index.html","driver/n5/index.html","driver/neuroglancer_precomputed/index.html","driver/stack/index.html","driver/zarr/index.html","environment.html","index.html","index_space.html","installation.html","kvstore/file/index.html","kvstore/gcs/index.html","kvstore/index.html","kvstore/memory/index.html","python/api/index.html","python/api/tensorstore.ChunkLayout.html","python/api/tensorstore.ChunkLayout.Grid.html","python/api/tensorstore.ChunkLayout.Grid.__eq__.html","python/api/tensorstore.ChunkLayout.Grid.__init__-components.html","python/api/tensorstore.ChunkLayout.Grid.__init__-json.html","python/api/tensorstore.ChunkLayout.Grid.aspect_ratio.html","python/api/tensorstore.ChunkLayout.Grid.aspect_ratio_soft_constraint.html","python/api/tensorstore.ChunkLayout.Grid.elements.html","python/api/tensorstore.ChunkLayout.Grid.elements_soft_constraint.html","python/api/tensorstore.ChunkLayout.Grid.ndim.html","python/api/tensorstore.ChunkLayout.Grid.rank.html","python/api/tensorstore.ChunkLayout.Grid.shape.html","python/api/tensorstore.ChunkLayout.Grid.shape_soft_constraint.html","python/api/tensorstore.ChunkLayout.Grid.to_json.html","python/api/tensorstore.ChunkLayout.Grid.update.html","python/api/tensorstore.ChunkLayout.__eq__.html","python/api/tensorstore.ChunkLayout.__init__-components.html","python/api/tensorstore.ChunkLayout.__init__-json.html","python/api/tensorstore.ChunkLayout.codec_chunk.html","python/api/tensorstore.ChunkLayout.grid_origin.html","python/api/tensorstore.ChunkLayout.grid_origin_soft_constraint.html","python/api/tensorstore.ChunkLayout.inner_order.html","python/api/tensorstore.ChunkLayout.inner_order_soft_constraint.html","python/api/tensorstore.ChunkLayout.ndim.html","python/api/tensorstore.ChunkLayout.rank.html","python/api/tensorstore.ChunkLayout.read_chunk.html","python/api/tensorstore.ChunkLayout.read_chunk_template.html","python/api/tensorstore.ChunkLayout.to_json.html","python/api/tensorstore.ChunkLayout.update.html","python/api/tensorstore.ChunkLayout.write_chunk.html","python/api/tensorstore.ChunkLayout.write_chunk_template.html","python/api/tensorstore.CodecSpec.html","python/api/tensorstore.CodecSpec.__init__.html","python/api/tensorstore.CodecSpec.to_json.html","python/api/tensorstore.Context.html","python/api/tensorstore.Context.Resource.html","python/api/tensorstore.Context.Resource.to_json.html","python/api/tensorstore.Context.Spec.html","python/api/tensorstore.Context.Spec.__init__.html","python/api/tensorstore.Context.Spec.to_json.html","python/api/tensorstore.Context.__getitem__.html","python/api/tensorstore.Context.__init__-default.html","python/api/tensorstore.Context.__init__-json.html","python/api/tensorstore.Context.__init__-spec.html","python/api/tensorstore.Context.parent.html","python/api/tensorstore.Context.spec.html","python/api/tensorstore.Dim.html","python/api/tensorstore.Dim.__contains__-dim.html","python/api/tensorstore.Dim.__contains__-index.html","python/api/tensorstore.Dim.__eq__.html","python/api/tensorstore.Dim.__init__-exclusive_max.html","python/api/tensorstore.Dim.__init__-inclusive_max.html","python/api/tensorstore.Dim.__init__-size.html","python/api/tensorstore.Dim.__init__-unbounded.html","python/api/tensorstore.Dim.__iter__.html","python/api/tensorstore.Dim.__len__.html","python/api/tensorstore.Dim.__repr__.html","python/api/tensorstore.Dim.__str__.html","python/api/tensorstore.Dim.empty.html","python/api/tensorstore.Dim.exclusive_max.html","python/api/tensorstore.Dim.exclusive_min.html","python/api/tensorstore.Dim.finite.html","python/api/tensorstore.Dim.hull.html","python/api/tensorstore.Dim.implicit_lower.html","python/api/tensorstore.Dim.implicit_upper.html","python/api/tensorstore.Dim.inclusive_max.html","python/api/tensorstore.Dim.inclusive_min.html","python/api/tensorstore.Dim.intersect.html","python/api/tensorstore.Dim.label.html","python/api/tensorstore.Dim.size.html","python/api/tensorstore.DimExpression.html","python/api/tensorstore.DimExpression.__getitem__.html","python/api/tensorstore.DimExpression.diagonal.html","python/api/tensorstore.DimExpression.label.html","python/api/tensorstore.DimExpression.oindex.html","python/api/tensorstore.DimExpression.stride.html","python/api/tensorstore.DimExpression.translate_backward_by.html","python/api/tensorstore.DimExpression.translate_by.html","python/api/tensorstore.DimExpression.translate_to.html","python/api/tensorstore.DimExpression.transpose.html","python/api/tensorstore.DimExpression.vindex.html","python/api/tensorstore.Future.html","python/api/tensorstore.Future.__new__.html","python/api/tensorstore.Future.add_done_callback.html","python/api/tensorstore.Future.cancel.html","python/api/tensorstore.Future.cancelled.html","python/api/tensorstore.Future.done.html","python/api/tensorstore.Future.exception.html","python/api/tensorstore.Future.force.html","python/api/tensorstore.Future.remove_done_callback.html","python/api/tensorstore.Future.result.html","python/api/tensorstore.FutureLike.html","python/api/tensorstore.IndexDomain.html","python/api/tensorstore.IndexDomain.__getitem__-domain.html","python/api/tensorstore.IndexDomain.__getitem__-expr.html","python/api/tensorstore.IndexDomain.__getitem__-identifier.html","python/api/tensorstore.IndexDomain.__getitem__-selection.html","python/api/tensorstore.IndexDomain.__getitem__-transform.html","python/api/tensorstore.IndexDomain.__init__-components.html","python/api/tensorstore.IndexDomain.__init__-dimensions.html","python/api/tensorstore.IndexDomain.__init__-json.html","python/api/tensorstore.IndexDomain.__len__.html","python/api/tensorstore.IndexDomain.__repr__.html","python/api/tensorstore.IndexDomain.exclusive_max.html","python/api/tensorstore.IndexDomain.hull.html","python/api/tensorstore.IndexDomain.implicit_lower_bounds.html","python/api/tensorstore.IndexDomain.implicit_upper_bounds.html","python/api/tensorstore.IndexDomain.inclusive_max.html","python/api/tensorstore.IndexDomain.inclusive_min.html","python/api/tensorstore.IndexDomain.index_exp.html","python/api/tensorstore.IndexDomain.intersect.html","python/api/tensorstore.IndexDomain.labels.html","python/api/tensorstore.IndexDomain.ndim.html","python/api/tensorstore.IndexDomain.origin.html","python/api/tensorstore.IndexDomain.rank.html","python/api/tensorstore.IndexDomain.shape.html","python/api/tensorstore.IndexDomain.size.html","python/api/tensorstore.IndexDomain.to_json.html","python/api/tensorstore.IndexTransform.html","python/api/tensorstore.IndexTransform.T.html","python/api/tensorstore.IndexTransform.__call__.html","python/api/tensorstore.IndexTransform.__getitem__-domain.html","python/api/tensorstore.IndexTransform.__getitem__-expr.html","python/api/tensorstore.IndexTransform.__getitem__-indices.html","python/api/tensorstore.IndexTransform.__getitem__-transform.html","python/api/tensorstore.IndexTransform.__init__-components.html","python/api/tensorstore.IndexTransform.__init__-domain.html","python/api/tensorstore.IndexTransform.__init__-json.html","python/api/tensorstore.IndexTransform.__repr__.html","python/api/tensorstore.IndexTransform.domain.html","python/api/tensorstore.IndexTransform.implicit_lower_bounds.html","python/api/tensorstore.IndexTransform.implicit_upper_bounds.html","python/api/tensorstore.IndexTransform.input_exclusive_max.html","python/api/tensorstore.IndexTransform.input_inclusive_max.html","python/api/tensorstore.IndexTransform.input_inclusive_min.html","python/api/tensorstore.IndexTransform.input_labels.html","python/api/tensorstore.IndexTransform.input_origin.html","python/api/tensorstore.IndexTransform.input_rank.html","python/api/tensorstore.IndexTransform.input_shape.html","python/api/tensorstore.IndexTransform.ndim.html","python/api/tensorstore.IndexTransform.oindex.html","python/api/tensorstore.IndexTransform.origin.html","python/api/tensorstore.IndexTransform.output.html","python/api/tensorstore.IndexTransform.output_rank.html","python/api/tensorstore.IndexTransform.shape.html","python/api/tensorstore.IndexTransform.size.html","python/api/tensorstore.IndexTransform.to_json.html","python/api/tensorstore.IndexTransform.vindex.html","python/api/tensorstore.Indexable.html","python/api/tensorstore.KvStore.html","python/api/tensorstore.KvStore.KeyRange.html","python/api/tensorstore.KvStore.KeyRange.__eq__.html","python/api/tensorstore.KvStore.KeyRange.__init__.html","python/api/tensorstore.KvStore.KeyRange.copy.html","python/api/tensorstore.KvStore.KeyRange.empty.html","python/api/tensorstore.KvStore.KeyRange.exclusive_max.html","python/api/tensorstore.KvStore.KeyRange.inclusive_min.html","python/api/tensorstore.KvStore.ReadResult.html","python/api/tensorstore.KvStore.ReadResult.__init__.html","python/api/tensorstore.KvStore.ReadResult.stamp.html","python/api/tensorstore.KvStore.ReadResult.state.html","python/api/tensorstore.KvStore.ReadResult.value.html","python/api/tensorstore.KvStore.Spec.html","python/api/tensorstore.KvStore.Spec.__add__.html","python/api/tensorstore.KvStore.Spec.__new__.html","python/api/tensorstore.KvStore.Spec.__repr__.html","python/api/tensorstore.KvStore.Spec.__truediv__.html","python/api/tensorstore.KvStore.Spec.copy.html","python/api/tensorstore.KvStore.Spec.path.html","python/api/tensorstore.KvStore.Spec.to_json.html","python/api/tensorstore.KvStore.Spec.update.html","python/api/tensorstore.KvStore.Spec.url.html","python/api/tensorstore.KvStore.TimestampedStorageGeneration.html","python/api/tensorstore.KvStore.TimestampedStorageGeneration.__eq__.html","python/api/tensorstore.KvStore.TimestampedStorageGeneration.__init__.html","python/api/tensorstore.KvStore.TimestampedStorageGeneration.generation.html","python/api/tensorstore.KvStore.TimestampedStorageGeneration.time.html","python/api/tensorstore.KvStore.__delitem__.html","python/api/tensorstore.KvStore.__getitem__.html","python/api/tensorstore.KvStore.__repr__.html","python/api/tensorstore.KvStore.__setitem__.html","python/api/tensorstore.KvStore.copy.html","python/api/tensorstore.KvStore.delete_range.html","python/api/tensorstore.KvStore.list.html","python/api/tensorstore.KvStore.open.html","python/api/tensorstore.KvStore.path.html","python/api/tensorstore.KvStore.read.html","python/api/tensorstore.KvStore.spec.html","python/api/tensorstore.KvStore.transaction.html","python/api/tensorstore.KvStore.url.html","python/api/tensorstore.KvStore.with_transaction.html","python/api/tensorstore.KvStore.write.html","python/api/tensorstore.OutputIndexMap.html","python/api/tensorstore.OutputIndexMap.__init__-constant.html","python/api/tensorstore.OutputIndexMap.__init__-index_array.html","python/api/tensorstore.OutputIndexMap.__init__-input_dimension.html","python/api/tensorstore.OutputIndexMap.index_array.html","python/api/tensorstore.OutputIndexMap.index_range.html","python/api/tensorstore.OutputIndexMap.input_dimension.html","python/api/tensorstore.OutputIndexMap.method.html","python/api/tensorstore.OutputIndexMap.offset.html","python/api/tensorstore.OutputIndexMap.stride.html","python/api/tensorstore.OutputIndexMaps.html","python/api/tensorstore.OutputIndexMaps.__getitem__.html","python/api/tensorstore.OutputIndexMaps.__len__.html","python/api/tensorstore.OutputIndexMaps.rank.html","python/api/tensorstore.OutputIndexMethod.html","python/api/tensorstore.OutputIndexMethod.__init__.html","python/api/tensorstore.OutputIndexMethod.__str__.html","python/api/tensorstore.OutputIndexMethod.array.html","python/api/tensorstore.OutputIndexMethod.constant.html","python/api/tensorstore.OutputIndexMethod.name.html","python/api/tensorstore.OutputIndexMethod.single_input_dimension.html","python/api/tensorstore.OutputIndexMethod.value.html","python/api/tensorstore.Promise.html","python/api/tensorstore.Promise.new.html","python/api/tensorstore.Promise.set_exception.html","python/api/tensorstore.Promise.set_result.html","python/api/tensorstore.Schema.html","python/api/tensorstore.Schema.T.html","python/api/tensorstore.Schema.__eq__.html","python/api/tensorstore.Schema.__getitem__-domain.html","python/api/tensorstore.Schema.__getitem__-expr.html","python/api/tensorstore.Schema.__getitem__-indices.html","python/api/tensorstore.Schema.__getitem__-transform.html","python/api/tensorstore.Schema.__init__-components.html","python/api/tensorstore.Schema.__init__-json.html","python/api/tensorstore.Schema.__repr__.html","python/api/tensorstore.Schema.chunk_layout.html","python/api/tensorstore.Schema.codec.html","python/api/tensorstore.Schema.copy.html","python/api/tensorstore.Schema.dimension_units.html","python/api/tensorstore.Schema.domain.html","python/api/tensorstore.Schema.dtype.html","python/api/tensorstore.Schema.fill_value.html","python/api/tensorstore.Schema.ndim.html","python/api/tensorstore.Schema.oindex.html","python/api/tensorstore.Schema.origin.html","python/api/tensorstore.Schema.rank.html","python/api/tensorstore.Schema.shape.html","python/api/tensorstore.Schema.size.html","python/api/tensorstore.Schema.to_json.html","python/api/tensorstore.Schema.update.html","python/api/tensorstore.Schema.vindex.html","python/api/tensorstore.Spec.html","python/api/tensorstore.Spec.T.html","python/api/tensorstore.Spec.__eq__.html","python/api/tensorstore.Spec.__getitem__-domain.html","python/api/tensorstore.Spec.__getitem__-expr.html","python/api/tensorstore.Spec.__getitem__-indices.html","python/api/tensorstore.Spec.__getitem__-transform.html","python/api/tensorstore.Spec.__new__.html","python/api/tensorstore.Spec.__repr__.html","python/api/tensorstore.Spec.chunk_layout.html","python/api/tensorstore.Spec.codec.html","python/api/tensorstore.Spec.copy.html","python/api/tensorstore.Spec.dimension_units.html","python/api/tensorstore.Spec.domain.html","python/api/tensorstore.Spec.dtype.html","python/api/tensorstore.Spec.fill_value.html","python/api/tensorstore.Spec.kvstore.html","python/api/tensorstore.Spec.ndim.html","python/api/tensorstore.Spec.oindex.html","python/api/tensorstore.Spec.origin.html","python/api/tensorstore.Spec.rank.html","python/api/tensorstore.Spec.schema.html","python/api/tensorstore.Spec.shape.html","python/api/tensorstore.Spec.size.html","python/api/tensorstore.Spec.to_json.html","python/api/tensorstore.Spec.transform.html","python/api/tensorstore.Spec.update.html","python/api/tensorstore.Spec.vindex.html","python/api/tensorstore.TensorStore.html","python/api/tensorstore.TensorStore.T.html","python/api/tensorstore.TensorStore.__array__.html","python/api/tensorstore.TensorStore.__getitem__-domain.html","python/api/tensorstore.TensorStore.__getitem__-expr.html","python/api/tensorstore.TensorStore.__getitem__-indices.html","python/api/tensorstore.TensorStore.__getitem__-transform.html","python/api/tensorstore.TensorStore.__setitem__-domain.html","python/api/tensorstore.TensorStore.__setitem__-expr.html","python/api/tensorstore.TensorStore.__setitem__-indices.html","python/api/tensorstore.TensorStore.__setitem__-transform.html","python/api/tensorstore.TensorStore.astype.html","python/api/tensorstore.TensorStore.chunk_layout.html","python/api/tensorstore.TensorStore.codec.html","python/api/tensorstore.TensorStore.dimension_units.html","python/api/tensorstore.TensorStore.domain.html","python/api/tensorstore.TensorStore.dtype.html","python/api/tensorstore.TensorStore.fill_value.html","python/api/tensorstore.TensorStore.kvstore.html","python/api/tensorstore.TensorStore.mode.html","python/api/tensorstore.TensorStore.ndim.html","python/api/tensorstore.TensorStore.oindex.html","python/api/tensorstore.TensorStore.oindex.__setitem__.html","python/api/tensorstore.TensorStore.origin.html","python/api/tensorstore.TensorStore.rank.html","python/api/tensorstore.TensorStore.read.html","python/api/tensorstore.TensorStore.readable.html","python/api/tensorstore.TensorStore.resolve.html","python/api/tensorstore.TensorStore.schema.html","python/api/tensorstore.TensorStore.shape.html","python/api/tensorstore.TensorStore.size.html","python/api/tensorstore.TensorStore.spec.html","python/api/tensorstore.TensorStore.transaction.html","python/api/tensorstore.TensorStore.vindex.html","python/api/tensorstore.TensorStore.vindex.__setitem__.html","python/api/tensorstore.TensorStore.with_transaction.html","python/api/tensorstore.TensorStore.writable.html","python/api/tensorstore.TensorStore.write.html","python/api/tensorstore.Transaction.html","python/api/tensorstore.Transaction.__init__.html","python/api/tensorstore.Transaction.abort.html","python/api/tensorstore.Transaction.aborted.html","python/api/tensorstore.Transaction.atomic.html","python/api/tensorstore.Transaction.commit_async.html","python/api/tensorstore.Transaction.commit_started.html","python/api/tensorstore.Transaction.commit_sync.html","python/api/tensorstore.Transaction.future.html","python/api/tensorstore.Transaction.open.html","python/api/tensorstore.Unit.html","python/api/tensorstore.Unit.__eq__.html","python/api/tensorstore.Unit.__init__-components.html","python/api/tensorstore.Unit.__init__-json.html","python/api/tensorstore.Unit.__init__-multiplier.html","python/api/tensorstore.Unit.__init__-pair.html","python/api/tensorstore.Unit.__init__-unit.html","python/api/tensorstore.Unit.__mul__.html","python/api/tensorstore.Unit.__truediv__.html","python/api/tensorstore.Unit.base_unit.html","python/api/tensorstore.Unit.multiplier.html","python/api/tensorstore.Unit.to_json.html","python/api/tensorstore.VirtualChunkedReadParameters.html","python/api/tensorstore.VirtualChunkedReadParameters.if_not_equal.html","python/api/tensorstore.VirtualChunkedReadParameters.staleness_bound.html","python/api/tensorstore.VirtualChunkedWriteParameters.html","python/api/tensorstore.VirtualChunkedWriteParameters.if_equal.html","python/api/tensorstore.WriteFutures.html","python/api/tensorstore.WriteFutures.add_done_callback.html","python/api/tensorstore.WriteFutures.cancel.html","python/api/tensorstore.WriteFutures.cancelled.html","python/api/tensorstore.WriteFutures.commit.html","python/api/tensorstore.WriteFutures.copy.html","python/api/tensorstore.WriteFutures.done.html","python/api/tensorstore.WriteFutures.exception.html","python/api/tensorstore.WriteFutures.remove_done_callback.html","python/api/tensorstore.WriteFutures.result.html","python/api/tensorstore.array.html","python/api/tensorstore.bfloat16.html","python/api/tensorstore.bool.html","python/api/tensorstore.cast.html","python/api/tensorstore.complex128.html","python/api/tensorstore.complex64.html","python/api/tensorstore.d.html","python/api/tensorstore.d.__class_getitem__.html","python/api/tensorstore.downsample-spec.html","python/api/tensorstore.downsample-store.html","python/api/tensorstore.dtype.html","python/api/tensorstore.dtype.__call__.html","python/api/tensorstore.dtype.__init__-dtype.html","python/api/tensorstore.dtype.__init__-name.html","python/api/tensorstore.dtype.name.html","python/api/tensorstore.dtype.numpy_dtype.html","python/api/tensorstore.dtype.to_json.html","python/api/tensorstore.dtype.type.html","python/api/tensorstore.float16.html","python/api/tensorstore.float32.html","python/api/tensorstore.float64.html","python/api/tensorstore.inf.html","python/api/tensorstore.int16.html","python/api/tensorstore.int32.html","python/api/tensorstore.int64.html","python/api/tensorstore.int8.html","python/api/tensorstore.json.html","python/api/tensorstore.newaxis.html","python/api/tensorstore.open.html","python/api/tensorstore.string.html","python/api/tensorstore.uint16.html","python/api/tensorstore.uint32.html","python/api/tensorstore.uint64.html","python/api/tensorstore.uint8.html","python/api/tensorstore.ustring.html","python/api/tensorstore.virtual_chunked.html","python/indexing.html","python/tutorial.html","schema.html","spec.html"],envversion:{"sphinx.domains.c":2,"sphinx.domains.changeset":1,"sphinx.domains.citation":1,"sphinx.domains.cpp":4,"sphinx.domains.index":1,"sphinx.domains.javascript":2,"sphinx.domains.math":2,"sphinx.domains.python":3,"sphinx.domains.rst":2,"sphinx.domains.std":2,"sphinx.ext.intersphinx":1,sphinx:56},objects:{"":{"ChunkLayout/Grid":[406,0,1,"json-ChunkLayout/Grid","Constraints on the write/read/codec chunk grids."],"KvStoreUrl/file":[16,0,1,"json-KvStoreUrl/file","file:// KvStore URL scheme"],"KvStoreUrl/gs":[17,0,1,"json-KvStoreUrl/gs","gs:// KvStore URL scheme"],"KvStoreUrl/memory":[19,0,1,"json-KvStoreUrl/memory","memory:// KvStore URL scheme"],"driver/array":[1,0,1,"json-driver/array",""],"driver/cast":[2,0,1,"json-driver/cast",""],"driver/downsample":[3,0,1,"json-driver/downsample",""],"driver/jpeg":[4,0,1,"json-driver/jpeg",""],"driver/json":[7,0,1,"json-driver/json",""],"driver/n5":[8,0,1,"json-driver/n5",""],"driver/n5/Codec":[8,0,1,"json-driver/n5/Codec",""],"driver/n5/Compression":[8,0,1,"json-driver/n5/Compression",""],"driver/n5/Compression/blosc":[8,0,1,"json-driver/n5/Compression/blosc",""],"driver/n5/Compression/bzip2":[8,0,1,"json-driver/n5/Compression/bzip2",""],"driver/n5/Compression/gzip":[8,0,1,"json-driver/n5/Compression/gzip",""],"driver/n5/Compression/raw":[8,0,1,"json-driver/n5/Compression/raw",""],"driver/n5/Compression/xz":[8,0,1,"json-driver/n5/Compression/xz",""],"driver/neuroglancer_precomputed":[9,0,1,"json-driver/neuroglancer_precomputed",""],"driver/neuroglancer_precomputed/Codec":[9,0,1,"json-driver/neuroglancer_precomputed/Codec","Neuroglancer Precomputed Codec"],"driver/neuroglancer_precomputed/ShardingSpec":[9,0,1,"json-driver/neuroglancer_precomputed/ShardingSpec","Sharding"],"driver/png":[5,0,1,"json-driver/png",""],"driver/stack":[10,0,1,"json-driver/stack",""],"driver/zarr":[11,0,1,"json-driver/zarr",""],"driver/zarr/Codec":[11,0,1,"json-driver/zarr/Codec",""],"driver/zarr/Compressor":[11,0,1,"json-driver/zarr/Compressor","Compressor"],"driver/zarr/Compressor/blosc":[11,0,1,"json-driver/zarr/Compressor/blosc",""],"driver/zarr/Compressor/bz2":[11,0,1,"json-driver/zarr/Compressor/bz2",""],"driver/zarr/Compressor/zlib":[11,0,1,"json-driver/zarr/Compressor/zlib",""],"kvstore/file":[16,0,1,"json-kvstore/file","JSON specification of file-backed key-value store."],"kvstore/gcs":[17,0,1,"json-kvstore/gcs",""],"kvstore/memory":[19,0,1,"json-kvstore/memory",""],BAZELISK_HOME:[15,9,1,"-",""],CacheRevalidationBound:[6,0,1,"json-CacheRevalidationBound",""],ChunkLayout:[406,0,1,"json-ChunkLayout",""],Codec:[406,0,1,"json-Codec",""],Context:[0,0,1,"json-Context",""],ContextResource:[0,0,1,"json-ContextResource",""],DownsampleMethod:[3,0,1,"json-DownsampleMethod","Downsample method"],GOOGLE_APPLICATION_CREDENTIALS:[12,9,1,"-",""],IndexDomain:[14,0,1,"json-IndexDomain",""],IndexInterval:[14,0,1,"json-IndexInterval","Specifies a closed interval of integer index values."],IndexTransform:[14,0,1,"json-IndexTransform",""],KeyValueStoreBackedChunkDriver:[6,0,1,"json-KeyValueStoreBackedChunkDriver",""],KvStore:[18,0,1,"json-KvStore","Key-value store specification."],KvStoreUrl:[18,0,1,"json-KvStoreUrl","URL representation of a key-value store."],OutputIndexMap:[14,0,1,"json-OutputIndexMap","Specifies a transform from an input space to a single output index."],SSLKEYLOGFILE:[12,9,1,"-",""],Schema:[406,0,1,"json-Schema",""],TENSORSTORE_BAZELISK:[15,9,1,"-",""],TENSORSTORE_BAZEL_BUILD_OPTIONS:[15,9,1,"-",""],TENSORSTORE_BAZEL_COMPILATION_MODE:[15,9,1,"-",""],TENSORSTORE_BAZEL_STARTUP_OPTIONS:[15,9,1,"-",""],TENSORSTORE_CA_BUNDLE:[12,9,1,"-",""],TENSORSTORE_CA_PATH:[12,9,1,"-",""],TENSORSTORE_CURL_VERBOSE:[12,9,1,"-",""],TENSORSTORE_GCS_HTTP_URL:[12,9,1,"-",""],TENSORSTORE_PREBUILT_DIR:[15,9,1,"-",""],TENSORSTORE_SYSTEM_LIBS:[15,9,1,"-",""],TensorStore:[407,0,1,"json-TensorStore","Specifies a TensorStore to open/create."],Unit:[406,0,1,"json-Unit","Specifies a physical quantity/unit."],all_proxy:[12,9,1,"-",""],dtype:[407,0,1,"json-dtype","Specifies a TensorStore data type."],http_proxy:[12,9,1,"-",""],https_proxy:[12,9,1,"-",""],no_proxy:[12,9,1,"-",""]},"ChunkLayout/Grid":{aspect_ratio:[406,1,2,"json-ChunkLayout/Grid.aspect_ratio","Aspect ratio of the chunk shape."],aspect_ratio_soft_constraint:[406,1,2,"json-ChunkLayout/Grid.aspect_ratio_soft_constraint","Soft constraint on aspect ratio, lower precedence than aspect_ratio."],elements:[406,1,2,"json-ChunkLayout/Grid.elements","Preferred number of elements per chunk."],elements_soft_constraint:[406,1,2,"json-ChunkLayout/Grid.elements_soft_constraint","Preferred number of elements per chunk, lower precedence than\nelements."],shape:[406,1,2,"json-ChunkLayout/Grid.shape","Hard constraints on the chunk size for each dimension."],shape_soft_constraint:[406,1,2,"json-ChunkLayout/Grid.shape_soft_constraint","Preferred chunk sizes for each dimension."]},"Context.cache_pool":{queued_for_writeback_bytes_limit:[0,1,2,"json-Context.cache_pool.queued_for_writeback_bytes_limit",""],total_bytes_limit:[0,1,2,"json-Context.cache_pool.total_bytes_limit",""]},"Context.data_copy_concurrency":{limit:[0,1,2,"json-Context.data_copy_concurrency.limit",""]},"Context.file_io_concurrency":{limit:[0,1,2,"json-Context.file_io_concurrency.limit",""]},"Context.gcs_request_concurrency":{limit:[17,1,2,"json-Context.gcs_request_concurrency.limit",""]},"Context.gcs_request_retries":{max_retries:[17,1,2,"json-Context.gcs_request_retries.max_retries",""]},"Context.gcs_user_project":{project_id:[17,1,2,"json-Context.gcs_user_project.project_id","Google Cloud project id, e.g. \"my-project\".  The Google Cloud\naccount that is used must have appropriate permissions to bill to the\nspecified project."]},"driver/array":{array:[1,1,2,"json-driver/array.array","Nested array of rank equal to rank specifying the initial value."],context:[1,1,2,"json-driver/array.context","Specifies context resources that augment/override the parent context."],driver:[1,1,2,"json-driver/array.driver",""],dtype:[1,1,2,"json-driver/array.dtype","Specifies the data type."],rank:[1,1,2,"json-driver/array.rank","Specifies the rank of the TensorStore."],schema:[1,1,2,"json-driver/array.schema","Specifies constraints on the schema."],transform:[1,1,2,"json-driver/array.transform","Specifies a transform."]},"driver/cast":{base:[2,1,2,"json-driver/cast.base","Base TensorStore to convert."],context:[2,1,2,"json-driver/cast.context","Specifies context resources that augment/override the parent context."],driver:[2,1,2,"json-driver/cast.driver",""],dtype:[2,1,2,"json-driver/cast.dtype","Specifies the data type under which to view the base TensorStore."],rank:[2,1,2,"json-driver/cast.rank","Specifies the rank of the TensorStore."],schema:[2,1,2,"json-driver/cast.schema","Specifies constraints on the schema."],transform:[2,1,2,"json-driver/cast.transform","Specifies a transform."]},"driver/downsample":{base:[3,1,2,"json-driver/downsample.base","Base TensorStore to downsample."],context:[3,1,2,"json-driver/downsample.context","Specifies context resources that augment/override the parent context."],downsample_factors:[3,1,2,"json-driver/downsample.downsample_factors",""],downsample_method:[3,1,2,"json-driver/downsample.downsample_method",""],driver:[3,1,2,"json-driver/downsample.driver",""],dtype:[3,1,2,"json-driver/downsample.dtype","Specifies the data type."],rank:[3,1,2,"json-driver/downsample.rank","Specifies the rank of the TensorStore."],schema:[3,1,2,"json-driver/downsample.schema","Specifies constraints on the schema."],transform:[3,1,2,"json-driver/downsample.transform","Specifies a transform."]},"driver/jpeg":{cache_pool:[4,1,2,"json-driver/jpeg.cache_pool",""],context:[4,1,2,"json-driver/jpeg.context","Specifies context resources that augment/override the parent context."],data_copy_concurrency:[4,1,2,"json-driver/jpeg.data_copy_concurrency",""],driver:[4,1,2,"json-driver/jpeg.driver",""],dtype:[4,1,2,"json-driver/jpeg.dtype",""],kvstore:[4,1,2,"json-driver/jpeg.kvstore",""],quality:[4,1,2,"json-driver/jpeg.quality",""],rank:[4,1,2,"json-driver/jpeg.rank",""],schema:[4,1,2,"json-driver/jpeg.schema","Specifies constraints on the schema."],transform:[4,1,2,"json-driver/jpeg.transform","Specifies a transform."]},"driver/json":{cache_pool:[7,1,2,"json-driver/json.cache_pool",""],context:[7,1,2,"json-driver/json.context","Specifies context resources that augment/override the parent context."],data_copy_concurrency:[7,1,2,"json-driver/json.data_copy_concurrency",""],driver:[7,1,2,"json-driver/json.driver",""],dtype:[7,1,2,"json-driver/json.dtype",""],json_pointer:[7,1,2,"json-driver/json.json_pointer",""],kvstore:[7,1,2,"json-driver/json.kvstore",""],path:[7,1,2,"json-driver/json.path","Additional path to the JSON file within the KvStore specified by\nkvstore."],rank:[7,1,2,"json-driver/json.rank",""],recheck_cached_data:[7,1,2,"json-driver/json.recheck_cached_data",""],schema:[7,1,2,"json-driver/json.schema","Specifies constraints on the schema."],transform:[7,1,2,"json-driver/json.transform","Specifies a transform."]},"driver/n5":{cache_pool:[8,1,2,"json-driver/n5.cache_pool",""],context:[8,1,2,"json-driver/n5.context","Specifies context resources that augment/override the parent context."],create:[8,1,2,"json-driver/n5.create",""],data_copy_concurrency:[8,1,2,"json-driver/n5.data_copy_concurrency",""],delete_existing:[8,1,2,"json-driver/n5.delete_existing",""],driver:[8,1,2,"json-driver/n5.driver",""],dtype:[8,1,2,"json-driver/n5.dtype","Specifies the data type."],kvstore:[8,1,2,"json-driver/n5.kvstore",""],metadata:[8,1,2,"json-driver/n5.metadata","N5 array metadata."],open:[8,1,2,"json-driver/n5.open",""],path:[8,1,2,"json-driver/n5.path","Additional path within the KvStore specified by\nkvstore."],rank:[8,1,2,"json-driver/n5.rank","Specifies the rank of the TensorStore."],recheck_cached_data:[8,1,2,"json-driver/n5.recheck_cached_data",""],recheck_cached_metadata:[8,1,2,"json-driver/n5.recheck_cached_metadata",""],schema:[8,1,2,"json-driver/n5.schema","Specifies constraints on the schema."],transform:[8,1,2,"json-driver/n5.transform","Specifies a transform."]},"driver/n5.metadata":{axes:[8,1,2,"json-driver/n5.metadata.axes","Specifies a label for each dimension of the dataset."],blockSize:[8,1,2,"json-driver/n5.metadata.blockSize","Chunk dimensions."],compression:[8,1,2,"json-driver/n5.metadata.compression","Specifies the chunk compression method."],dataType:[8,1,2,"json-driver/n5.metadata.dataType","Specifies the data type."],dimensions:[8,1,2,"json-driver/n5.metadata.dimensions","Dimensions of the dataset."],resolution:[8,1,2,"json-driver/n5.metadata.resolution","Specifies the multiplier for the physical units."],units:[8,1,2,"json-driver/n5.metadata.units","Specifies the base physical unit for each dimension."]},"driver/n5/Codec":{compression:[8,1,2,"json-driver/n5/Codec.compression","Specifies the chunk compression method."],driver:[8,1,2,"json-driver/n5/Codec.driver",""]},"driver/n5/Compression":{type:[8,1,2,"json-driver/n5/Compression.type",""]},"driver/n5/Compression/blosc":{clevel:[8,1,2,"json-driver/n5/Compression/blosc.clevel","Specifies the Blosc compression level to use."],cname:[8,1,2,"json-driver/n5/Compression/blosc.cname",""],shuffle:[8,1,2,"json-driver/n5/Compression/blosc.shuffle",""],type:[8,1,2,"json-driver/n5/Compression/blosc.type",""]},"driver/n5/Compression/bzip2":{blockSize:[8,1,2,"json-driver/n5/Compression/bzip2.blockSize","Specifies the bzip2 block size to use (in units of 100KB), which also determine the compression level."],type:[8,1,2,"json-driver/n5/Compression/bzip2.type",""]},"driver/n5/Compression/gzip":{level:[8,1,2,"json-driver/n5/Compression/gzip.level","Specifies the zlib compression level to use."],type:[8,1,2,"json-driver/n5/Compression/gzip.type",""],useZlib:[8,1,2,"json-driver/n5/Compression/gzip.useZlib",""]},"driver/n5/Compression/raw":{type:[8,1,2,"json-driver/n5/Compression/raw.type",""]},"driver/n5/Compression/xz":{preset:[8,1,2,"json-driver/n5/Compression/xz.preset",""],type:[8,1,2,"json-driver/n5/Compression/xz.type",""]},"driver/neuroglancer_precomputed":{cache_pool:[9,1,2,"json-driver/neuroglancer_precomputed.cache_pool",""],context:[9,1,2,"json-driver/neuroglancer_precomputed.context","Specifies context resources that augment/override the parent context."],create:[9,1,2,"json-driver/neuroglancer_precomputed.create",""],data_copy_concurrency:[9,1,2,"json-driver/neuroglancer_precomputed.data_copy_concurrency",""],delete_existing:[9,1,2,"json-driver/neuroglancer_precomputed.delete_existing",""],driver:[9,1,2,"json-driver/neuroglancer_precomputed.driver",""],dtype:[9,1,2,"json-driver/neuroglancer_precomputed.dtype","Specifies the data type."],kvstore:[9,1,2,"json-driver/neuroglancer_precomputed.kvstore",""],multiscale_metadata:[9,1,2,"json-driver/neuroglancer_precomputed.multiscale_metadata","Scale-independent metadata."],open:[9,1,2,"json-driver/neuroglancer_precomputed.open",""],path:[9,1,2,"json-driver/neuroglancer_precomputed.path","Additional path within the KvStore specified by\nkvstore."],rank:[9,1,2,"json-driver/neuroglancer_precomputed.rank","Specifies the rank of the TensorStore."],recheck_cached_data:[9,1,2,"json-driver/neuroglancer_precomputed.recheck_cached_data",""],recheck_cached_metadata:[9,1,2,"json-driver/neuroglancer_precomputed.recheck_cached_metadata",""],scale_index:[9,1,2,"json-driver/neuroglancer_precomputed.scale_index","Zero-based index of the scale to open or create."],scale_metadata:[9,1,2,"json-driver/neuroglancer_precomputed.scale_metadata","Per-scale metadata."],schema:[9,1,2,"json-driver/neuroglancer_precomputed.schema","Specifies constraints on the schema."],transform:[9,1,2,"json-driver/neuroglancer_precomputed.transform","Specifies a transform."]},"driver/neuroglancer_precomputed.multiscale_metadata":{data_type:[9,1,2,"json-driver/neuroglancer_precomputed.multiscale_metadata.data_type","Specifies the data type."],num_channels:[9,1,2,"json-driver/neuroglancer_precomputed.multiscale_metadata.num_channels","Number of channels."],type:[9,1,2,"json-driver/neuroglancer_precomputed.multiscale_metadata.type","Specifying the type of volume."]},"driver/neuroglancer_precomputed.scale_metadata":{chunk_size:[9,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.chunk_size","Chunk dimensions (XYZ order)."],compressed_segmentation_block_size:[9,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.compressed_segmentation_block_size","Block size for compressed segmentation encoding."],encoding:[9,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.encoding","Specifies the chunk encoding."],jpeg_quality:[9,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.jpeg_quality","JPEG encoding quality."],key:[9,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.key","Specifies the scale key (relative to path)."],resolution:[9,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.resolution","Voxel size in nanometers (XYZ order)."],sharding:[9,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.sharding",""],size:[9,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.size","Voxel dimensions of the volume (XYZ order)."],voxel_offset:[9,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.voxel_offset","Voxel origin of the volume (XYZ order)."]},"driver/neuroglancer_precomputed/Codec":{driver:[9,1,2,"json-driver/neuroglancer_precomputed/Codec.driver",""],encoding:[9,1,2,"json-driver/neuroglancer_precomputed/Codec.encoding","Specifies the chunk encoding."],jpeg_quality:[9,1,2,"json-driver/neuroglancer_precomputed/Codec.jpeg_quality","JPEG encoding quality."],shard_data_encoding:[9,1,2,"json-driver/neuroglancer_precomputed/Codec.shard_data_encoding","Additional data compression when using the sharded format."]},"driver/neuroglancer_precomputed/ShardingSpec":{"@type":[9,1,2,"json-driver/neuroglancer_precomputed/ShardingSpec.@type",""],data_encoding:[9,1,2,"json-driver/neuroglancer_precomputed/ShardingSpec.data_encoding","Specifies the encoding of the data chunks."],hash:[9,1,2,"json-driver/neuroglancer_precomputed/ShardingSpec.hash","Specifies the hash function used to map chunk IDs to shards."],minishard_bits:[9,1,2,"json-driver/neuroglancer_precomputed/ShardingSpec.minishard_bits","Number of bits of the hashed chunk ID that determine the minishard number."],minishard_index_encoding:[9,1,2,"json-driver/neuroglancer_precomputed/ShardingSpec.minishard_index_encoding","Specifies the encoding of the minishard index."],preshift_bits:[9,1,2,"json-driver/neuroglancer_precomputed/ShardingSpec.preshift_bits","Number of low-order bits of the chunk ID that do not contribute to the hashed chunk ID."],shard_bits:[9,1,2,"json-driver/neuroglancer_precomputed/ShardingSpec.shard_bits","Number of bits of the hashed chunk ID that determine the shard number."]},"driver/png":{cache_pool:[5,1,2,"json-driver/png.cache_pool",""],compression_level:[5,1,2,"json-driver/png.compression_level",""],context:[5,1,2,"json-driver/png.context","Specifies context resources that augment/override the parent context."],data_copy_concurrency:[5,1,2,"json-driver/png.data_copy_concurrency",""],driver:[5,1,2,"json-driver/png.driver",""],dtype:[5,1,2,"json-driver/png.dtype",""],kvstore:[5,1,2,"json-driver/png.kvstore",""],rank:[5,1,2,"json-driver/png.rank",""],schema:[5,1,2,"json-driver/png.schema","Specifies constraints on the schema."],transform:[5,1,2,"json-driver/png.transform","Specifies a transform."]},"driver/stack":{context:[10,1,2,"json-driver/stack.context","Specifies context resources that augment/override the parent context."],driver:[10,1,2,"json-driver/stack.driver",""],dtype:[10,1,2,"json-driver/stack.dtype","Specifies the data type."],layers:[10,1,2,"json-driver/stack.layers","Array of layered tensorstore drivers."],rank:[10,1,2,"json-driver/stack.rank","Specifies the rank of the TensorStore."],schema:[10,1,2,"json-driver/stack.schema",""],transform:[10,1,2,"json-driver/stack.transform","Specifies a transform."]},"driver/zarr":{cache_pool:[11,1,2,"json-driver/zarr.cache_pool",""],context:[11,1,2,"json-driver/zarr.context","Specifies context resources that augment/override the parent context."],create:[11,1,2,"json-driver/zarr.create",""],data_copy_concurrency:[11,1,2,"json-driver/zarr.data_copy_concurrency",""],delete_existing:[11,1,2,"json-driver/zarr.delete_existing",""],driver:[11,1,2,"json-driver/zarr.driver",""],dtype:[11,1,2,"json-driver/zarr.dtype","Specifies the data type."],field:[11,1,2,"json-driver/zarr.field","Name of field to open."],key_encoding:[11,1,2,"json-driver/zarr.key_encoding","Specifies the encoding of chunk indices into key-value store keys."],kvstore:[11,1,2,"json-driver/zarr.kvstore",""],metadata:[11,1,2,"json-driver/zarr.metadata","Zarr array metadata."],metadata_key:[11,1,2,"json-driver/zarr.metadata_key","Specifies the key under which to store the array metadata in JSON format."],open:[11,1,2,"json-driver/zarr.open",""],path:[11,1,2,"json-driver/zarr.path","Additional path within the KvStore specified by\nkvstore."],rank:[11,1,2,"json-driver/zarr.rank","Specifies the rank of the TensorStore."],recheck_cached_data:[11,1,2,"json-driver/zarr.recheck_cached_data",""],recheck_cached_metadata:[11,1,2,"json-driver/zarr.recheck_cached_metadata",""],schema:[11,1,2,"json-driver/zarr.schema","Specifies constraints on the schema."],transform:[11,1,2,"json-driver/zarr.transform","Specifies a transform."]},"driver/zarr.metadata":{chunks:[11,1,2,"json-driver/zarr.metadata.chunks","Chunk dimensions."],compressor:[11,1,2,"json-driver/zarr.metadata.compressor","Specifies the chunk compression method."],dimension_separator:[11,1,2,"json-driver/zarr.metadata.dimension_separator","Specifies the encoding of chunk indices into key-value store keys."],dtype:[11,1,2,"json-driver/zarr.metadata.dtype","Specifies the scalar or structured data type."],fill_value:[11,1,2,"json-driver/zarr.metadata.fill_value","Specifies the fill value."],filters:[11,1,2,"json-driver/zarr.metadata.filters","Specifies the filters to apply to chunks."],order:[11,1,2,"json-driver/zarr.metadata.order","Specifies the data layout for encoded chunks."],shape:[11,1,2,"json-driver/zarr.metadata.shape","Chunked dimensions of the array."],zarr_format:[11,1,2,"json-driver/zarr.metadata.zarr_format",""]},"driver/zarr/Codec":{compressor:[11,1,2,"json-driver/zarr/Codec.compressor","Specifies the chunk compression method."],driver:[11,1,2,"json-driver/zarr/Codec.driver",""],filters:[11,1,2,"json-driver/zarr/Codec.filters","Specifies the filters to apply to chunks."]},"driver/zarr/Compressor":{id:[11,1,2,"json-driver/zarr/Compressor.id",""]},"driver/zarr/Compressor/blosc":{blocksize:[11,1,2,"json-driver/zarr/Compressor/blosc.blocksize","Specifies the Blosc blocksize."],clevel:[11,1,2,"json-driver/zarr/Compressor/blosc.clevel","Specifies the Blosc compression level to use."],cname:[11,1,2,"json-driver/zarr/Compressor/blosc.cname",""],id:[11,1,2,"json-driver/zarr/Compressor/blosc.id",""],shuffle:[11,1,2,"json-driver/zarr/Compressor/blosc.shuffle",""]},"driver/zarr/Compressor/bz2":{id:[11,1,2,"json-driver/zarr/Compressor/bz2.id",""],level:[11,1,2,"json-driver/zarr/Compressor/bz2.level","Specifies the bzip2 buffer size/compression level to use."]},"driver/zarr/Compressor/zlib":{id:[11,1,2,"json-driver/zarr/Compressor/zlib.id",""],level:[11,1,2,"json-driver/zarr/Compressor/zlib.level","Specifies the zlib compression level to use."]},"kvstore/file":{context:[16,1,2,"json-kvstore/file.context",""],driver:[16,1,2,"json-kvstore/file.driver",""],file_io_concurrency:[16,1,2,"json-kvstore/file.file_io_concurrency",""],path:[16,1,2,"json-kvstore/file.path","Path to root directory on local filesystem."]},"kvstore/gcs":{bucket:[17,1,2,"json-kvstore/gcs.bucket","Google Cloud Storage bucket to use."],context:[17,1,2,"json-kvstore/gcs.context",""],driver:[17,1,2,"json-kvstore/gcs.driver",""],gcs_request_concurrency:[17,1,2,"json-kvstore/gcs.gcs_request_concurrency",""],gcs_request_retries:[17,1,2,"json-kvstore/gcs.gcs_request_retries",""],gcs_user_project:[17,1,2,"json-kvstore/gcs.gcs_user_project",""],path:[17,1,2,"json-kvstore/gcs.path","Key prefix within the key-value store."]},"kvstore/memory":{atomic:[19,1,2,"json-kvstore/memory.atomic",""],context:[19,1,2,"json-kvstore/memory.context",""],driver:[19,1,2,"json-kvstore/memory.driver",""],memory_key_value_store:[19,1,2,"json-kvstore/memory.memory_key_value_store",""],path:[19,1,2,"json-kvstore/memory.path","Key prefix within the key-value store."]},"tensorstore.ChunkLayout":{"__init__(components)":[37,3,1,"","Constructs from component parts."],"__init__(json)":[38,3,1,"","Constructs from the JSON representation."],Grid:[22,2,1,"","Describes a regular grid layout for write/read/codec chunks."],__eq__:[36,3,1,"","Compares two chunk layouts for equality."],codec_chunk:[39,5,1,"","Chunk grid used by the codec."],grid_origin:[40,5,1,"","Hard constraints on the grid origin."],grid_origin_soft_constraint:[41,5,1,"","Soft constraints on the grid origin."],inner_order:[42,5,1,"","Permutation specifying the element storage order within the innermost chunks."],inner_order_soft_constraint:[43,5,1,"","Permutation specifying soft constraint on the element storage order."],ndim:[44,5,1,"","Alias for rank."],rank:[45,5,1,"","Number of dimensions in the index space."],read_chunk:[46,5,1,"","Chunk grid for efficient reads."],read_chunk_template:[47,5,1,"","Chunk offset and shape for efficient reads."],to_json:[48,3,1,"","Converts to the JSON representation."],update:[49,3,1,"","Adds additional constraints."],write_chunk:[50,5,1,"","Chunk grid for efficient writes."],write_chunk_template:[51,5,1,"","Chunk offset and shape for efficient writes."]},"tensorstore.ChunkLayout.Grid":{"__init__(components)":[24,3,1,"","Constructs a chunk grid."],"__init__(json)":[25,3,1,"","Constructs from the JSON representation."],__eq__:[23,3,1,"","Compares two chunk grids for equality."],aspect_ratio:[26,5,1,"","Chunk shape aspect ratio."],aspect_ratio_soft_constraint:[27,5,1,"","Soft constraints on chunk shape aspect ratio."],elements:[28,5,1,"","Target number of elements per chunk."],elements_soft_constraint:[29,5,1,"","Soft constraint on target number of elements per chunk."],ndim:[30,5,1,"","Alias for rank."],rank:[31,5,1,"","Number of dimensions, or None if unspecified."],shape:[32,5,1,"","Hard constraints on chunk shape."],shape_soft_constraint:[33,5,1,"","Soft constraints on chunk shape."],to_json:[34,3,1,"","Converts to the JSON representation."],update:[35,3,1,"","Adds additional constraints."]},"tensorstore.ChunkLayout.Grid.__init__(components)":{aspect_ratio:[24,4,2,"p-aspect_ratio","Aspect ratio for each dimension."],aspect_ratio_soft_constraint:[24,4,2,"p-aspect_ratio_soft_constraint","Soft constraints on the aspect ratio for each dimension."],elements:[24,4,2,"p-elements","Target number of elements per chunk."],elements_soft_constraint:[24,4,2,"p-elements_soft_constraint","Soft constraint on the target number of elements per chunk."],grid:[24,4,2,"p-grid","Other grid constraints to merge in."],grid_soft_constraint:[24,4,2,"p-grid_soft_constraint","Other grid constraints to merge in as soft constraints."],rank:[24,4,2,"p-rank","Specifies the number of dimensions."],shape:[24,4,2,"p-shape","Hard constraints on the chunk size for each dimension."],shape_soft_constraint:[24,4,2,"p-shape_soft_constraint","Soft constraints on the chunk size for each dimension."]},"tensorstore.ChunkLayout.Grid.update":{aspect_ratio:[35,4,2,"p-aspect_ratio","Aspect ratio for each dimension."],aspect_ratio_soft_constraint:[35,4,2,"p-aspect_ratio_soft_constraint","Soft constraints on the aspect ratio for each dimension."],elements:[35,4,2,"p-elements","Target number of elements per chunk."],elements_soft_constraint:[35,4,2,"p-elements_soft_constraint","Soft constraint on the target number of elements per chunk."],grid:[35,4,2,"p-grid","Other grid constraints to merge in."],grid_soft_constraint:[35,4,2,"p-grid_soft_constraint","Other grid constraints to merge in as soft constraints."],rank:[35,4,2,"p-rank","Specifies the number of dimensions."],shape:[35,4,2,"p-shape","Hard constraints on the chunk size for each dimension."],shape_soft_constraint:[35,4,2,"p-shape_soft_constraint","Soft constraints on the chunk size for each dimension."]},"tensorstore.ChunkLayout.__init__(components)":{chunk:[37,4,2,"p-chunk","Common constraints on write, read, and codec chunks."],chunk_aspect_ratio:[37,4,2,"p-chunk_aspect_ratio","Hard constraints on the write, read, and codec chunk aspect ratio."],chunk_aspect_ratio_soft_constraint:[37,4,2,"p-chunk_aspect_ratio_soft_constraint","Soft constraints on the write, read, and codec chunk aspect ratio."],chunk_elements:[37,4,2,"p-chunk_elements","Hard constraints on the target number of elements for write and read chunks.\nCorresponds to the JSON elements member of\nChunkLayout.chunk."],chunk_elements_soft_constraint:[37,4,2,"p-chunk_elements_soft_constraint","Soft constraints on the target number of elements for write and read chunks.\nCorresponds to the JSON\nelements_soft_constraint member of\nChunkLayout.chunk."],chunk_shape:[37,4,2,"p-chunk_shape","Hard constraints on both the write and read chunk shape."],chunk_shape_soft_constraint:[37,4,2,"p-chunk_shape_soft_constraint","Soft constraints on both the write and read chunk shape."],codec_chunk:[37,4,2,"p-codec_chunk","Constraints on codec chunks."],codec_chunk_aspect_ratio:[37,4,2,"p-codec_chunk_aspect_ratio","Soft constraints on the codec chunk aspect ratio."],codec_chunk_aspect_ratio_soft_constraint:[37,4,2,"p-codec_chunk_aspect_ratio_soft_constraint","Soft constraints on the codec chunk aspect ratio."],codec_chunk_elements:[37,4,2,"p-codec_chunk_elements","Hard constraints on the target number of elements for codec chunks."],codec_chunk_elements_soft_constraint:[37,4,2,"p-codec_chunk_elements_soft_constraint","Soft constraints on the target number of elements for codec chunks."],codec_chunk_shape:[37,4,2,"p-codec_chunk_shape","Soft constraints on the codec chunk shape."],codec_chunk_shape_soft_constraint:[37,4,2,"p-codec_chunk_shape_soft_constraint","Soft constraints on the codec chunk shape."],finalize:[37,4,2,"p-finalize","Validates and converts the layout into a precise chunk\nlayout."],grid_origin:[37,4,2,"p-grid_origin","Hard constraints on the origin of the chunk grid.\nCorresponds to the JSON ChunkLayout.grid_origin member."],grid_origin_soft_constraint:[37,4,2,"p-grid_origin_soft_constraint","Soft constraints on the origin of the chunk grid."],inner_order:[37,4,2,"p-inner_order","Permutation specifying the element storage order within the innermost chunks.\nCorresponds to the JSON ChunkLayout.inner_order member."],inner_order_soft_constraint:[37,4,2,"p-inner_order_soft_constraint","Specifies a preferred value for inner_order rather than a\nhard constraint."],rank:[37,4,2,"p-rank","Specifies the number of dimensions."],read_chunk:[37,4,2,"p-read_chunk","Constraints on read chunks."],read_chunk_aspect_ratio:[37,4,2,"p-read_chunk_aspect_ratio","Hard constraints on the read chunk aspect ratio."],read_chunk_aspect_ratio_soft_constraint:[37,4,2,"p-read_chunk_aspect_ratio_soft_constraint","Soft constraints on the read chunk aspect ratio."],read_chunk_elements:[37,4,2,"p-read_chunk_elements","Hard constraints on the target number of elements for read chunks."],read_chunk_elements_soft_constraint:[37,4,2,"p-read_chunk_elements_soft_constraint","Soft constraints on the target number of elements for read chunks."],read_chunk_shape:[37,4,2,"p-read_chunk_shape","Hard constraints on the read chunk shape."],read_chunk_shape_soft_constraint:[37,4,2,"p-read_chunk_shape_soft_constraint","Soft constraints on the read chunk shape."],write_chunk:[37,4,2,"p-write_chunk","Constraints on write chunks."],write_chunk_aspect_ratio:[37,4,2,"p-write_chunk_aspect_ratio","Hard constraints on the write chunk aspect ratio."],write_chunk_aspect_ratio_soft_constraint:[37,4,2,"p-write_chunk_aspect_ratio_soft_constraint","Soft constraints on the write chunk aspect ratio."],write_chunk_elements:[37,4,2,"p-write_chunk_elements","Hard constraints on the target number of elements for write chunks."],write_chunk_elements_soft_constraint:[37,4,2,"p-write_chunk_elements_soft_constraint","Soft constraints on the target number of elements for write chunks."],write_chunk_shape:[37,4,2,"p-write_chunk_shape","Hard constraints on the write chunk shape."],write_chunk_shape_soft_constraint:[37,4,2,"p-write_chunk_shape_soft_constraint","Soft constraints on the write chunk shape."]},"tensorstore.ChunkLayout.update":{chunk:[49,4,2,"p-chunk","Common constraints on write, read, and codec chunks."],chunk_aspect_ratio:[49,4,2,"p-chunk_aspect_ratio","Hard constraints on the write, read, and codec chunk aspect ratio."],chunk_aspect_ratio_soft_constraint:[49,4,2,"p-chunk_aspect_ratio_soft_constraint","Soft constraints on the write, read, and codec chunk aspect ratio."],chunk_elements:[49,4,2,"p-chunk_elements","Hard constraints on the target number of elements for write and read chunks.\nCorresponds to the JSON elements member of\nChunkLayout.chunk."],chunk_elements_soft_constraint:[49,4,2,"p-chunk_elements_soft_constraint","Soft constraints on the target number of elements for write and read chunks.\nCorresponds to the JSON\nelements_soft_constraint member of\nChunkLayout.chunk."],chunk_shape:[49,4,2,"p-chunk_shape","Hard constraints on both the write and read chunk shape."],chunk_shape_soft_constraint:[49,4,2,"p-chunk_shape_soft_constraint","Soft constraints on both the write and read chunk shape."],codec_chunk:[49,4,2,"p-codec_chunk","Constraints on codec chunks."],codec_chunk_aspect_ratio:[49,4,2,"p-codec_chunk_aspect_ratio","Soft constraints on the codec chunk aspect ratio."],codec_chunk_aspect_ratio_soft_constraint:[49,4,2,"p-codec_chunk_aspect_ratio_soft_constraint","Soft constraints on the codec chunk aspect ratio."],codec_chunk_elements:[49,4,2,"p-codec_chunk_elements","Hard constraints on the target number of elements for codec chunks."],codec_chunk_elements_soft_constraint:[49,4,2,"p-codec_chunk_elements_soft_constraint","Soft constraints on the target number of elements for codec chunks."],codec_chunk_shape:[49,4,2,"p-codec_chunk_shape","Soft constraints on the codec chunk shape."],codec_chunk_shape_soft_constraint:[49,4,2,"p-codec_chunk_shape_soft_constraint","Soft constraints on the codec chunk shape."],finalize:[49,4,2,"p-finalize","Validates and converts the layout into a precise chunk\nlayout."],grid_origin:[49,4,2,"p-grid_origin","Hard constraints on the origin of the chunk grid.\nCorresponds to the JSON ChunkLayout.grid_origin member."],grid_origin_soft_constraint:[49,4,2,"p-grid_origin_soft_constraint","Soft constraints on the origin of the chunk grid."],inner_order:[49,4,2,"p-inner_order","Permutation specifying the element storage order within the innermost chunks.\nCorresponds to the JSON ChunkLayout.inner_order member."],inner_order_soft_constraint:[49,4,2,"p-inner_order_soft_constraint","Specifies a preferred value for inner_order rather than a\nhard constraint."],rank:[49,4,2,"p-rank","Specifies the number of dimensions."],read_chunk:[49,4,2,"p-read_chunk","Constraints on read chunks."],read_chunk_aspect_ratio:[49,4,2,"p-read_chunk_aspect_ratio","Hard constraints on the read chunk aspect ratio."],read_chunk_aspect_ratio_soft_constraint:[49,4,2,"p-read_chunk_aspect_ratio_soft_constraint","Soft constraints on the read chunk aspect ratio."],read_chunk_elements:[49,4,2,"p-read_chunk_elements","Hard constraints on the target number of elements for read chunks."],read_chunk_elements_soft_constraint:[49,4,2,"p-read_chunk_elements_soft_constraint","Soft constraints on the target number of elements for read chunks."],read_chunk_shape:[49,4,2,"p-read_chunk_shape","Hard constraints on the read chunk shape."],read_chunk_shape_soft_constraint:[49,4,2,"p-read_chunk_shape_soft_constraint","Soft constraints on the read chunk shape."],write_chunk:[49,4,2,"p-write_chunk","Constraints on write chunks."],write_chunk_aspect_ratio:[49,4,2,"p-write_chunk_aspect_ratio","Hard constraints on the write chunk aspect ratio."],write_chunk_aspect_ratio_soft_constraint:[49,4,2,"p-write_chunk_aspect_ratio_soft_constraint","Soft constraints on the write chunk aspect ratio."],write_chunk_elements:[49,4,2,"p-write_chunk_elements","Hard constraints on the target number of elements for write chunks."],write_chunk_elements_soft_constraint:[49,4,2,"p-write_chunk_elements_soft_constraint","Soft constraints on the target number of elements for write chunks."],write_chunk_shape:[49,4,2,"p-write_chunk_shape","Hard constraints on the write chunk shape."],write_chunk_shape_soft_constraint:[49,4,2,"p-write_chunk_shape_soft_constraint","Soft constraints on the write chunk shape."]},"tensorstore.CodecSpec":{__init__:[53,3,1,"","Constructs from the JSON representation."],to_json:[54,3,1,"","Converts to the JSON representation."]},"tensorstore.Context":{"__init__(default)":[62,3,1,"","Constructs a default context."],"__init__(json)":[63,3,1,"","Constructs a context from its JSON representation."],"__init__(spec)":[64,3,1,"","Constructs a context from a parsed spec."],Resource:[56,2,1,"","Handle to a context resource."],Spec:[58,2,1,"","Parsed representation of a JSON Context specification."],__getitem__:[61,3,1,"","Creates or retrieves the context resource for the given key."],parent:[65,5,1,"","Parent context from which this context inherits."],spec:[66,5,1,"","Spec from which this context was constructed."]},"tensorstore.Context.Resource":{to_json:[57,3,1,"","Returns the JSON representation of the context resource."]},"tensorstore.Context.Spec":{__init__:[59,3,1,"","Creates a context specification from its JSON representation."],to_json:[60,3,1,"","Returns the JSON representation."]},"tensorstore.Context.Spec.to_json":{include_defaults:[60,4,2,"p-include_defaults","Indicates whether to include members even if they are equal to the default value."]},"tensorstore.Context.__getitem__":{key:[61,4,2,"p-key","Resource key, of the form '<resource-type>' or\n<resource-type>#<id>."]},"tensorstore.Context.__init__(json)":{json:[63,4,2,"p-json","JSON representation of the context."],parent:[63,4,2,"p-parent","Parent context from which to inherit."]},"tensorstore.Context.__init__(spec)":{parent:[64,4,2,"p-parent","Parent context from which to inherit."],spec:[64,4,2,"p-spec","Parsed context spec."]},"tensorstore.Dim":{"__contains__(dim)":[68,3,1,"","Checks if the interval contains another interval."],"__contains__(index)":[69,3,1,"","Checks if the interval contains a given index."],"__init__(exclusive_max)":[71,3,1,"","Constructs a half-open interval [inclusive_min, exclusive_max)`."],"__init__(inclusive_max)":[72,3,1,"","Constructs a closed interval [inclusive_min, inclusive_max]."],"__init__(size)":[73,3,1,"","Constructs a sized interval [inclusive_min, inclusive_min+size)."],"__init__(unbounded)":[74,3,1,"","Constructs an unbounded interval (-inf, +inf)."],__eq__:[70,3,1,"","Compares for equality with another interval."],__iter__:[75,3,1,"","Enables iteration over the indices contained in the interval."],__len__:[76,3,1,"","Size of the interval, equivalent to size."],__repr__:[77,3,1,"","Returns the string representation as a Python expression."],__str__:[78,3,1,"","Returns the string representation of the interval."],empty:[79,5,1,"","Returns True if size is zero."],exclusive_max:[80,5,1,"","Exclusive upper bound of the interval."],exclusive_min:[81,5,1,"","Exclusive lower bound of the interval."],finite:[82,5,1,"","Indicates if the interval is finite."],hull:[83,3,1,"","Hull with another Dim."],implicit_lower:[84,5,1,"","Indicates if the lower bound is implicit/resizeable."],implicit_upper:[85,5,1,"","Indicates if the upper bound is implicit/resizeable."],inclusive_max:[86,5,1,"","Inclusive upper bound of the interval."],inclusive_min:[87,5,1,"","Inclusive lower bound of the interval."],intersect:[88,3,1,"","Intersect with another Dim."],label:[89,5,1,"","Dimension label, or the empty string to indicate an unlabeled dimension."],size:[90,5,1,"","Size of the interval."]},"tensorstore.Dim.__init__(exclusive_max)":{exclusive_max:[71,4,2,"p-exclusive_max","Exclusive upper bound."],implicit_lower:[71,4,2,"p-implicit_lower","Indicates whether the lower bound is\nimplicit."],implicit_upper:[71,4,2,"p-implicit_upper","Indicates whether the upper bound is\nimplicit."],inclusive_min:[71,4,2,"p-inclusive_min","Inclusive lower bound."],label:[71,4,2,"p-label","Dimension label."]},"tensorstore.Dim.__init__(inclusive_max)":{implicit_lower:[72,4,2,"p-implicit_lower","Indicates whether the lower bound is\nimplicit."],implicit_upper:[72,4,2,"p-implicit_upper","Indicates whether the upper bound is\nimplicit."],inclusive_max:[72,4,2,"p-inclusive_max","Inclusive upper bound."],inclusive_min:[72,4,2,"p-inclusive_min","Inclusive lower bound."],label:[72,4,2,"p-label","Dimension label."]},"tensorstore.Dim.__init__(size)":{implicit_lower:[73,4,2,"p-implicit_lower","Indicates whether the lower bound is\nimplicit."],implicit_upper:[73,4,2,"p-implicit_upper","Indicates whether the upper bound is\nimplicit."],inclusive_min:[73,4,2,"p-inclusive_min","Inclusive lower bound."],label:[73,4,2,"p-label","Dimension label."],size:[73,4,2,"p-size","Size of the interval."]},"tensorstore.Dim.__init__(unbounded)":{implicit_lower:[74,4,2,"p-implicit_lower","Indicates whether the lower bound is\nimplicit."],implicit_upper:[74,4,2,"p-implicit_upper","Indicates whether the upper bound is\nimplicit."],label:[74,4,2,"p-label","Dimension label."]},"tensorstore.Dim.hull":{other:[83,4,2,"p-other","Object to hull with."]},"tensorstore.Dim.intersect":{other:[88,4,2,"p-other","Object to intersect with."]},"tensorstore.DimExpression":{__getitem__:[92,3,1,"","Applies a NumPy-style indexing operation with default index array semantics."],diagonal:[93,5,1,"","Extracts the diagonal of the selected dimensions."],label:[94,3,1,"","Sets (or changes) the labels of the selected dimensions."],oindex:[95,3,1,"","Applies a NumPy-style indexing operation with outer indexing semantics."],stride:[96,3,1,"","Strides the domains of the selected input dimensions by the specified amounts."],translate_backward_by:[97,3,1,"","Translates (shifts) the domains of the selected input dimensions backward by the\nspecified offsets, without affecting the output range."],translate_by:[98,3,1,"","Translates (shifts) the domains of the selected input dimensions by the\nspecified offsets, without affecting the output range."],translate_to:[99,3,1,"","Translates the domains of the selected input dimensions to the specified\norigins without affecting the output range."],transpose:[100,3,1,"","Transposes the selected dimensions to the specified target indices."],vindex:[101,3,1,"","Applies a NumPy-style indexing operation with vectorized indexing semantics."]},"tensorstore.DimExpression.label":{labels:[94,4,2,"p-labels","Dimension labels for each selected dimension."]},"tensorstore.DimExpression.stride":{strides:[96,4,2,"p-strides","Strides for each selected dimension."]},"tensorstore.DimExpression.translate_backward_by":{offsets:[97,4,2,"p-offsets","The offsets for each of the selected dimensions."]},"tensorstore.DimExpression.translate_by":{offsets:[98,4,2,"p-offsets","The offsets for each of the selected dimensions."]},"tensorstore.DimExpression.translate_to":{origins:[99,4,2,"p-origins","The new origins for each of the selected dimensions."]},"tensorstore.DimExpression.transpose":{target:[100,4,2,"p-target","Target dimension indices for the selected dimensions."]},"tensorstore.Future":{__new__:[103,3,1,"","Converts a FutureLike object to a Future."],add_done_callback:[104,3,1,"","Registers a callback to be invoked upon completion of the asynchronous operation."],cancel:[105,3,1,"","Requests cancellation of the asynchronous operation."],cancelled:[106,3,1,"","Queries whether the asynchronous operation has been cancelled."],done:[107,3,1,"","Queries whether the asynchronous operation has completed or been cancelled."],exception:[108,3,1,"","Blocks until asynchronous operation completes, and returns the error if any."],force:[109,3,1,"","Ensures the asynchronous operation begins executing."],remove_done_callback:[110,3,1,"","Unregisters a previously-registered callback."],result:[111,3,1,"","Blocks until the asynchronous operation completes, and returns the result."]},"tensorstore.Future.__new__":{future:[103,4,2,"p-future","Specifies the immediate or asynchronous result."],loop:[103,4,2,"p-loop","Event loop on which to run future if it is a\ncoroutine."]},"tensorstore.Future.exception":{deadline:[108,4,2,"p-deadline","Deadline in seconds since the Unix epoch."],timeout:[108,4,2,"p-timeout","Maximum number of seconds to block."]},"tensorstore.Future.result":{deadline:[111,4,2,"p-deadline","Deadline in seconds since the Unix epoch."],timeout:[111,4,2,"p-timeout","Maximum number of seconds to block."]},"tensorstore.IndexDomain":{"__getitem__(domain)":[114,3,1,"","Slices this domain by another domain."],"__getitem__(expr)":[115,3,1,"","Transforms the domain by a dimension expression."],"__getitem__(identifier)":[116,3,1,"","Returns the single dimension specified by identifier."],"__getitem__(selection)":[117,3,1,"","Returns a new domain with a subset of the dimensions."],"__getitem__(transform)":[118,3,1,"","Transforms the domain using an explicit index transform."],"__init__(components)":[119,3,1,"","Constructs an index domain from component vectors."],"__init__(dimensions)":[120,3,1,"","Constructs an index domain from a :py:class`.Dim` sequence."],"__init__(json)":[121,3,1,"","Constructs an index domain from its JSON representation."],__len__:[122,3,1,"","Returns the number of dimensions (rank)."],__repr__:[123,3,1,"","Returns the string representation."],exclusive_max:[124,5,1,"","Exclusive upper bound of the domain."],hull:[125,3,1,"","Computes the hull (minimum containing box) with another domain."],implicit_lower_bounds:[126,5,1,"","Indicates whether the lower bound of each dimension is implicit or explicit."],implicit_upper_bounds:[127,5,1,"","Indicates whether the upper bound of each dimension is implicit or explicit."],inclusive_max:[128,5,1,"","Inclusive upper bound of the domain."],inclusive_min:[129,5,1,"","Inclusive lower bound of the domain, alias of origin."],index_exp:[130,5,1,"","Equivalent NumPy-compatible index expression."],intersect:[131,3,1,"","Intersects with another domain."],labels:[132,5,1,"","Dimension labels for each dimension."],ndim:[133,5,1,"","Alias for rank."],origin:[134,5,1,"","Inclusive lower bound of the domain."],rank:[135,5,1,"","Number of dimensions in the index space."],shape:[136,5,1,"","Shape of the domain."],size:[137,5,1,"","Total number of elements in the domain."],to_json:[138,3,1,"","Returns the JSON representation."]},"tensorstore.IndexDomain.__getitem__(expr)":{expr:[115,4,2,"p-expr","Dimension expression to apply."]},"tensorstore.IndexDomain.__getitem__(identifier)":{identifier:[116,4,2,"p-identifier","Specifies a dimension by integer index or label."]},"tensorstore.IndexDomain.__getitem__(selection)":{selection:[117,4,2,"p-selection","Specifies the dimensions to include, either by index or label."]},"tensorstore.IndexDomain.__getitem__(transform)":{transform:[118,4,2,"p-transform","Index transform, transform.output_rank must equal\nself.rank."]},"tensorstore.IndexDomain.__init__(components)":{exclusive_max:[119,4,2,"p-exclusive_max","Exclusive upper bounds for each dimension."],implicit_lower_bounds:[119,4,2,"p-implicit_lower_bounds","Indicates whether each lower bound is\nimplicit or explicit."],implicit_upper_bounds:[119,4,2,"p-implicit_upper_bounds","Indicates whether each upper bound is\nimplicit or explicit."],inclusive_max:[119,4,2,"p-inclusive_max","Inclusive upper bounds for each dimension."],inclusive_min:[119,4,2,"p-inclusive_min","Inclusive lower bounds for each dimension."],labels:[119,4,2,"p-labels","Dimension labels."],rank:[119,4,2,"p-rank","Number of dimensions."],shape:[119,4,2,"p-shape","Size for each dimension."]},"tensorstore.IndexDomain.__init__(dimensions)":{dimensions:[120,4,2,"p-dimensions","Sequence of :py:class`.Dim` objects."]},"tensorstore.IndexDomain.hull":{other:[125,4,2,"p-other","Object to hull with."]},"tensorstore.IndexDomain.intersect":{other:[131,4,2,"p-other","Object to intersect with."]},"tensorstore.IndexTransform":{"__getitem__(domain)":[142,3,1,"","Slices this index transform by another domain."],"__getitem__(expr)":[143,3,1,"","Applies a dimension expression to this transform."],"__getitem__(indices)":[144,3,1,"","Applies a NumPy-style indexing operation with default index array semantics."],"__getitem__(transform)":[145,3,1,"","Composes this index transform with another index transform."],"__init__(components)":[146,3,1,"","Constructs an index transform from component vectors."],"__init__(domain)":[147,3,1,"","Constructs an index transform from a domain and output index maps."],"__init__(json)":[148,3,1,"","Constructs an index transform from its JSON representation."],T:[140,5,1,"","View with transposed domain (reversed dimension order)."],__call__:[141,3,1,"","Maps an input index vector to an output index vector."],__repr__:[149,3,1,"","Returns the string representation."],domain:[150,5,1,"","Input domain of the index transform."],implicit_lower_bounds:[151,5,1,"","Indicates whether the lower bound of each input dimension is implicit or explicit."],implicit_upper_bounds:[152,5,1,"","Indicates whether the upper bound of each input dimension is implicit or explicit."],input_exclusive_max:[153,5,1,"","Exclusive upper bound of the input domain."],input_inclusive_max:[154,5,1,"","Inclusive upper bound of the input domain."],input_inclusive_min:[155,5,1,"","Inclusive lower bound of the input domain, alias for input_origin."],input_labels:[156,5,1,"","Dimension labels for each input dimension."],input_origin:[157,5,1,"","Inclusive lower bound of the input domain."],input_rank:[158,5,1,"","Rank of the input space."],input_shape:[159,5,1,"","Shape of the input domain."],ndim:[160,5,1,"","Rank of the input space, alias for input_rank."],oindex:[161,3,1,"","Applies a NumPy-style indexing operation with outer indexing semantics."],origin:[162,5,1,"","Inclusive lower bound of the domain."],output:[163,5,1,"","Output index maps."],output_rank:[164,5,1,"","Rank of the output space."],shape:[165,5,1,"","Shape of the domain."],size:[166,5,1,"","Total number of elements in the domain."],to_json:[167,3,1,"","Returns the JSON representation of the transform."],vindex:[168,3,1,"","Applies a NumPy-style indexing operation with vectorized indexing semantics."]},"tensorstore.IndexTransform.__call__":{indices:[141,4,2,"p-indices","Input vector of length input_rank."]},"tensorstore.IndexTransform.__init__(components)":{implicit_lower_bounds:[146,4,2,"p-implicit_lower_bounds","Indicates whether each lower bound is\nimplicit or explicit."],implicit_upper_bounds:[146,4,2,"p-implicit_upper_bounds","Indicates whether each upper bound is\nimplicit or explicit."],input_exclusive_max:[146,4,2,"p-input_exclusive_max","Exclusive upper bounds for each input dimension."],input_inclusive_max:[146,4,2,"p-input_inclusive_max","Inclusive upper bounds for each input dimension."],input_inclusive_min:[146,4,2,"p-input_inclusive_min","Inclusive lower bounds for each input dimension."],input_labels:[146,4,2,"p-input_labels","Dimension labels for each input\ndimension."],input_rank:[146,4,2,"p-input_rank","Number of input dimensions."],input_shape:[146,4,2,"p-input_shape","Size for each input dimension."],output:[146,4,2,"p-output","Sequence of output index maps, or OutputIndexMaps object\nfrom an existing transform."]},"tensorstore.IndexTransform.__init__(domain)":{domain:[147,4,2,"p-domain","The domain of the index transform."],output:[147,4,2,"p-output","Sequence of output index maps, or OutputIndexMaps object\nfrom an existing transform."]},"tensorstore.KvStore":{KeyRange:[171,2,1,"","Half-open interval of byte string keys, according to lexicographical order."],ReadResult:[178,2,1,"","Specifies the result of a read operation."],Spec:[183,2,1,"","Parsed representation of a JSON key-value store specification."],TimestampedStorageGeneration:[193,2,1,"","Specifies a storage generation identifier and a timestamp."],__delitem__:[198,3,1,"","Synchronously deletes a single key."],__getitem__:[199,3,1,"","Synchronously reads the value of a single key."],__repr__:[200,3,1,"","Returns a string representation based on the  JSON representation."],__setitem__:[201,3,1,"","Synchronously writes the value of a single key."],copy:[202,3,1,"","Returns a copy of the key-value store."],delete_range:[203,3,1,"","Deletes a key range."],list:[204,3,1,"","Lists the keys in the key-value store."],open:[205,3,1,"","Opens a key-value store."],path:[206,5,1,"","Path prefix within the base key-value store."],read:[207,3,1,"","Reads the value of a single key."],spec:[208,3,1,"","Spec that may be used to re-open or re-create the key-value store."],transaction:[209,5,1,"","Transaction bound to this key-value store."],url:[210,5,1,"","URL representation of the key-value store specification."],with_transaction:[211,3,1,"","Returns a transaction-bound view of this key-value store."],write:[212,3,1,"","Writes or deletes a single key."]},"tensorstore.KvStore.KeyRange":{__eq__:[172,3,1,"","Compares with another range for equality."],__init__:[173,3,1,"","Constructs a key range from the specified half-open bounds."],copy:[174,3,1,"","Returns a copy of the range."],empty:[175,5,1,"","Indicates if the range contains no keys."],exclusive_max:[176,5,1,"","Exclusive upper bound of the range."],inclusive_min:[177,5,1,"","Inclusive lower bound of the range."]},"tensorstore.KvStore.KeyRange.__init__":{exclusive_max:[173,4,2,"p-exclusive_max","Exclusive upper bound of the range."],inclusive_min:[173,4,2,"p-inclusive_min","Inclusive lower bound of the range."]},"tensorstore.KvStore.ReadResult":{__init__:[179,3,1,"","Constructs a read result."],stamp:[180,5,1,"","Generation and timestamp associated with the value."],state:[181,5,1,"","Indicates the interpretation of value."],value:[182,5,1,"","Value associated with the key."]},"tensorstore.KvStore.Spec":{__add__:[184,3,1,"","Returns a key-value store with the suffix appended to the path."],__new__:[185,3,1,"","Constructs from the JSON representation or a URL."],__repr__:[186,3,1,"","Returns a string representation based on the  JSON representation."],__truediv__:[187,3,1,"","Returns a key-value store with an additional path component joined to the path."],copy:[188,3,1,"","Returns a copy of the key-value store spec."],path:[189,5,1,"","Path prefix within the base key-value store."],to_json:[190,3,1,"","Converts to the JSON representation."],update:[191,3,1,"","Modifies a spec."],url:[192,5,1,"","URL representation of the key-value store specification."]},"tensorstore.KvStore.Spec.update":{context:[191,4,2,"p-context","Bind any context resource specs using the specified shared resource context."],strip_context:[191,4,2,"p-strip_context","Replace any bound context resources and unbound context resource specs by\ndefault context resource specs."],unbind_context:[191,4,2,"p-unbind_context","Convert any bound context resources to context resource specs that fully capture\nthe graph of shared context resources and interdependencies."]},"tensorstore.KvStore.TimestampedStorageGeneration":{__eq__:[194,3,1,"","Compares two timestamped storage generations for equality."],__init__:[195,3,1,"","Constructs from a storage generation and time."],generation:[196,5,1,"","Identifies a specific version of a key-value store entry."],time:[197,5,1,"","Time (seconds since Unix epoch) at which generation is valid."]},"tensorstore.KvStore.__delitem__":{key:[198,4,2,"p-key","Key to delete."]},"tensorstore.KvStore.__getitem__":{key:[199,4,2,"p-key","The key to read."]},"tensorstore.KvStore.__setitem__":{key:[201,4,2,"p-key","Key to write/delete."],value:[201,4,2,"p-value","Value to store, or None to delete."]},"tensorstore.KvStore.delete_range":{range:[203,4,2,"p-range","Key range to delete."]},"tensorstore.KvStore.list":{range:[204,4,2,"p-range","If specified, restricts to the specified key range."],strip_prefix_length:[204,4,2,"p-strip_prefix_length","Strips the specified number of bytes from the start of\nthe returned keys."]},"tensorstore.KvStore.open":{context:[205,4,2,"p-context","Bind any context resource specs using the specified shared resource context."],spec:[205,4,2,"p-spec","Key-value store spec to open."],transaction:[205,4,2,"p-transaction","Transaction to use for read/write operations."]},"tensorstore.KvStore.read":{if_not_equal:[207,4,2,"p-if_not_equal","If specified, the read is aborted if the generation associated\nwith key matches if_not_equal."],key:[207,4,2,"p-key","The key to read."],staleness_bound:[207,4,2,"p-staleness_bound","Specifies a time in (fractional) seconds since the Unix\nepoch."]},"tensorstore.KvStore.spec":{retain_context:[208,4,2,"p-retain_context","Retain all bound context resources (e.g."],unbind_context:[208,4,2,"p-unbind_context","Convert any bound context resources to context resource specs that fully capture\nthe graph of shared context resources and interdependencies."]},"tensorstore.KvStore.write":{if_equal:[212,4,2,"p-if_equal","If specified, indicates a conditional write operation."],key:[212,4,2,"p-key","Key to write/delete."],value:[212,4,2,"p-value","Value to store, or None to delete."]},"tensorstore.OutputIndexMap":{"__init__(constant)":[214,3,1,"","Constructs a constant map."],"__init__(index_array)":[215,3,1,"","Constructs an index array map."],"__init__(input_dimension)":[216,3,1,"","Constructs a single input dimension map."],index_array:[217,5,1,"",""],index_range:[218,5,1,"",""],input_dimension:[219,5,1,"",""],method:[220,5,1,"",""],offset:[221,5,1,"",""],stride:[222,5,1,"",""]},"tensorstore.OutputIndexMaps":{__getitem__:[224,3,1,"",""],__len__:[225,3,1,"","Returns the output rank."],rank:[226,5,1,"","Returns the output rank."]},"tensorstore.OutputIndexMethod":{__init__:[228,3,1,"",""],__str__:[229,3,1,"","name(self: handle) -> str"],array:[230,6,1,"",""],constant:[231,6,1,"",""],name:[232,5,1,"",""],single_input_dimension:[233,6,1,"",""],value:[234,5,1,"",""]},"tensorstore.Promise":{"new":[236,3,1,"","Creates a linked promise and future pair."],set_exception:[237,3,1,"","Marks the linked future as unsuccessfully completed with the specified error."],set_result:[238,3,1,"","Marks the linked future as successfully completed with the specified result."]},"tensorstore.Schema":{"__getitem__(domain)":[242,3,1,"","Transforms the schema using an explicit index domain."],"__getitem__(expr)":[243,3,1,"","Transforms the schema using a dimension expression."],"__getitem__(indices)":[244,3,1,"","Transforms the schema using NumPy-style indexing with default index array semantics."],"__getitem__(transform)":[245,3,1,"","Transforms the schema using an explicit index transform."],"__init__(components)":[246,3,1,"","Constructs from component parts."],"__init__(json)":[247,3,1,"","Constructs from its JSON representation."],T:[240,5,1,"","View with transposed domain (reversed dimension order)."],__eq__:[241,3,1,"","Compares with another Schema for equality based on the JSON representation."],__repr__:[248,3,1,"","Returns a string representation based on the  JSON representation."],chunk_layout:[249,5,1,"","Chunk layout constraints specified by the schema."],codec:[250,5,1,"","Codec constraints specified by the schema."],copy:[251,3,1,"","Returns a copy of the schema."],dimension_units:[252,5,1,"","Physical units of each dimension of the domain."],domain:[253,5,1,"","Domain of the schema, or None if unspecified."],dtype:[254,5,1,"","Data type, or None if unspecified."],fill_value:[255,5,1,"","Fill value specified by the schema."],ndim:[256,5,1,"","Alias for rank."],oindex:[257,3,1,"","Transforms the schema using NumPy-style indexing with outer indexing semantics."],origin:[258,5,1,"","Inclusive lower bound of the domain."],rank:[259,5,1,"","Rank of the schema, or None if unspecified."],shape:[260,5,1,"","Shape of the domain."],size:[261,5,1,"","Total number of elements in the domain."],to_json:[262,3,1,"","Converts to the JSON representation."],update:[263,3,1,"","Adds additional constraints."],vindex:[264,3,1,"","Transforms the schema using NumPy-style indexing with vectorized indexing semantics."]},"tensorstore.Schema.__getitem__(domain)":{domain:[242,4,2,"p-domain","Index domain, must have dimension labels that can be\naligned to self.domain."]},"tensorstore.Schema.__getitem__(transform)":{transform:[245,4,2,"p-transform","Index transform, transform.output_rank must equal\nself.rank."]},"tensorstore.Schema.__init__(components)":{chunk_layout:[246,4,2,"p-chunk_layout","Constrains the chunk layout."],codec:[246,4,2,"p-codec","Constrains the codec."],dimension_units:[246,4,2,"p-dimension_units","Specifies the physical units of each dimension of the domain."],domain:[246,4,2,"p-domain","Constrains the domain of the TensorStore."],dtype:[246,4,2,"p-dtype","Constrains the data type of the TensorStore."],fill_value:[246,4,2,"p-fill_value","Specifies the fill value for positions that have not been written."],rank:[246,4,2,"p-rank","Constrains the rank of the TensorStore."],schema:[246,4,2,"p-schema","Additional schema constraints to merge with existing constraints."],shape:[246,4,2,"p-shape","Constrains the shape and origin of the TensorStore."]},"tensorstore.Schema.update":{chunk_layout:[263,4,2,"p-chunk_layout","Constrains the chunk layout."],codec:[263,4,2,"p-codec","Constrains the codec."],dimension_units:[263,4,2,"p-dimension_units","Specifies the physical units of each dimension of the domain."],domain:[263,4,2,"p-domain","Constrains the domain of the TensorStore."],dtype:[263,4,2,"p-dtype","Constrains the data type of the TensorStore."],fill_value:[263,4,2,"p-fill_value","Specifies the fill value for positions that have not been written."],rank:[263,4,2,"p-rank","Constrains the rank of the TensorStore."],schema:[263,4,2,"p-schema","Additional schema constraints to merge with existing constraints."],shape:[263,4,2,"p-shape","Constrains the shape and origin of the TensorStore."]},"tensorstore.Spec":{"__getitem__(domain)":[268,3,1,"","Transforms the spec using an explicit index domain."],"__getitem__(expr)":[269,3,1,"","Transforms the spec using a dimension expression."],"__getitem__(indices)":[270,3,1,"","Transforms the spec using NumPy-style indexing with default index array semantics."],"__getitem__(transform)":[271,3,1,"","Transforms the spec using an explicit index transform."],T:[266,5,1,"","View with transposed domain (reversed dimension order)."],__eq__:[267,3,1,"","Compares with another Spec for equality based on the JSON representation."],__new__:[272,3,1,"","Constructs from the JSON representation."],__repr__:[273,3,1,"","Returns a string representation based on the JSON representation."],chunk_layout:[274,5,1,"","Effective chunk layout, including any constraints implied\nby driver-specific options."],codec:[275,5,1,"","Effective codec, including any constraints implied\nby driver-specific options."],copy:[276,3,1,"","Returns a copy of the spec."],dimension_units:[277,5,1,"","Effective physical units of each dimension of the domain, including any\nconstraints implied by driver-specific options."],domain:[278,5,1,"","Effective index domain, including any constraints implied\nby driver-specific options."],dtype:[279,5,1,"","Data type, or None if unspecified."],fill_value:[280,5,1,"","Effective fill value, including any constraints implied by driver-specific\noptions."],kvstore:[281,5,1,"","Spec of the associated key-value store used as the underlying storage."],ndim:[282,5,1,"","Alias for rank."],oindex:[283,3,1,"","Transforms the spec using NumPy-style indexing with outer indexing semantics."],origin:[284,5,1,"","Inclusive lower bound of the domain."],rank:[285,5,1,"","Returns the rank of the domain, or None if unspecified."],schema:[286,5,1,"","Effective schema, including any constraints implied by driver-specific options."],shape:[287,5,1,"","Shape of the domain."],size:[288,5,1,"","Total number of elements in the domain."],to_json:[289,3,1,"","Converts to the JSON representation."],transform:[290,5,1,"","The index transform, or None if unspecified."],update:[291,3,1,"","Adds additional constraints or changes the open mode."],vindex:[292,3,1,"","Transforms the spec using NumPy-style indexing with vectorized indexing semantics."]},"tensorstore.Spec.__getitem__(domain)":{domain:[268,4,2,"p-domain","Index domain, must have dimension labels that can be\naligned to self.domain."]},"tensorstore.Spec.__getitem__(transform)":{transform:[271,4,2,"p-transform","Index transform, transform.output_rank must equal\nself.rank."]},"tensorstore.Spec.update":{chunk_layout:[291,4,2,"p-chunk_layout","Constrains the chunk layout."],codec:[291,4,2,"p-codec","Constrains the codec."],context:[291,4,2,"p-context","Bind any context resource specs using the specified shared resource context."],create:[291,4,2,"p-create","Allow creating a new TensorStore."],delete_existing:[291,4,2,"p-delete_existing","Delete any existing data before creating a new array."],dimension_units:[291,4,2,"p-dimension_units","Specifies the physical units of each dimension of the domain."],domain:[291,4,2,"p-domain","Constrains the domain of the TensorStore."],dtype:[291,4,2,"p-dtype","Constrains the data type of the TensorStore."],fill_value:[291,4,2,"p-fill_value","Specifies the fill value for positions that have not been written."],kvstore:[291,4,2,"p-kvstore","Sets the associated key-value store used as the underlying storage."],open:[291,4,2,"p-open","Allow opening an existing TensorStore."],rank:[291,4,2,"p-rank","Constrains the rank of the TensorStore."],schema:[291,4,2,"p-schema","Additional schema constraints to merge with existing constraints."],shape:[291,4,2,"p-shape","Constrains the shape and origin of the TensorStore."],strip_context:[291,4,2,"p-strip_context","Replace any bound context resources and unbound context resource specs by\ndefault context resource specs."],unbind_context:[291,4,2,"p-unbind_context","Convert any bound context resources to context resource specs that fully capture\nthe graph of shared context resources and interdependencies."]},"tensorstore.TensorStore":{"__getitem__(domain)":[296,3,1,"","Computes a virtual view using an explicit index domain."],"__getitem__(expr)":[297,3,1,"","Computes a virtual view using a dimension expression."],"__getitem__(indices)":[298,3,1,"","Computes a virtual view using NumPy-style indexing with default index array semantics."],"__getitem__(transform)":[299,3,1,"","Computes a virtual view using an explicit index transform."],"__setitem__(domain)":[300,3,1,"","Synchronously writes using an explicit index domain."],"__setitem__(expr)":[301,3,1,"","Synchronously writes using a dimension expression."],"__setitem__(indices)":[302,3,1,"","Synchronously writes using NumPy-style indexing with default index array semantics."],"__setitem__(transform)":[303,3,1,"","Synchronously writes using an explicit index transform."],T:[294,5,1,"","View with transposed domain (reversed dimension order)."],__array__:[295,3,1,"","Automatic conversion to numpy.ndarray for interoperability with NumPy."],astype:[304,3,1,"","Returns a read/write view as the specified data type."],chunk_layout:[305,5,1,"","Chunk layout of the TensorStore."],codec:[306,5,1,"","Data codec spec."],dimension_units:[307,5,1,"","Physical units of each dimension of the domain."],domain:[308,5,1,"","Domain of the array."],dtype:[309,5,1,"","Data type of the array."],fill_value:[310,5,1,"","Fill value for positions not yet written."],kvstore:[311,5,1,"","Associated key-value store used as the underlying storage."],mode:[312,5,1,"","Read/write mode."],ndim:[313,5,1,"","Alias for rank."],oindex:[314,3,1,"","Computes a virtual view using NumPy-style indexing with outer indexing semantics."],origin:[316,5,1,"","Inclusive lower bound of the domain."],rank:[317,5,1,"","Number of dimensions in the domain."],read:[318,3,1,"","Reads the data within the current domain."],readable:[319,5,1,"","Indicates if reading is supported."],resolve:[320,3,1,"","Obtains updated bounds, subject to the cache policy."],schema:[321,5,1,"","Schema of this TensorStore."],shape:[322,5,1,"","Shape of the domain."],size:[323,5,1,"","Total number of elements in the domain."],spec:[324,3,1,"","Spec that may be used to re-open or re-create the TensorStore."],transaction:[325,5,1,"","Associated transaction used for read/write operations."],vindex:[326,3,1,"","Computes a virtual view using NumPy-style indexing with vectorized indexing semantics."],with_transaction:[328,3,1,"","Returns a transaction-bound view of this TensorStore."],writable:[329,5,1,"","Indicates if writing is supported."],write:[330,3,1,"","Writes to the current domain."]},"tensorstore.TensorStore.__getitem__(domain)":{domain:[296,4,2,"p-domain","Index domain, must have dimension labels that can be\naligned to self.domain."]},"tensorstore.TensorStore.__getitem__(transform)":{transform:[299,4,2,"p-transform","Index transform, transform.output_rank must equal\nself.rank."]},"tensorstore.TensorStore.__setitem__(domain)":{source:[300,4,2,"p-source","Source array, broadcast-compatible with\nself.domain[transform] and with a data type convertible to\nself.dtype."],transform:[300,4,2,"p-transform","Index transform, transform.output_rank must equal\nself.rank."]},"tensorstore.TensorStore.__setitem__(indices)":{indices:[302,4,2,"p-indices","NumPy-style indexing terms."],source:[302,4,2,"p-source","Source array, broadcast-compatible with\nself[indices].domain and with a data type convertible to\nself.dtype."]},"tensorstore.TensorStore.__setitem__(transform)":{source:[303,4,2,"p-source","Source array, broadcast-compatible with\nself.domain[transform] and with a data type convertible to\nself.dtype."],transform:[303,4,2,"p-transform","Index transform, transform.output_rank must equal\nself.rank."]},"tensorstore.TensorStore.oindex":{__setitem__:[315,3,1,"","Synchronously writes using NumPy-style indexing with outer indexing semantics."]},"tensorstore.TensorStore.oindex.__setitem__":{indices:[315,4,2,"p-indices","NumPy-style indexing terms."],source:[315,4,2,"p-source","Source array, broadcast-compatible with\nself.oindex[indices].domain and with a data type convertible to\nself.dtype."]},"tensorstore.TensorStore.read":{order:[318,4,2,"p-order","Contiguous layout order of the returned array:"]},"tensorstore.TensorStore.spec":{create:[324,4,2,"p-create","Allow creating a new TensorStore."],delete_existing:[324,4,2,"p-delete_existing","Delete any existing data before creating a new array."],minimal_spec:[324,4,2,"p-minimal_spec","Indicates whether to include in the returned Spec the\nmetadata necessary to re-create the TensorStore."],open:[324,4,2,"p-open","Allow opening an existing TensorStore."],retain_context:[324,4,2,"p-retain_context","Retain all bound context resources (e.g."],unbind_context:[324,4,2,"p-unbind_context","Convert any bound context resources to context resource specs that fully capture\nthe graph of shared context resources and interdependencies."]},"tensorstore.TensorStore.vindex":{__setitem__:[327,3,1,"","Synchronously writes using NumPy-style indexing with vectorized indexing semantics."]},"tensorstore.TensorStore.vindex.__setitem__":{indices:[327,4,2,"p-indices","NumPy-style indexing terms."],source:[327,4,2,"p-source","Source array, broadcast-compatible with\nself.vindex[indices].domain and with a data type convertible to\nself.dtype."]},"tensorstore.TensorStore.write":{source:[330,4,2,"p-source","Source array, broadcast-compatible with\nself.domain and with a data type convertible to\nself.dtype."]},"tensorstore.Transaction":{__init__:[332,3,1,"","Creates a new transaction."],abort:[333,3,1,"","Aborts the transaction."],aborted:[334,5,1,"","Indicates whether the transaction has been aborted."],atomic:[335,5,1,"","Indicates whether the transaction is atomic."],commit_async:[336,3,1,"","Asynchronously commits the transaction."],commit_started:[337,5,1,"","Indicates whether the commit of the transaction has already started."],commit_sync:[338,3,1,"","Synchronously commits the transaction."],future:[339,5,1,"","Commit result future."],open:[340,5,1,"","Indicates whether the transaction is still open."]},"tensorstore.Unit":{"__init__(components)":[343,3,1,"","Constructs a unit from a multiplier and base unit."],"__init__(json)":[344,3,1,"","Constructs a unit from its JSON representation."],"__init__(multiplier)":[345,3,1,"","Constructs a dimension-less quantity of the specified value."],"__init__(pair)":[346,3,1,"","Constructs a unit from a multiplier and base unit pair."],"__init__(unit)":[347,3,1,"","Constructs a unit from a string."],__eq__:[342,3,1,"","Compares two units for equality."],__mul__:[348,3,1,"","Multiplies this unit by the specified multiplier."],__truediv__:[349,3,1,"","Divides this unit by the specified divisor."],base_unit:[350,5,1,"","Base unit from which this unit is derived."],multiplier:[351,5,1,"","Multiplier for the base_unit."],to_json:[352,3,1,"","Converts to the JSON representation."]},"tensorstore.VirtualChunkedReadParameters":{if_not_equal:[354,5,1,"","Cached generation, read request can be skipped if no newer data is available."],staleness_bound:[355,5,1,"","Read may be fulfilled with cached data no older than the specified bound."]},"tensorstore.VirtualChunkedWriteParameters":{if_equal:[357,5,1,"","If non-empty, writeback should be conditioned on the existing data matching the specified generation."]},"tensorstore.WriteFutures":{add_done_callback:[359,3,1,"",""],cancel:[360,3,1,"",""],cancelled:[361,3,1,"",""],commit:[362,5,1,"",""],copy:[363,5,1,"",""],done:[364,3,1,"",""],exception:[365,3,1,"",""],remove_done_callback:[366,3,1,"",""],result:[367,3,1,"",""]},"tensorstore.array":{array:[368,4,2,"p-array","Source array."],context:[368,4,2,"p-context","Context to use."],dtype:[368,4,2,"p-dtype","Data type to which array will be converted."]},"tensorstore.d":{__class_getitem__:[375,3,1,"","Constructs from a sequence of dimension indices, ranges, and/or labels."]},"tensorstore.dtype":{"__init__(dtype)":[380,3,1,"","Construct from an existing TensorStore or NumPy data type."],"__init__(name)":[381,3,1,"","Construct by name."],__call__:[379,3,1,"","Construct a scalar instance of this data type"],name:[382,5,1,"",""],numpy_dtype:[383,5,1,"",""],to_json:[384,3,1,"",""],type:[385,5,1,"",""]},"tensorstore.open":{chunk_layout:[396,4,2,"p-chunk_layout","Constrains the chunk layout."],codec:[396,4,2,"p-codec","Constrains the codec."],context:[396,4,2,"p-context","Shared resource context."],create:[396,4,2,"p-create","Allow creating a new TensorStore."],delete_existing:[396,4,2,"p-delete_existing","Delete any existing data before creating a new array."],dimension_units:[396,4,2,"p-dimension_units","Specifies the physical units of each dimension of the domain."],domain:[396,4,2,"p-domain","Constrains the domain of the TensorStore."],dtype:[396,4,2,"p-dtype","Constrains the data type of the TensorStore."],fill_value:[396,4,2,"p-fill_value","Specifies the fill value for positions that have not been written."],kvstore:[396,4,2,"p-kvstore","Sets the associated key-value store used as the underlying storage."],open:[396,4,2,"p-open","Allow opening an existing TensorStore."],rank:[396,4,2,"p-rank","Constrains the rank of the TensorStore."],read:[396,4,2,"p-read","Allow read access."],schema:[396,4,2,"p-schema","Additional schema constraints to merge with existing constraints."],shape:[396,4,2,"p-shape","Constrains the shape and origin of the TensorStore."],spec:[396,4,2,"p-spec","TensorStore Spec to open."],transaction:[396,4,2,"p-transaction","Transaction to use for opening/creating, and for subsequent operations."],write:[396,4,2,"p-write","Allow write access."]},"tensorstore.virtual_chunked":{chunk_layout:[403,4,2,"p-chunk_layout","Constrains the chunk layout."],context:[403,4,2,"p-context","Shared resource context."],dimension_units:[403,4,2,"p-dimension_units","Specifies the physical units of each dimension of the domain."],domain:[403,4,2,"p-domain","Constrains the domain of the TensorStore."],dtype:[403,4,2,"p-dtype","Constrains the data type of the TensorStore."],loop:[403,4,2,"p-loop","Event loop on which to execute read_function and/or\nwrite_function if they are\nasync functions."],rank:[403,4,2,"p-rank","Constrains the rank of the TensorStore."],read_function:[403,4,2,"p-read_function","Callback that handles chunk read requests."],schema:[403,4,2,"p-schema","Additional schema constraints to merge with existing constraints."],shape:[403,4,2,"p-shape","Constrains the shape and origin of the TensorStore."],transaction:[403,4,2,"p-transaction","Transaction to use for opening/creating, and for subsequent operations."],write_function:[403,4,2,"p-write_function","Callback that handles chunk write requests."]},ChunkLayout:{chunk:[406,1,2,"json-ChunkLayout.chunk","Combined constraints on write/read/codec chunks."],codec_chunk:[406,1,2,"json-ChunkLayout.codec_chunk","Constraints on the chunk grid used by the codec, if applicable."],grid_origin:[406,1,2,"json-ChunkLayout.grid_origin","Specifies hard constraints on the origin of the chunk grid."],grid_origin_soft_constraint:[406,1,2,"json-ChunkLayout.grid_origin_soft_constraint","Specifies preferred values for the origin of the chunk grid rather than\nhard constraints."],inner_order:[406,1,2,"json-ChunkLayout.inner_order","Permutation specifying the element storage order within the innermost\nchunks."],inner_order_soft_constraint:[406,1,2,"json-ChunkLayout.inner_order_soft_constraint","Specifies a preferred value for inner_order rather than a\nhard constraint.  If inner_order is also specified, it\ntakes precedence."],read_chunk:[406,1,2,"json-ChunkLayout.read_chunk","Constraints on the chunk grid over which reads may be efficiently\npartitioned."],write_chunk:[406,1,2,"json-ChunkLayout.write_chunk","Constraints on the chunk grid over which writes may be efficiently\npartitioned."]},Codec:{driver:[406,1,2,"json-Codec.driver","Driver identifier"]},Context:{"&lt;resource-type&gt;":[0,1,2,"json-Context.<resource-type>",null],"&lt;resource-type&gt;#&lt;id&gt;":[0,1,2,"json-Context.<resource-type>#<id>",null],cache_pool:[0,0,1,"json-Context.cache_pool",""],data_copy_concurrency:[0,0,1,"json-Context.data_copy_concurrency",""],file_io_concurrency:[0,0,1,"json-Context.file_io_concurrency",""],gcs_request_concurrency:[17,0,1,"json-Context.gcs_request_concurrency",""],gcs_request_retries:[17,0,1,"json-Context.gcs_request_retries",""],gcs_user_project:[17,0,1,"json-Context.gcs_user_project",""],memory_key_value_store:[19,0,1,"json-Context.memory_key_value_store",""]},DownsampleMethod:{max:[3,1,2,"json-DownsampleMethod.max",""],mean:[3,1,2,"json-DownsampleMethod.mean",""],median:[3,1,2,"json-DownsampleMethod.median",""],min:[3,1,2,"json-DownsampleMethod.min",""],mode:[3,1,2,"json-DownsampleMethod.mode",""],stride:[3,1,2,"json-DownsampleMethod.stride",""]},IndexDomain:{exclusive_max:[14,1,2,"json-IndexDomain.exclusive_max","Exclusive upper bounds of the domain."],inclusive_max:[14,1,2,"json-IndexDomain.inclusive_max","Inclusive upper bounds of the domain."],inclusive_min:[14,1,2,"json-IndexDomain.inclusive_min","Inclusive lower bounds of the domain."],labels:[14,1,2,"json-IndexDomain.labels","Dimension labels for each dimension."],rank:[14,1,2,"json-IndexDomain.rank","Number of dimensions."],shape:[14,1,2,"json-IndexDomain.shape","Extent of each dimension of the domain."]},IndexTransform:{input_exclusive_max:[14,1,2,"json-IndexTransform.input_exclusive_max","Exclusive upper bounds of the input domain."],input_inclusive_max:[14,1,2,"json-IndexTransform.input_inclusive_max","Inclusive upper bounds of the input domain."],input_inclusive_min:[14,1,2,"json-IndexTransform.input_inclusive_min","Inclusive lower bounds of the input domain."],input_labels:[14,1,2,"json-IndexTransform.input_labels","Dimension labels for each input domain dimension."],input_rank:[14,1,2,"json-IndexTransform.input_rank","Number of input dimensions."],input_shape:[14,1,2,"json-IndexTransform.input_shape","Extent of each dimension of the input domain."],output:[14,1,2,"json-IndexTransform.output","Specifies the output index map for each output dimension."]},KeyValueStoreBackedChunkDriver:{cache_pool:[6,1,2,"json-KeyValueStoreBackedChunkDriver.cache_pool",""],context:[6,1,2,"json-KeyValueStoreBackedChunkDriver.context","Specifies context resources that augment/override the parent context."],create:[6,1,2,"json-KeyValueStoreBackedChunkDriver.create",""],data_copy_concurrency:[6,1,2,"json-KeyValueStoreBackedChunkDriver.data_copy_concurrency",""],delete_existing:[6,1,2,"json-KeyValueStoreBackedChunkDriver.delete_existing",""],driver:[6,1,2,"json-KeyValueStoreBackedChunkDriver.driver","Driver identifier"],dtype:[6,1,2,"json-KeyValueStoreBackedChunkDriver.dtype","Specifies the data type."],kvstore:[6,1,2,"json-KeyValueStoreBackedChunkDriver.kvstore",""],open:[6,1,2,"json-KeyValueStoreBackedChunkDriver.open",""],path:[6,1,2,"json-KeyValueStoreBackedChunkDriver.path","Additional path within the KvStore specified by\nkvstore."],rank:[6,1,2,"json-KeyValueStoreBackedChunkDriver.rank","Specifies the rank of the TensorStore."],recheck_cached_data:[6,1,2,"json-KeyValueStoreBackedChunkDriver.recheck_cached_data",""],recheck_cached_metadata:[6,1,2,"json-KeyValueStoreBackedChunkDriver.recheck_cached_metadata",""],schema:[6,1,2,"json-KeyValueStoreBackedChunkDriver.schema","Specifies constraints on the schema."],transform:[6,1,2,"json-KeyValueStoreBackedChunkDriver.transform","Specifies a transform."]},KvStore:{context:[18,1,2,"json-KvStore.context",""],driver:[18,1,2,"json-KvStore.driver","Key-value store driver identifier"],path:[18,1,2,"json-KvStore.path","Key prefix within the key-value store."]},OutputIndexMap:{index_array:[14,1,2,"json-OutputIndexMap.index_array","If present, indicates that this output dimension uses an index\narray map, with the index array specified as a nested list of rank\nequal to the input_rank."],index_array_bounds:[14,1,2,"json-OutputIndexMap.index_array_bounds",""],input_dimension:[14,1,2,"json-OutputIndexMap.input_dimension","If present, indicates that this output dimension uses a single\ninput dimension map with the specified input dimension.  Must not\nbe specified in conjunction with index_array."],offset:[14,1,2,"json-OutputIndexMap.offset","Specifies an offset for this output dimension.  If neither\ninput_dimension nor index_array is\nspecified, this specifies the constant value to which this output\ndimension maps."],stride:[14,1,2,"json-OutputIndexMap.stride","Multiplier for the input index specified by\ninput_dimension or the index array value specified by\nindex_array."]},Schema:{chunk_layout:[406,1,2,"json-Schema.chunk_layout","Data storage layout constraints."],codec:[406,1,2,"json-Schema.codec",""],dimension_units:[406,1,2,"json-Schema.dimension_units","Physical units of each dimension."],domain:[406,1,2,"json-Schema.domain","Domain of the TensorStore, including bounds and optional dimension labels."],dtype:[406,1,2,"json-Schema.dtype","Specifies the data type of the TensorStore."],fill_value:[406,1,2,"json-Schema.fill_value","Fill value to use for missing data."],rank:[406,1,2,"json-Schema.rank","Number of dimensions."]},TensorStore:{context:[407,1,2,"json-TensorStore.context","Specifies context resources that augment/override the parent context."],driver:[407,1,2,"json-TensorStore.driver","Driver identifier"],dtype:[407,1,2,"json-TensorStore.dtype","Specifies the data type."],rank:[407,1,2,"json-TensorStore.rank","Specifies the rank of the TensorStore."],schema:[407,1,2,"json-TensorStore.schema","Specifies constraints on the schema."],transform:[407,1,2,"json-TensorStore.transform","Specifies a transform."]},dtype:{"byte":[407,1,2,"json-dtype.byte","Single byte."],"char":[407,1,2,"json-dtype.char","Single byte, interpreted as an ASCII character."],bfloat16:[407,1,2,"json-dtype.bfloat16","bfloat16 floating-point format number."],bool:[407,1,2,"json-dtype.bool","Boolean value (0 or 1)."],complex128:[407,1,2,"json-dtype.complex128","Complex number, where the real and imaginary components are each\nrepresented by a float64."],complex64:[407,1,2,"json-dtype.complex64","Complex number, where the real and imaginary components are each\nrepresented by a float32."],float16:[407,1,2,"json-dtype.float16","IEEE 754 binary16\nhalf-precision floating-point number."],float32:[407,1,2,"json-dtype.float32","IEEE 754 binary32\nsingle-precision floating-point number."],float64:[407,1,2,"json-dtype.float64","IEEE 754 binary64\ndouble-precision floating-point number."],int16:[407,1,2,"json-dtype.int16","16-bit signed two's-complement integer."],int32:[407,1,2,"json-dtype.int32","32-bit signed two's-complement integer."],int64:[407,1,2,"json-dtype.int64","64-bit signed two's-complement integer."],int8:[407,1,2,"json-dtype.int8","8-bit signed two's-complement integer."],json:[407,1,2,"json-dtype.json","JSON value."],string:[407,1,2,"json-dtype.string","Byte string."],uint16:[407,1,2,"json-dtype.uint16","16-bit unsigned integer."],uint32:[407,1,2,"json-dtype.uint32","32-bit unsigned integer."],uint64:[407,1,2,"json-dtype.uint64","64-bit unsigned integer."],uint8:[407,1,2,"json-dtype.uint8","8-bit unsigned integer."],ustring:[407,1,2,"json-dtype.ustring","Unicode string (represented in memory as UTF-8)."]},tensorstore:{"downsample(spec)":[376,7,1,"","Returns a virtual downsampled view view of a Spec."],"downsample(store)":[377,7,1,"","Returns a virtual downsampled view of a TensorStore."],ChunkLayout:[21,2,1,"","Describes the storage layout of a tensorstore.TensorStore."],CodecSpec:[52,2,1,"","Specifies driver-specific encoding/decoding parameters."],Context:[55,2,1,"","Manages shared TensorStore context resources, such as caches and credentials."],Dim:[67,2,1,"","1-d index interval with optionally-implicit bounds and dimension label."],DimExpression:[91,2,1,"","Specifies an advanced indexing operation."],Future:[102,2,1,"","Handle for consuming the result of an asynchronous operation."],FutureLike:[112,2,1,"","Abstract base class for types representing an asynchronous result."],IndexDomain:[113,2,1,"","Domain (including bounds and optional dimension labels) of an N-dimensional index space."],IndexTransform:[139,2,1,"","Represents a transform from an input index space to an output space."],Indexable:[169,2,1,"","Abstract base class for types that support TensorStore indexing operations."],KvStore:[170,2,1,"","Key-value store that maps an ordered set of byte string keys to byte string values."],OutputIndexMap:[213,2,1,"","Represents an output index map for an index transform."],OutputIndexMaps:[223,2,1,"","View of the output index maps for an index transform."],OutputIndexMethod:[227,2,1,"","Indicates the output index method of an OutputIndexMap."],Promise:[235,2,1,"","Handle for producing the result of an asynchronous operation."],Schema:[239,2,1,"","Driver-independent options for defining a TensorStore schema."],Spec:[265,2,1,"","Specification for opening or creating a TensorStore."],TensorStore:[293,2,1,"","Asynchronous multi-dimensional array handle."],Transaction:[331,2,1,"","Transactions are used to stage a group of modifications (e.g. writes to\ntensorstore.TensorStore objects) in memory, and then either commit the\ngroup all at once or abort it."],Unit:[341,2,1,"","Specifies a physical quantity/unit."],VirtualChunkedReadParameters:[353,2,1,"","Options passed to read callbacks used with virtual_chunked."],VirtualChunkedWriteParameters:[356,2,1,"","Options passed to write callbacks used with virtual_chunked."],WriteFutures:[358,2,1,"","Handle for consuming the result of an asynchronous write operation."],array:[368,7,1,"","Returns a TensorStore that reads/writes from an in-memory array."],bfloat16:[369,8,1,"","bfloat16 floating-point data type."],bool:[370,8,1,"","Boolean data type (0 or 1).  Corresponds to the python:bool type and numpy.bool_."],cast:[371,7,1,"","Returns a read/write view as the specified data type."],complex128:[372,8,1,"","Complex number based on float64.  Corresponds to numpy.complex128."],complex64:[373,8,1,"","Complex number based on float32.  Corresponds to numpy.complex64."],d:[374,2,1,"","Specifies a dimension selection, for starting a dimension expression."],dtype:[378,2,1,"","TensorStore data type representation."],float16:[386,8,1,"","IEEE 754 binary16 half-precision floating-point data type.  Correspond to numpy.float16."],float32:[387,8,1,"","IEEE 754 binary32 single-precision floating-point data type.  Corresponds to numpy.float32."],float64:[388,8,1,"","IEEE 754 binary64 double-precision floating-point data type.  Corresponds to numpy.float64."],inf:[389,8,1,"","Special constant equal to 2^{62}-1 that indicates an unbounded index domain."],int16:[390,8,1,"","16-bit signed two's-complement integer data type.  Corresponds to numpy.int16."],int32:[391,8,1,"","32-bit signed two's-complement integer data type.  Corresponds to numpy.int32."],int64:[392,8,1,"","32-bit signed two's-complement integer data type.  Corresponds to numpy.int64."],int8:[393,8,1,"","8-bit signed two's-complement integer data type.  Corresponds to numpy.int8."],json:[394,8,1,"","JSON data type.  Corresponds to an arbitrary Python JSON value."],newaxis:[395,8,1,"","Alias for None used in indexing expressions to specify a new singleton dimension."],open:[396,7,1,"","Opens or creates a TensorStore from a Spec."],string:[397,8,1,"","Variable-length byte string data type.  Corresponds to the Python python:bytes type."],uint16:[398,8,1,"","16-bit unsigned integer.  Corresponds to numpy.uint16."],uint32:[399,8,1,"","32-bit unsigned integer.  Corresponds to numpy.uint32."],uint64:[400,8,1,"","64-bit unsigned integer data type.  Corresponds to numpy.uint64."],uint8:[401,8,1,"","8-bit unsigned integer.  Corresponds to numpy.uint8."],ustring:[402,8,1,"","Variable-length Unicode string data type.  Corresponds to the Python python:str type."],virtual_chunked:[403,7,1,"","Creates a TensorStore where the content is read/written chunk-wise by an arbitrary function."]}},objnames:{"0":["json","schema","JSON type"],"1":["json","subschema","JSON member"],"2":["py","class","Python class"],"3":["py","method","Python method"],"4":["py","parameter","Python parameter"],"5":["py","property","Python property"],"6":["py","attribute","Python attribute"],"7":["py","function","Python function"],"8":["py","data","Python data"],"9":["std","envvar","environment variable"]},objtypes:{"0":"json:schema","1":"json:subschema","2":"py:class","3":"py:method","4":"py:parameter","5":"py:property","6":"py:attribute","7":"py:function","8":"py:data","9":"std:envvar"},terms:{"0":[0,1,2,3,4,5,6,7,8,9,10,11,14,15,20,37,42,44,45,48,49,73,77,83,87,92,93,94,95,96,97,98,99,100,101,102,114,115,116,117,118,119,120,125,130,141,142,143,144,145,146,147,148,150,161,167,168,204,213,214,215,216,227,231,242,243,244,245,246,247,249,253,257,259,262,264,268,269,270,271,278,283,286,289,290,291,292,293,296,297,298,299,300,301,302,303,304,305,306,308,314,315,318,321,324,326,327,330,331,352,370,371,375,395,396,403,404,405,406,407],"03":15,"0x":405,"0x8":[396,405],"1":[0,1,3,8,9,10,11,14,15,17,20,37,42,44,45,48,49,67,68,69,75,80,81,83,84,85,86,87,88,92,93,94,95,96,97,98,99,100,101,102,114,115,116,117,118,124,125,128,129,130,131,132,134,136,137,140,141,142,143,144,145,146,147,148,153,154,155,156,157,161,164,167,168,215,216,227,233,240,242,243,244,245,246,247,249,252,257,259,262,264,266,270,271,277,286,289,290,293,294,296,297,298,299,301,302,303,304,305,306,307,313,314,315,317,321,324,326,327,330,331,341,345,347,370,371,375,389,395,396,403,404,405,406,407],"10":[11,14,15,16,65,66,67,68,69,70,71,72,73,78,80,81,82,86,87,92,97,98,99,114,121,130,142,167,243,244,257,264,269,270,283,292,293,295,297,298,300,301,302,314,315,318,326,327,330,396,404],"100":[4,8,9,11,14,47,48,51,122,133,135,242,243,244,245,253,257,264,274,282,285,286,289,290,291,306,307,310,311,321,403,405],"1000":[8,9,11,242,243,244,245,257,264,278,286,293,305,396,405],"10000":9,"1000000":48,"10000000":[0,57,61,65,66,396],"100000000":[0,403,405],"1000000000":9,"100_000_000":405,"100kb":8,"100mb":[403,405],"100x100x1":405,"101":403,"102":[8,11,305,396,403,405],"1020":9,"103":403,"104":403,"1049":293,"105":[47,51,289,290,403],"106":403,"11":[11,15,72,80,92,115,148,215,216,404],"1113":9,"1132030694":405,"1161117856":405,"1194100437":405,"12":[11,14,92,97,98,115,318,404],"1264":9,"128":[8,11],"13":[11,15,98,115,167,216],"14":[11,15,99,118],"1408314276":405,"1414":396,"15":[9,73,99,396,404,405],"15000":405,"15100":405,"159":[8,9,11],"16":[15,20,98,390,398,407],"17":[15,97,121,148],"18":98,"1nm":[9,406],"2":[1,3,7,8,9,10,11,14,15,20,44,45,48,67,75,92,93,94,95,96,97,98,99,100,101,102,114,115,116,117,118,119,124,125,126,127,128,129,130,131,132,134,136,137,141,142,143,144,146,147,148,151,152,153,154,155,156,157,161,167,168,215,216,227,230,242,243,244,245,246,247,249,251,257,259,262,264,271,282,285,286,290,293,298,299,301,302,303,304,305,313,314,315,317,324,326,327,330,331,348,349,371,375,389,395,396,403,404,405,406],"20":[9,14,82,92,97,98,99,244,257,264,270,283,292,295,298,314,326],"200":[8,9,11,47,48,51,122,133,135,242,243,244,245,253,257,264,274,277,282,285,286,289,290,291,307,311],"2000":[8,9,11,242,243,244,245,257,264,278,286,305,396],"20000":[293,405],"2000000":[8,9,11],"2019":15,"2030":9,"2048":9,"206":[47,51],"207":[47,51],"21":[15,404],"23":98,"25":99,"28":98,"29":15,"3":[1,3,4,5,8,9,10,11,14,15,44,45,67,75,83,88,90,92,93,94,95,96,97,98,99,100,101,102,103,114,115,116,117,118,119,122,124,125,126,127,128,129,130,131,132,133,134,135,136,137,142,143,144,145,146,147,148,150,151,152,153,154,155,156,157,158,159,160,161,164,167,168,215,241,242,243,244,245,246,247,251,252,254,256,257,259,262,263,264,270,271,283,286,292,298,299,301,303,304,313,314,317,326,327,331,342,343,344,345,346,348,349,350,351,352,371,375,395,403,404,405],"30":[9,92,308],"300":[8,9,11,47,51,122,133,135,242,243,244,245,253,257,264,274,277,286,291],"3000":[8,9,11,242,243,244,245,257,264,278,286,305,396],"300000":347,"30037":15,"3040":9,"307":[47,51],"32":[1,2,3,6,8,9,10,11,14,17,20,391,392,399,406,407],"34432":[9,396,405],"34452":9,"357":404,"37":15,"39552":[9,396,405],"39582":9,"3e5":347,"3nm":[252,342,352],"4":[0,1,3,8,9,10,11,14,68,75,81,86,92,95,97,98,99,100,101,114,116,117,118,124,125,126,127,128,129,130,131,132,134,136,137,142,146,147,148,150,151,152,153,154,155,156,157,158,159,160,164,167,245,252,271,299,302,303,313,317,327,331,347,371,403,404,405,406],"40":[8,9],"40000":9,"40nm":9,"41408":[396,405],"42":[7,11,103,241,255,280,293,300,310,321,330,331,396,403],"43":331,"44":331,"4443":17,"45":331,"46":15,"4611686018427387903":[20,86,87,389],"4611686018427387904":[80,81],"486000":406,"4_4_40":9,"4nm":[9,252,347,406],"5":[1,8,10,11,14,15,47,51,68,69,70,71,72,73,75,77,78,80,81,82,83,84,85,86,87,88,90,92,95,96,97,98,99,100,101,114,115,116,117,118,119,120,124,125,126,127,128,129,130,131,132,134,136,137,142,143,145,147,148,150,151,152,153,154,155,156,157,158,159,160,164,214,215,216,235,237,238,242,243,244,245,248,257,264,268,269,270,271,283,289,290,292,293,295,296,297,298,299,300,301,302,303,306,307,313,314,315,317,318,321,324,326,327,330,331,343,344,345,346,349,351,371,395,396,403,404,405,406],"50":[308,403],"500":[8,9,11],"50000":9,"5000000":[63,65,66],"512":9,"51508":9,"51548":9,"5813054053":405,"5e":406,"5nm":[307,348,350,351],"6":[1,3,8,9,10,11,14,15,47,51,69,75,92,95,96,97,98,99,101,114,115,116,117,118,120,124,125,126,127,130,131,142,144,147,151,152,153,161,168,242,243,244,268,269,270,293,296,297,298,299,300,301,302,303,313,315,317,327,330,331,396,403,404,405,406],"60":[137,268,269,296,297,300,301,326,406],"62":[14,20,67,389],"62662f87cdd9":15,"632":9,"64":[8,9,11,14,20,396,400,405,407],"6901":7,"7":[14,15,47,51,90,92,97,114,115,118,121,128,130,142,144,146,147,148,154,161,167,168,215,216,257,264,283,292,314,326,348,404],"70":[268,269,270,271,283,292,295,296,297,298,299,300,301,302,303,308,309,314,315,318,324,326,327,330],"707":396,"75":[4,9],"754":[20,386,387,388,407],"77":17,"79":[8,9,11],"7nm":349,"8":[0,9,10,14,15,20,92,96,97,98,114,115,118,121,124,130,142,144,145,146,148,153,161,167,168,242,257,264,268,283,292,293,296,300,302,307,314,315,318,326,327,330,393,396,401,404,405,407],"80":[15,268,269,270,271,283,292,295,296,297,298,299,300,301,302,303,308,309,314,315,318,324,326,327,330,405],"81":9,"82":405,"83":405,"8_8_8":9,"8nm":307,"9":[3,8,9,11,14,15,70,92,114,118,130,142,216,242,243,268,269,296,297,300,301,302,396,404,405,406],"90":406,"9223372036854775807":90,"9223372036854775808":406,"99":405,"9m":406,"abstract":[13,20,112,139,169],"boolean":[6,8,9,11,19,20,95,161,257,283,314,315,370,407],"break":11,"byte":[0,8,11,20,170,171,178,182,193,196,199,204,353,354,356,357,397,407],"case":[3,11,12,14,15,17,96,97,98,99,114,130,139,142,173,176,207,299,404,406],"char":407,"class":[20,22,52,56,58,67,91,102,112,113,120,139,169,171,178,183,193,213,223,227,235,239,265,293,331,341,353,356,358,374,378,404],"default":[0,4,5,6,7,8,9,11,12,14,15,17,55,60,62,63,64,71,72,73,91,92,103,119,139,144,146,170,191,205,208,239,244,265,270,291,293,298,302,324,374,396,403,404,406],"do":[1,2,3,4,5,6,7,8,9,11,14,404,407],"export":15,"final":[9,37,49],"float":[20,22,24,26,27,35,37,49,102,108,111,193,195,197,207,341,343,345,346,348,349,351,353,355,358,365,367,369,386,387,388,403,406,407],"function":[3,9,14,20,113,403,405],"import":405,"int":[20,21,22,24,28,29,30,31,32,33,35,37,40,41,42,43,44,45,49,67,69,71,72,73,76,80,81,86,87,90,91,96,97,98,99,102,110,113,116,119,122,124,128,129,133,134,135,136,137,139,141,146,153,154,155,157,158,159,160,162,164,165,166,204,213,214,215,216,219,221,222,223,224,225,226,227,228,234,239,246,256,258,259,260,261,263,265,282,284,285,287,288,291,293,313,316,317,322,323,358,366,374,376,377,389,396,403,404],"long":10,"new":[0,1,2,3,4,5,6,7,13,14,20,63,64,92,93,94,96,97,98,99,106,113,117,118,170,191,208,212,235,236,237,238,242,243,244,245,246,249,252,257,263,264,268,269,270,271,283,291,292,306,321,324,331,332,395,403,404,405,406,407],"null":[0,9,11,397,402,406],"public":[17,405],"return":[3,6,7,8,9,11,14,20,56,57,58,60,61,62,63,64,67,77,78,79,92,94,95,96,97,98,99,100,101,102,103,108,111,113,116,117,118,122,123,138,139,141,149,167,170,171,174,183,184,186,187,188,199,200,202,203,204,207,211,212,223,225,226,239,242,243,244,245,248,249,251,257,264,265,268,269,270,271,273,276,283,285,292,293,295,296,297,298,299,304,311,312,318,324,328,330,336,338,368,371,376,377,396,403,406],"static":[170,205,235,236],"transient":[17,19],"true":[6,7,8,9,11,19,62,67,68,69,70,71,72,73,74,77,79,82,84,85,92,106,126,127,151,152,175,190,191,208,235,237,238,291,293,295,296,297,298,299,300,301,302,303,305,306,307,308,309,310,311,314,315,318,321,324,326,327,330,331,342,396,404,405],"while":[3,8,9,11,14,15,37,42,49,198,201,295,341,397,402,403,404,405,406],A:[0,8,9,11,16,92,100,207,235,246,252,263,291,307,318,341,374,396,403,404,406],As:[8,11,14,92,116,173,176,369,404],At:[14,119,146,404],By:[11,14,15,170,205,324,396,403],For:[3,7,8,9,10,11,13,14,15,17,47,51,96,115,139,295,330,358,403,406],If:[0,1,2,3,4,5,6,7,8,9,10,11,12,14,15,17,18,19,37,42,43,47,49,51,75,80,81,86,87,90,93,94,96,97,98,99,100,102,103,105,108,111,114,117,119,130,142,146,147,191,198,199,201,203,204,207,212,242,243,244,245,246,257,263,264,268,269,270,271,283,291,292,311,324,330,331,347,356,357,396,403,404,406,407],In:[3,11,12,14,17,18,19,70,130,173,177,299,331,341,358,404,405,406],It:[3,4,5,6,7,8,9,11,14,15,19,92,114,142,291,341,396,404,406],No:[8,11],On:[11,12,15,17,114,142],One:[0,3,6,8,11,407],The:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,37,47,49,51,61,67,83,88,93,94,96,97,98,99,102,108,111,112,113,114,125,130,131,139,142,145,147,170,184,191,198,199,201,203,207,208,211,212,241,242,246,252,263,265,267,268,290,291,296,307,308,310,324,328,330,331,340,341,358,396,397,402,403,404,406,407],There:[15,394,397,402,405,407],To:[3,6,8,9,11,13,15,17,62,184,205,291,298,324,396,403,404],With:[6,7,8,9,11],_:9,__add__:[183,184],__array__:[293,295,318],__call__:[139,141,378,379],__contains__:[67,68,69],__delitem__:[170,198,199,201,207,212],__eq__:[21,22,23,36,67,70,171,172,193,194,239,241,265,267,341,342],__getitem__:[55,61,91,92,95,101,113,114,115,116,117,118,139,142,143,144,145,161,168,170,198,199,201,207,223,224,239,242,243,244,245,257,264,265,268,269,270,271,283,292,293,296,297,298,299,301,314,326,374],__index__:404,__iter__:[67,75],__len__:[67,76,113,122,223,225],__mul__:[341,348],__repr__:[67,77,113,123,139,149,170,183,186,200,239,248,265,273],__setitem__:[170,198,199,201,207,212,293,300,301,302,303,315,327],__str__:[67,78,227,229],__truediv__:[183,184,187,341,349],_arrai:14,_bit:9,_dimens:14,_origin:14,_rank:14,_shape:14,a1:14,a2:14,aa:203,abc:[16,184,187,188,190,191,202,205,208,281,311],abort:[20,207,331,333,334,336,338,339,340],abov:[14,80,86,90,92,404],abstracteventloop:[103,403],access:[7,8,9,11,13,14,16,17,18,42,43,249,358,396,404,405],accomplish:330,accord:[8,9,11,14,15,114,142,170,171,173,177],account:[17,47,51,70,406],achiev:[8,11],acid:13,acknowledg:330,actual:[130,170,198,201,203,212,246,263,291,298,330,396,404,406],ad:[15,93,94,95,96,97,98,99,100,101,168,264,292,326,327],adapt:1,add:[15,21,22,35,49,92,239,263,265,291,404],add_done_callback:[102,104,109,358,359],addit:[3,6,7,8,9,11,12,14,15,17,18,21,22,35,49,70,91,92,183,187,239,246,263,265,291,331,340,341,358,396,403,404,406],addition:[14,15,67,191,205,252,291,331,403,404],address:12,advanc:[13,20,91,404],advantag:[13,330],advis:9,affect:[15,91,97,98,99,115,118,249,330,374,403,406],after:[6,7,8,9,11,15,207,246,263,291,330,347,358,396,403,404,406],ag:207,against:406,alia:[20,21,22,30,44,113,129,133,139,151,152,153,154,155,156,157,159,160,239,256,265,282,293,313,395],align:[15,114,142,242,268,296,300,327,330,406],all:[0,3,6,8,9,10,11,12,13,14,18,19,20,37,47,49,51,92,96,97,98,99,100,119,139,146,204,208,246,263,291,299,318,324,330,331,396,403,404,406,407],all_proxi:12,allow:[0,10,11,14,15,16,17,92,291,302,303,324,330,331,396,406],allus:17,along:[9,246,252,263,291,307,396,403,406],alreadi:[6,8,9,11,14,15,105,191,205,246,263,291,331,333,336,337,396,403],also:[1,2,3,6,8,9,10,11,13,14,15,16,37,49,67,70,91,92,96,97,98,99,170,205,246,263,291,302,311,330,331,358,369,396,403,404,405,406,407],altern:[12,330,404],alwai:[3,6,7,8,9,11,92,96,300,301,302,303,315,327,404,406],among:3,amount:[91,96,204,374],amplif:406,an:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,17,20,47,51,67,74,89,91,92,93,96,97,98,102,103,105,112,113,114,115,118,119,120,121,130,139,141,142,146,147,148,170,173,176,177,183,187,196,198,199,201,204,205,207,212,213,215,223,227,235,239,242,245,246,252,263,265,268,271,291,293,295,296,299,300,302,303,315,324,327,330,331,338,341,358,368,369,374,378,380,389,394,403,404,405,406,407],analog:13,ancestor:7,ani:[1,2,3,4,5,6,7,8,9,10,11,12,14,17,20,21,22,25,34,37,38,47,48,49,51,52,53,54,55,56,57,58,59,60,63,92,95,99,101,102,108,113,114,117,121,130,138,139,142,148,161,167,168,170,183,184,185,190,191,198,199,201,203,205,207,208,212,235,236,239,247,257,262,264,265,267,272,274,275,277,278,280,283,286,289,291,292,298,300,302,303,308,314,315,318,324,326,327,330,331,340,341,344,352,396,403,404,405,406,407],anoth:[0,67,68,70,83,88,113,114,125,131,139,142,145,171,172,239,241,265,267,403,404],api:[1,12,13,17],append:[183,184,198,199,201,207,212],appl:15,appli:[0,1,2,3,6,7,8,9,10,11,12,14,17,37,49,91,92,95,101,113,115,139,143,144,161,168,244,257,264,270,283,292,297,308,314,315,374,404,406,407],applic:[15,17,306,310,403,406],application_default_credenti:17,appropri:[17,403],aqacaamabaafaayaaaagqqaameeaaebbaabqqqaaye:11,ar:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,17,20,24,35,37,47,49,51,60,70,92,93,95,100,101,113,114,115,118,142,161,168,169,170,204,205,207,246,252,257,263,264,267,273,274,275,277,278,280,283,286,291,292,302,314,315,326,327,330,331,341,369,396,397,402,403,404,406,407],arbitrari:[8,14,20,394,403,404],archiv:15,aren:15,arg0:[223,224,378,379],arg:404,argument:404,arithmet:3,arr:130,arrai:[2,3,4,5,6,7,10,13,14,18,20,91,95,101,102,115,118,130,139,144,146,148,161,168,213,215,227,230,239,244,255,257,264,265,270,273,280,283,291,292,293,295,298,299,300,301,302,303,304,308,309,310,313,314,315,317,318,324,326,327,330,331,368,369,371,374,396,403,405,406,407],arrang:330,array_lik:[20,92,213,215,217,239,246,255,263,265,280,291,293,295,300,301,302,303,310,315,318,327,330,368,396,403,404],ascii:407,aspect:[22,24,26,27,35,37,49,406],aspect_ratio:[8,9,11,22,24,26,35,37,49,406],aspect_ratio_soft_constraint:[22,24,27,35,37,49,406],assert:[65,103,241,267,389],assign:[8,9,14,300,301,302,303,315,327,403,404,405],associ:[67,103,178,180,182,199,207,212,265,281,291,293,311,325,336,396],assum:[6,7,8,9,11,14,406],astyp:[293,304],async:[103,331,403,405],asynchron:[13,102,103,104,105,106,107,108,109,111,112,235,293,300,301,302,303,315,318,327,330,331,336,358,405],asyncio:[102,103,105,330,403,405],atom:[7,13,19,331,332,335,403],attempt:[7,17,403,404],attribut:[7,8,404],augment:[1,2,3,4,5,6,7,8,9,10,11,16,17,18,19,407],auth:17,authent:[0,12],author:[12,17],automat:[1,2,3,4,5,6,7,8,9,11,13,14,15,17,109,293,295,331,396,406,407],avail:[0,12,15,353,354,369],averag:3,avoid:[9,11,103,114,142,404],await:[102,103,170,200,202,203,205,206,207,208,210,211,212,293,295,296,297,298,299,305,306,307,308,309,310,311,314,318,321,324,326,330,331,371,396,403,404,405],awar:[11,404],ax:[8,290,296,297],b1:11,b:[7,15,70,100,114,142,145,170,175,179,188,196,198,199,201,202,203,204,205,207,211,212,241,251,267,276,404],back:[1,4,5,8,9,10,11,13,16,18,331,405],backward:[6,7,8,9,11,91,97,374],bandwidth:13,base:[1,2,3,4,5,6,7,8,9,11,14,16,17,20,112,169,170,183,186,189,200,206,239,241,248,265,267,273,304,341,343,346,350,371,372,373,376,377,404,406,407],base_unit:[341,343,345,347,350,351,406],basic:404,bazel:15,bazel_cach:15,bazel_tool:15,bazelisk:15,bazelisk_hom:15,bazelrc:15,bdist_wheel:15,bear:9,becaus:[7,9,330,403,404],becom:[108,111,203,330,339],been:[11,14,102,106,107,246,263,281,291,308,330,331,333,334,336,339,340,396,403],befor:[6,8,9,11,207,291,324,396],begin:[92,102,109,404],behav:115,behavior:[12,14,15,19,92,114,142,207,318,330,404],being:[6,7,8,9,11,15,207,331,403],below:[14,81,87,90],best:[8,9,11],better:[295,403],between:[14,396,403],bfloat16:[11,20,369,407],big:[8,11,407],bill:17,binari:15,binary16:[20,386,407],binary32:[20,387,407],binary64:[20,388,407],bind:[15,191,205,208,291,324,403],bit:[8,9,11,14,20,390,391,392,393,398,399,400,401,407],block:[3,8,9,11,16,103,108,111,198,199,201,295,300,301,302,303,315,318,327,330,331,403,406],blocksiz:[8,11,293,296,297,298,299,306,314,321,324,326,331,396,405],blosc:[8,11,15,293,296,297,298,299,306,314,321,324,326,396,406],blosclz:[8,11],bool:[3,11,20,21,22,23,34,36,37,49,52,54,56,57,58,60,67,68,69,70,71,72,73,74,79,82,84,85,92,102,105,106,107,113,119,126,127,139,146,151,152,170,171,172,175,183,190,191,193,194,208,239,241,262,265,267,289,291,293,319,320,324,329,331,332,334,335,337,340,341,342,358,360,361,364,370,396,404,407],bool_:[20,370],boringssl:15,both:[6,8,9,11,14,37,49,114,142,246,263,291,396,403,406],bound:[3,6,8,9,10,11,14,20,67,70,71,72,73,74,80,81,83,84,85,86,87,88,92,93,95,96,99,101,113,114,119,124,125,126,127,128,129,130,131,134,139,142,144,146,148,151,152,153,154,155,157,161,162,168,170,171,173,176,177,191,205,207,208,209,211,239,246,258,263,265,267,273,284,291,293,308,311,316,320,324,328,353,355,396,403,404,406],boundari:406,box:[113,125],broadcast:[11,92,101,168,242,246,263,264,268,291,292,296,300,302,303,310,315,326,327,330,396,404,406],broader:403,brotli:15,bsd:12,bucket:[2,3,4,5,7,9,11,17,192,206,210,396,405],buffer:[3,11,403],bug:15,build:13,build_def:15,build_doc:15,build_ext:15,built:[12,15,369,404],bundl:[12,15],bz2:11,bzip2:[8,11,15],bzl:15,c16:11,c8:11,c:[1,13,16,37,42,49,92,100,203,274,286,293,298,299,314,318,324,326,396,404,406],c_rehash:12,cach:[0,6,7,8,9,11,13,15,20,55,207,208,293,318,320,324,330,353,354,355,396,405],cache_pool:[0,4,5,6,7,8,9,11,57,61,63,65,66,273,293,296,297,298,299,314,324,326,330,396,403,405],cacherevalidationbound:[6,7,8,9,11],cafil:17,call:[62,92,102,103,106,109,117,198,199,201,207,237,245,249,298,318,330,333,336,403,404],callabl:[102,104,110,358,359,366,403],callback:[20,104,110,353,356,358,359,366,403],can:[12,13,14,15,17,130,204,242,246,252,263,268,291,296,330,331,353,354,396,403,404,405,406],cancel:[102,105,106,107,330,358,360,361],cancellederror:[105,106],cannot:[91,92,245,331],canon:406,capabl:[11,404],capath:17,captur:[191,208,291,324],care:9,cartesian:113,cast:[6,20,304,371,407],caus:[10,11,404],cc:203,cd:15,cdot:14,cert:[12,17],certain:[14,18],certif:15,chain:[92,404],chang:[14,15,91,94,207,265,291,331,374],channel:[9,396,405],charact:[15,407],characterist:396,check:[6,8,9,11,67,68,69,336,404],child:[65,66],choic:9,choos:406,chosen:[3,8,9,11,396],chunk:[13,20,22,23,24,26,27,28,29,32,33,35,36,37,39,42,46,47,49,50,51,239,246,249,263,265,274,286,291,293,298,299,305,314,324,326,330,396,403],chunk_aspect_ratio:[8,9,11,37,49,396],chunk_aspect_ratio_soft_constraint:[37,49],chunk_el:[8,11,37,49,396],chunk_elements_soft_constraint:[37,49],chunk_layout:[1,2,3,4,5,6,7,8,9,10,11,239,242,243,244,245,246,247,249,257,259,262,263,264,265,274,286,291,293,305,321,396,403,406,407],chunk_shap:[8,11,37,49,396],chunk_shape_soft_constraint:[37,49],chunk_siz:[9,396,405],chunklayout:[8,9,11,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,239,242,243,244,245,246,249,257,259,262,263,264,265,274,291,293,305,396,403,406],chunkss:406,circumst:6,cl:15,clang:15,clear:[37,49],clevel:[8,11,293,296,297,298,299,306,314,321,324,326,396,406],clone:15,close:[14,67,72],cloud:[13,17,18,330,405],cloudpickl:403,cloudsdk_config:17,cmake:15,cname:[8,11,293,296,297,298,299,306,314,321,324,326,396,406],coalesc:[330,331],code:15,codec:[10,21,22,37,39,49,239,246,250,263,265,275,286,291,293,306,321,396],codec_chunk:[8,9,11,21,37,39,49,406],codec_chunk_aspect_ratio:[37,49],codec_chunk_aspect_ratio_soft_constraint:[37,49],codec_chunk_el:[37,49],codec_chunk_elements_soft_constraint:[37,49],codec_chunk_shap:[37,49],codec_chunk_shape_soft_constraint:[37,49],codecspec:[9,20,52,53,54,239,246,250,263,265,275,291,293,306,396],colexicograph:[8,9,37,42,49,318,406],column:[37,42,49,318,406],com:[12,15],com_facebook_zstd:15,com_google_boringssl:15,com_google_brotli:15,com_google_snappi:15,com_google_tensorstor:15,combin:[1,2,3,4,5,6,7,8,9,11,341,396,404,406,407],comma:[12,15],command:[12,15],commit:[20,198,201,203,207,212,318,330,331,336,337,338,339,340,358,362,403],commit_async:[211,330,331,333,336,338],commit_start:[331,337],commit_sync:[170,302,331,336,338],common:[3,6,10,12,18,37,49,139,404],compar:[21,22,23,36,67,70,171,172,193,194,239,241,265,267,341,342],comparison:[241,246,263,267,291,396],compat:[0,6,7,8,9,10,11,12,14,15,113,130,246,263,291,300,302,303,310,315,327,330,396,404,405,406],compil:15,complement:[20,390,391,392,393,407],complet:[14,102,104,105,107,108,111,198,199,201,203,207,212,235,237,238,300,301,302,303,315,318,327,330,358,404,405],complex128:[11,20,372,407],complex64:[11,20,373,407],complex:[3,20,372,373,407],compon:[6,7,8,9,11,21,37,113,119,139,146,183,187,239,246,407],compos:[2,13,14,118,139,145,245,271],composit:[14,404],compress:[5,11,296,297,331,396,405,406],compressed_segment:[9,396,405],compressed_segmentation_block_s:[9,396,405],compression_level:5,compressor:[8,250,275,280,293,298,299,306,314,321,324,326,396,406],comput:[3,10,14,17,113,125,198,199,201,242,268,293,296,297,298,299,314,326,403,404],concaten:12,concis:18,concurr:[0,7,13,16,17,18,102,208,324,330],condit:[17,114,142,207,212,356,357],config:17,configur:[0,13,17],confus:404,conjunct:[14,291,324,396,406],connect:[12,13,17],consecut:[92,404],consequ:[115,118,191,208,291,324],consid:[8,330,406],consist:[6,7,8,9,11,13,92,130,207,404],constant:[1,14,20,213,214,227,231,389,404],constrain:[8,9,10,13,14,246,263,291,396,403,404,406],constraint:[1,2,3,4,5,6,7,10,14,21,22,24,27,29,32,33,35,37,40,41,42,43,47,49,51,239,246,249,250,252,263,265,274,275,277,278,280,286,291,341,396,403,406,407],construct:[21,22,24,25,37,38,52,53,55,62,63,64,66,67,71,72,73,74,113,119,120,121,139,146,147,148,171,173,178,179,183,185,193,195,213,214,215,216,239,246,247,265,272,341,343,344,345,346,347,374,375,378,379,380,381],constructor:62,consum:[20,92,102,204,358,404],contain:[3,7,12,14,15,67,68,69,75,92,96,113,125,171,175,347,403,404,405,406],content:[16,20,403],context:[1,2,3,4,5,6,7,8,9,10,11,13,16,17,18,19,20,55,56,57,58,59,60,61,62,63,64,65,66,92,102,190,191,200,202,205,208,267,273,291,293,295,296,297,298,299,304,311,314,324,326,330,331,368,371,396,403,404,405,407],context_a:267,context_b:267,contextresourc:[0,4,5,6,7,8,9,11,16,17,19],contigu:[1,67,318],continu:[198,199,201],contrast:404,contribut:9,control:330,conveni:[4,5,6,7,8,9,11,17,299],convers:[2,293,295,405],convert:[2,8,21,22,34,37,48,49,52,54,102,103,117,183,190,191,208,239,246,262,263,265,289,291,300,302,303,315,324,327,330,341,352,368,396,404],coordin:[92,404],copi:[0,14,15,170,171,174,183,188,202,239,241,249,251,265,267,276,330,358,363,404],core:[0,13,404],coroutin:[103,112,403],correctli:14,correspond:[8,9,11,14,17,18,19,20,24,35,37,49,83,88,92,93,102,103,125,130,131,235,246,252,263,291,307,358,369,370,372,373,386,387,388,390,391,392,393,394,396,397,398,399,400,401,402,403,404,406,407],cost:14,count:130,cpu:0,crash:330,creat:[1,2,3,4,5,6,7,10,13,15,20,55,58,59,61,170,191,205,208,235,236,252,265,291,293,295,296,297,298,299,300,301,302,303,305,306,307,308,309,310,311,314,315,318,321,324,326,327,330,331,332,403,405,406,407],credenti:[0,17,20,55,405],crt:[12,17],curl:[15,17],current:[0,11,14,15,102,198,199,201,207,293,295,318,330,331,403,405],custom:19,d:[20,67,92,93,94,95,96,97,98,99,100,101,114,115,140,141,142,143,240,243,266,269,289,290,294,297,301,374,375,389,404,405],dask:404,data:[0,1,2,3,6,7,10,13,18,19,184,185,186,187,188,189,200,202,207,239,246,254,263,265,279,291,298,300,302,303,304,306,309,310,315,318,324,327,330,353,354,355,356,357,368,369,370,371,378,379,380,386,387,388,390,391,392,393,394,396,397,400,402,403,404,406,407],data_copy_concurr:[0,4,5,6,7,8,9,11,92,102,273,293,296,297,298,299,304,314,324,326,371,396,403,404,405],data_encod:[9,396,405],data_typ:9,dataabc:184,databas:13,dataset:[8,16,17,19,190,293,295,296,297,298,299,300,301,302,303,308,309,313,314,315,317,318,324,326,327,330,331],dataset_3d:405,dataset_futur:405,datatyp:[8,279,296,297,331,396,405],date:15,datetim:11,deadlin:[108,111,365,367],deadlock:[103,403],decod:[0,13,20,52,406],decrypt:12,def:[103,403],defer:404,defin:[0,4,5,6,7,8,9,11,14,16,17,19,20,92,113,239,369,403,404,406],del:198,delet:[6,8,9,11,170,198,201,203,212,291,324,396],delete_exist:[6,8,9,11,291,324,331,396,405],delete_rang:[170,203],demand:10,demonstr:405,denot:404,depend:[12,17,92,318,330,404,407],deprec:[11,404],deriv:[10,341,350],describ:[10,14,18,20,21,22],desir:252,detail:[12,13],determin:[6,8,9,14,114,142,170,396,406],determinist:3,develop:17,deviat:[341,406],dexpr:404,diagon:[91,93,374,404],did:[108,111],differ:[3,14,18,95,101,102,161,168,207,246,257,263,264,283,291,292,314,315,321,326,327,396,397,402,403],dim:[20,47,51,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,113,114,116,120,142,146,167,213,215,218,389],dimens:[3,10,11,13,14,20,21,22,24,31,35,37,45,47,49,51,67,71,72,73,74,89,91,93,94,95,96,97,98,99,100,101,113,115,116,117,119,120,122,126,127,130,132,135,139,140,143,146,151,152,156,168,213,216,239,240,242,243,246,252,263,264,265,266,268,269,277,282,285,289,290,291,292,293,294,296,297,301,307,317,326,327,331,341,345,374,375,395,396,403,405],dimension:[3,13,14,20,92,113,293,404],dimension_separ:[11,293,298,299,314,324,326,396],dimension_unit:[8,9,10,239,246,252,263,265,277,291,293,307,396,403,406],dimensionless:[8,341,406],dimexpress:[20,91,92,93,94,95,96,97,98,99,100,101,113,115,139,143,239,243,265,269,293,297,301,374,404],dimselectionlik:[91,100,113,117,374,375],direct:92,directli:[0,1,2,3,6,7,8,9,10,11,14,15,16,17,130,139,184,274,275,277,278,280,286,300,301,302,303,315,327,341,403,404,406,407],directori:[12,15,16,17,18,19],disabl:[11,12],discrep:[114,142],disjoint:330,dist:15,distribut:[12,15],divid:[341,349,404],divisor:[341,349],do_read:403,do_writ:403,doc:15,document:[12,18,406,407],doe:[6,8,9,11,12,14,15,16,62,92,94,96,97,98,99,130,139,274,275,277,278,280,281,286,291,298,311,324,330,341,369,396,404,406],domain:[3,10,13,20,91,92,93,94,95,96,97,98,99,100,101,102,113,114,115,116,117,118,119,120,121,122,124,125,126,127,128,129,130,131,132,133,134,135,136,137,139,140,142,143,144,145,146,147,148,150,151,152,153,154,155,156,157,159,161,162,165,166,168,239,240,242,243,244,245,246,252,253,257,258,260,261,263,264,265,266,268,271,277,278,284,285,286,287,288,290,291,292,293,294,295,296,297,299,300,301,302,303,307,308,315,316,317,318,321,322,323,326,327,330,374,389,395,396,403,404,405,406],domin:404,don:15,done:[13,15,17,96,102,103,107,235,237,238,246,263,291,358,364,396],dot:11,doubl:[20,341,388,406,407],download:15,downsampl:[6,20,376,377,407],downsample_factor:[3,20,376,377],downsample_method:3,downsamplemethod:[3,376,377],driver:[0,13,20,52,92,102,170,184,185,186,187,188,189,190,191,192,198,199,200,201,202,203,204,205,206,207,208,210,211,212,239,250,252,265,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,285,286,289,290,291,292,293,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,314,315,318,321,324,326,327,330,331,341,371,396,404,405,406,407],drop:[14,330],dtype:[1,2,3,4,5,6,7,8,9,10,11,20,92,102,239,241,246,247,248,251,254,259,262,263,265,276,278,279,280,286,291,293,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,313,314,315,317,318,321,324,326,327,330,331,368,369,370,371,372,373,378,379,380,381,382,383,384,385,386,387,388,390,391,392,393,394,396,397,398,399,400,401,402,403,404,405,406,407],due:[9,16,207],dummi:[92,404],duplic:[94,404],durabl:[13,198,201,203,212,330,358],dynam:12,e:[8,9,11,12,14,15,17,20,37,42,49,90,92,96,97,98,99,114,118,142,207,208,249,318,324,331,403,404,406],each:[0,3,6,7,8,9,10,11,12,14,24,35,62,94,96,97,98,99,113,119,126,127,130,132,139,146,151,152,156,239,246,249,252,263,265,277,291,293,295,307,396,403,404,406,407],earlier:[10,15],effect:[10,14,92,114,142,191,208,265,274,275,277,278,280,286,291,324,333,336,404],effici:[3,9,13,14,21,46,47,50,51,330,331,406,407],effort:15,either:[6,8,9,11,14,17,20,67,114,117,142,300,301,302,303,315,327,330,331,339,374,404],element:[2,3,9,21,22,24,28,29,35,37,42,43,48,49,92,113,137,139,166,239,261,265,273,288,293,323,404,406],elements_soft_constraint:[22,24,29,35,37,49,406],empti:[7,8,14,67,79,83,88,89,114,142,171,173,175,176,177,196,212,246,263,291,341,356,357,396,403,404,406],enabl:[6,8,9,11,13,17,67,75,139,330,403],encod:[0,4,8,11,13,15,20,52,396,405,406,407],end:[17,18,19,100,130,404],endian:[8,9,11,407],engin:17,enhanc:404,ensur:[15,102,109,184,252,330,331,404],entir:[7,9,11,14,114,142,295,330,347,404,406,407],entri:[193,196],environ:[15,17],epoch:[6,108,111,193,197,207],equal:[0,1,8,9,11,14,20,21,22,23,36,42,43,60,67,70,80,81,86,87,90,92,93,118,171,172,193,194,239,241,242,243,245,246,263,265,267,268,269,271,281,291,296,299,300,303,306,310,311,341,342,389,396,403,404,406],equival:[3,8,11,37,49,67,76,92,93,96,97,98,100,113,118,130,140,162,165,166,207,240,246,258,260,261,263,266,284,287,288,291,294,295,299,316,317,322,323,324,330,338,345,396,403,404,406],error:[7,8,9,10,11,14,17,102,103,108,111,114,142,198,199,201,207,235,237,246,263,291,338,396,403,404],escap:15,etc:[3,12,15,17,321],even:[3,7,13,60,198,201,404],evenli:406,event:[103,403],everi:[6,7,8,9,11,13,14,93,403,406],evict:0,exactli:[3,8,9,11,92,403,404],exampl:[15,185,205,331,403,405],except:[8,9,11,96,102,103,106,108,109,198,199,201,235,237,246,263,267,291,331,358,365,396,403,404,406],excess:9,exclud:18,exclus:[14,67,71,80,81,113,119,124,139,146,153,171,173,176,404],exclusive_max:[8,9,11,14,67,68,69,70,71,72,75,77,78,80,81,82,83,84,85,86,88,90,113,114,115,116,117,118,119,121,124,125,126,127,130,131,142,146,147,153,167,171,173,176,242,243,244,257,264,268,286,291,296,300,321,404],exclusive_min:[67,81,87],execut:[0,15,102,109,403],exist:[1,2,3,4,5,6,7,8,9,11,15,92,96,114,142,146,147,198,199,201,203,205,207,212,246,252,263,291,300,302,303,315,324,327,330,356,357,378,380,403,404,406,407],exit:331,expect:[12,15,112,252,404],explicit:[6,14,67,113,118,119,126,127,139,146,151,152,239,242,245,246,263,265,268,271,291,293,296,299,300,303,330,396,403,404,406],explicitli:[8,9,11,109,404,406],expos:7,expr:[96,113,115,139,143,239,243,245,265,269,271,293,297,299,301,303,404],express:[13,20,67,77,91,92,94,95,96,97,98,99,100,101,113,115,130,139,143,239,243,265,269,293,297,301,374,395],extend:[1,2,3,4,5,6,7,8,9,10,11,14,16,17,19],extens:[11,15,92,369],extent:[11,14,137,198,201,203,212,406],extern:[191,207,208,291,324,331],extract:[91,93,374],f2:11,f4:[11,280,396],f8:11,f:[11,102,293,318,330,396,403],facil:12,factor:3,fail:[1,2,3,4,5,6,7,8,9,11,17,207,331,403,404,407],fake:17,fals:[6,8,9,11,19,22,34,52,54,56,57,58,60,68,69,71,72,73,74,82,84,85,90,92,103,106,126,127,151,152,175,183,190,191,208,235,237,238,239,262,265,289,291,293,320,324,331,332,404,406],faster:15,fastest:[8,11,15],fc44652a42b3:15,fetch:15,few:404,fewer:[0,404],field:[11,83,88],file:[7,8,9,11,12,13,15,17,18,19,184,185,186,187,188,189,190,200,202,330,331,405],file_io_concurr:[0,16,65,66,190,200,202],filesystem:[0,13,16,18,405],fill:[13,100,239,246,255,263,265,280,291,293,310,396,405,406],fill_valu:[10,11,239,241,246,255,263,265,280,291,293,298,299,310,314,321,324,326,396,406],filter:[11,250,293,298,299,306,314,321,324,326,396,406],find:[12,15],fine:[300,301,302,303,315,327],finit:[14,67,74,75,82,90,130,246,263,291,396,403,406],first:[9,14,15,92,93,101,168,264,292,326,327,404,406],fix:[330,397,402],fix_resizable_bound:[293,320],flag:[15,83,88,125,131],flatten:404,float16:[11,20,386,407],float32:[8,9,11,20,280,305,371,373,387,396,407],float64:[8,11,20,372,388,407],fly:3,flyeem:405,flyem:396,follow:[3,8,9,10,11,12,14,15,17,112,114,142,246,263,291,341,396,403,404,406,407],forc:[102,109],form:[14,61,299,404],format:[8,9,11,12,13,396,406,407],fortran:[8,9,37,42,49,318,406],forward:358,found:199,fraction:207,framework:55,free:403,frequent:3,fresh:[6,7,8,9,11],from:[0,1,2,3,6,7,8,9,10,11,13,14,16,17,20,21,22,25,37,38,49,52,53,55,58,59,63,64,65,66,92,93,100,113,116,119,120,121,130,139,146,147,148,171,173,183,185,193,195,204,205,207,239,246,247,249,265,272,295,330,331,341,343,344,346,347,350,368,374,375,378,380,396,404,405,406],fsync:330,fulfil:[353,355],full:[7,11,14,19,92,324,404,406],fulli:[11,13,14,139,191,208,291,324,330],further:406,futur:[15,20,102,103,104,105,106,107,108,109,110,111,112,170,203,204,205,207,212,235,236,237,238,293,318,320,330,331,336,339,358,359,362,363,366,396,405],futurelik:[20,102,103,112,403],g:[11,12,17,20,92,96,97,98,99,208,249,324,331,403,404],gc:[2,3,4,5,7,9,11,18,19,192,206,210,330,396,405],gcc:15,gce:17,gcloud:17,gcs_request_concurr:[17,396,405],gcs_request_retri:[17,396,405],gcs_user_project:[17,396,405],gener:[15,92,170,178,180,193,194,195,196,197,207,212,299,341,353,354,356,357,403,404,406],get_running_loop:[103,403],get_valu:103,git:15,github:15,given:[0,3,16,55,61,67,69,92,96,97,98,99,404,406],global:[0,17,403],good:9,googl:[13,15,17,330,405],google_application_credenti:[12,17],googleapi:12,grain:[300,301,302,303,315,327],granular:[9,406],graph:[191,208,291,324],grid:[8,9,11,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,37,39,40,41,46,49,50,330,406],grid_origin:[8,9,11,21,37,40,41,47,49,51,242,243,244,245,246,247,249,257,259,262,264,286,305,321,406],grid_origin_soft_constraint:[21,37,41,47,49,51,406],grid_soft_constraint:[24,35],group:[9,20,331],gs:[17,18,192,210,405],gsutil:17,guarante:[7,13,198,201,203,207,212,330,331,358,369],guid:13,gzip:[8,9,11,396,405,406],ha:[8,9,10,11,14,17,92,99,100,102,105,106,107,191,203,208,246,263,281,291,310,324,330,331,333,334,336,337,339,340,358,396,403,404],half:[0,20,67,71,170,171,173,386,407],handl:[17,20,55,56,61,102,227,229,235,293,358,403],hard:[8,9,11,14,21,22,24,32,35,37,40,42,43,47,49,51,406],hash:[9,396,405],have:[8,9,10,11,14,15,17,67,94,114,142,191,208,242,246,263,268,291,296,308,324,331,369,396,404,405,406],header:[8,11],hemibrain:396,here:8,hierarch:406,high:13,higher:[8,11,207],hit:405,hold:358,hostnam:12,how:[12,17,406],howev:[3,11,15,17,92,102,139,403],http:[15,17],http_archiv:15,http_proxi:12,https_proxi:12,hull:[10,67,83,113,125],i1:11,i2:11,i4:[11,396],i8:11,i:[0,8,9,11,13,14,17,37,42,47,49,51,90,92,96,100,114,118,142,198,199,201,207,215,216,274,275,277,278,280,286,318,330,331,404,405,406],id:[0,9,11,17,61,293,298,299,306,314,321,324,326,396,406],ident:[8,9,14,118,146,147,208,267,324,396,405],identifi:[0,6,8,11,14,15,18,113,114,116,142,170,193,196,403,404,406,407],ieee:[20,386,387,388,407],iexpr:404,if_equ:[212,356,357],if_not_equ:[207,353,354,403],ignor:[1,2,3,4,5,6,7,8,9,11,47,51,406,407],ijg:9,imag:[4,5,9],imaginari:407,immedi:[14,103,112,404],immut:[113,341,403,404],implement:[7,11,13,15,207],impli:[265,274,275,277,278,280,286],implicit:[8,9,10,11,14,20,67,71,72,73,74,83,84,85,88,92,93,113,114,119,125,126,127,131,139,142,146,151,152,246,263,291,396,403,404,406],implicit_low:[67,70,71,72,73,74,84],implicit_lower_bound:[113,119,126,139,146,151,167,404],implicit_upp:[67,70,71,72,73,74,77,85],implicit_upper_bound:[113,119,127,139,146,152,167],implicitli:[8,9,11,14,404,405],impos:[14,341,406],improv:[330,331],includ:[8,9,11,12,13,15,19,20,60,113,117,265,274,275,277,278,280,286,300,302,303,315,318,324,327,330,404,406],include_default:[22,34,52,54,56,57,58,60,183,190,239,262,265,289],inclus:[14,67,71,72,73,86,87,113,119,128,129,134,139,146,154,155,157,162,171,173,177,239,258,265,284,293,316,404],inclusive_max:[14,67,70,72,80,81,85,86,87,90,113,119,128,154,389],inclusive_min:[8,9,11,14,67,68,69,70,71,72,73,75,77,78,80,81,82,83,84,85,86,87,88,90,113,114,115,116,117,118,119,121,124,125,126,127,128,129,130,131,132,134,136,137,142,146,147,155,167,171,173,177,242,243,244,257,264,268,286,291,296,300,321,389],incompat:[10,47,51,246,263,291,396,403],inconsist:7,increment:[15,246,252,263,291,307,396,403,406],indefinit:403,independ:[9,14,20,239,396,406],index:[3,9,13,21,45,67,69,91,93,94,95,96,97,98,99,100,101,114,115,116,117,118,119,120,121,130,135,141,142,143,144,145,146,147,148,150,161,163,168,169,213,215,223,227,242,244,245,246,252,257,263,264,268,270,271,278,283,290,291,292,296,298,299,300,302,303,307,314,315,326,327,374,389,395,396,403,406],index_arrai:[14,148,167,213,215,217,245,270,271,283,292,298,299,303,314,326],index_array_bound:[14,148],index_exp:[113,130,403],index_rang:[146,167,213,215,218],indexdomain:[8,9,11,14,20,21,47,51,67,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,142,147,150,239,242,243,244,245,246,253,257,263,264,265,268,278,291,293,296,297,300,301,308,396,403,404,406],indexerror:[92,94,96,97,98,99,245,404],indexinterv:14,indextransform:[1,2,3,4,5,6,7,8,9,10,11,14,20,92,93,94,95,96,97,98,99,100,101,113,115,118,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,213,214,215,216,223,227,239,244,245,257,264,265,268,269,270,271,283,290,292,293,296,297,299,303,395,404,407],indic:[3,8,9,11,14,20,60,67,71,72,73,74,75,82,84,85,89,91,92,95,96,100,101,113,114,119,126,127,130,139,141,142,144,146,151,152,161,168,171,173,175,176,177,178,181,196,207,212,227,239,244,245,246,252,257,263,264,265,270,271,273,283,291,292,293,298,299,302,303,307,314,315,319,324,326,327,329,330,331,334,335,337,340,341,358,374,375,389,396,403,404,406],indicaet:8,indirectli:[139,406],individu:[7,9,10,404,406],ineffici:9,inf:[14,20,47,51,67,71,72,74,78,80,81,86,87,92,93,94,95,99,101,118,119,121,143,144,145,146,148,161,168,179,195,207,389,395,403,404],infinit:[14,67,130,246,263,291,396,403,406],info:9,inform:[12,15,17,396],infti:14,inherit:[55,63,64,65],init:0,initi:[1,15,403,404],inlin:404,inner:[11,42,43,67,68],inner_ord:[8,9,11,21,37,42,43,44,45,48,49,242,243,244,245,246,247,249,257,262,264,286,305,321,396,406],inner_order_soft_constraint:[21,37,42,43,49,406],innermost:[21,37,42,49,406],input:[1,2,3,6,8,9,10,11,14,20,91,92,93,94,95,96,97,98,99,100,101,117,139,141,142,143,144,145,146,147,148,150,151,152,153,154,155,156,157,158,159,160,161,168,213,216,246,263,290,291,374,395,396,403,404,407],input_dimens:[10,14,118,145,146,147,148,167,213,216,219,270,289,298,326,404,405],input_exclusive_max:[10,14,92,102,139,142,146,148,151,152,153,167,268,269,270,271,283,289,291,292,293,296,297,298,299,304,314,324,326,371,396,404,405],input_inclusive_max:[14,96,139,146,154],input_inclusive_min:[10,14,92,96,97,98,102,139,142,146,148,151,152,153,154,155,156,157,167,268,269,270,271,283,289,291,292,293,296,297,298,299,304,314,324,326,371,396,404,405],input_label:[14,92,93,95,96,97,98,99,100,101,139,142,146,148,150,156,158,160,164,167,268,269,296,297,396,404,405],input_origin:[139,155,157],input_rank:[14,92,118,139,141,142,143,145,146,151,152,158,160,214,216,245,271,299,395,404],input_shap:[14,93,97,98,99,100,139,146,150,151,152,153,154,155,156,157,158,159,160,164,167,215,245,268,269,270,271,283,292,299,303,404],insert:404,instal:[13,17],instanc:[0,62,105,378,379],instead:[6,7,8,9,11,12,15,102,130,139,184,207,299,330,396,403,404],instruct:13,int16:[8,9,11,20,390,407],int32:[1,2,8,9,10,11,20,92,241,313,317,391,396,404,407],int64:[8,11,20,392,407],int8:[8,9,11,20,393,407],integ:[0,1,2,3,6,8,9,10,11,14,17,20,67,95,115,116,118,161,257,283,314,315,390,391,392,393,398,399,400,401,406,407],integr:404,intend:[15,17,18,19],interdepend:[191,208,291,324],interfac:[13,170,235,300,301,302,303,315,327,358],interleav:404,intermedi:404,intern:[8,9,207],interoper:[293,295,369,405],interpret:[130,178,181,341,404,406,407],interrupt:[108,111],intersect:[67,88,93,113,131],interv:[3,14,20,47,51,67,68,69,70,71,72,73,74,75,76,78,80,81,82,86,87,90,170,171],introduc:13,introspect:61,invoc:[15,404],invok:[15,102,104],involv:[14,404],ip:12,irrespect:[96,207],isol:[13,331],isomorph:[191,208,291,324],issu:330,iter:[67,75],its:[14,16,55,58,59,63,113,121,139,148,207,239,247,341,344,404,406],itself:[7,330,358,404],j:[14,114,142],janelia:396,jax:[11,369],join:[6,7,8,9,11,183,187],jointli:330,jpeg:[6,9,15,407],jpeg_qual:9,json:[0,1,2,3,4,5,6,8,10,11,12,13,14,16,17,18,19,20,21,22,25,34,37,38,39,40,41,42,43,46,48,49,50,52,53,54,55,56,57,58,59,60,63,113,121,138,139,148,167,170,183,185,186,190,200,205,239,241,247,248,262,265,267,272,273,289,341,344,352,394,396,406],json_point:7,just:[14,404,405],k:[100,114,142],keep:330,kei:[7,8,9,11,13,20,55,61,170,171,173,175,178,182,183,184,187,188,189,192,193,196,198,199,201,202,203,204,205,206,207,208,209,210,211,212,265,281,291,293,311,330,331,396,405,406],kept:[9,15],key_encod:11,keyboard:[108,111],keyboardinterrupt:[108,111],keyerror:[198,199,201,207],keyrang:[170,171,172,173,174,175,176,177,203,204],keyvaluestorebackedchunkdriv:[6,8,9,11,407],keyword:102,kvstore:[2,3,4,5,6,7,8,9,11,16,17,18,19,20,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,265,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,285,286,289,290,291,292,293,295,296,297,298,299,300,301,302,303,305,306,307,308,309,310,311,314,315,318,321,324,326,327,330,331,396,403,405],kvstoreurl:[6,7,8,9,11,16,17,18,19],label:[8,9,11,13,14,20,67,70,71,72,73,74,77,78,83,88,89,91,92,93,94,100,113,115,116,117,119,120,121,125,131,132,139,143,146,156,242,243,244,245,246,253,257,263,264,268,291,296,297,300,301,308,374,375,396,403,404,406],lambda:102,larg:[13,204,295],larger:[14,405],largest:9,last:[14,92,106,116,117,198,199,201,207,237,245,404],latenc:[13,330],later:[15,16],latest:15,latter:11,layer:[7,8,9,11,330,406],layout:[13,20,21,22,36,37,44,45,47,48,49,51,239,246,249,263,265,274,291,293,305,318,396,403],lead:[11,14,103,347,406],least:[0,8,14,114,142,404],leav:[8,96,97,98,403],left:[9,14,114,142,396,403],legaci:404,len:122,length:[3,8,11,14,20,141,397,402,404,406],leq:14,less:[14,246,252,263,291,307,341,345,396,403,404,406],level:[2,5,8,11,13,207,405,406],lexicograph:[3,37,42,49,170,171,173,177,318,406],libcurl:12,libjpeg:15,libpng:15,librari:[11,13,130,139,404],lightweight:404,like:[12,13,17,115,118,252,396,404],likewis:404,limit:[0,13,14,17,18,65,66,358,403],link:[12,15,235,236,237,238],linux:[12,15],list:[8,12,14,15,75,116,170,203,204,207,376,377,404],liter:404,littl:[9,11,407],load:15,local:[0,12,13,16,17,18],localhost:17,locat:[12,17,321,396],lock:16,logic:[14,113,330,407],login:17,longer:358,loop:[103,403],lost:7,low:[9,14],lower:[3,14,67,71,72,73,74,81,84,87,93,96,99,113,119,126,129,130,134,139,146,151,155,157,162,171,173,177,239,258,265,284,293,316,404,406],lowest:3,lru:0,lz4:[8,11,15,293,296,297,298,299,306,314,321,324,326,396,406],lz4hc:[8,11],m1:14,m2:14,m:[14,15,406],mac:12,machin:[13,16,17],maco:15,made:[207,331,403],mai:[0,3,7,8,9,10,11,12,14,15,16,17,18,19,67,96,97,98,99,100,103,112,113,117,119,146,170,198,199,201,205,207,208,211,235,252,293,295,300,302,303,306,315,318,321,324,327,328,330,336,340,341,353,355,374,396,403,404,406,407],main:[108,111],major:[37,42,49,318,406],make:[12,15,406],manag:[20,55,331],mani:[12,14,17,92,139,404],manipul:19,manual:[14,15],map:[0,10,14,20,92,93,94,95,96,97,98,99,100,101,115,118,139,141,142,143,144,145,146,147,148,161,163,168,170,213,214,215,216,223,290,395,404],mark:[14,67,105,235,237,238,404],match:[0,1,2,3,4,5,6,7,8,9,10,11,14,19,83,88,94,96,97,98,99,114,142,204,207,212,246,263,291,356,357,396,403,404,406,407],mathrm:[9,14],mathtt:14,max:3,max_retri:17,maximum:[0,3,17,108,111],mayb:15,mean:[3,6,7,8,9,11,404],meaning:90,mechan:[4,5,6,7,8,9,11,13,170,358,404],median:3,member:[0,1,2,3,4,5,6,7,8,9,10,11,14,16,17,18,19,37,39,40,41,42,43,46,49,50,60,406,407],memori:[0,1,6,8,9,11,13,14,18,20,170,191,198,199,201,203,204,205,207,208,211,212,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,285,286,289,290,291,292,293,295,296,297,298,299,300,301,302,303,305,306,307,308,309,310,311,314,315,318,321,324,326,327,330,331,368,396,403,405,407],memory_key_value_stor:[19,191,208,273,293,296,297,298,299,311,314,324,326,396],mere:[298,330,358],merg:[24,35,246,263,291,396,403,406],metadata:[6,8,9,11,17,252,274,275,277,278,279,280,282,285,286,289,290,293,296,297,298,299,314,324,326,331,396,405],metadata_kei:11,metdata:8,method:[3,8,11,17,20,213,220,227,299,376,377,404,405],microsoft:15,middl:405,million:[8,9,11],min:[3,14],mind:330,minim:[396,404],minimal_spec:324,minimum:[3,113,125],minishard:9,minishard_bit:[9,396,405],minishard_index_encod:[9,396,405],mismatch:14,miss:[170,178,179,181,207,212,406],mix:404,mode:[3,15,92,95,101,265,291,293,312,324,331,396],model:11,modif:[20,331],modifi:[7,14,113,183,191,249,330],modul:[15,403],more:[4,5,6,7,8,9,11,12,14,15,18,92,117,299,330,403,404,407],most:[3,9,11,12,14,17,18,92,106,117,119,146,170,198,199,201,207,237,245,299,330,404,406],ms:12,msvc:15,much:15,multi:[13,19,20,293],multipl:[0,3,9,11,13,14,15,16,17,19,252,300,301,302,303,315,327,330,331,396,403,404],multipli:[8,9,14,341,343,345,346,347,348,351,406],multiscal:9,multiscale_metadata:[9,396,405],murmurhash3_x86_128:9,must:[0,1,2,3,4,5,6,7,8,9,10,11,12,14,15,17,37,49,62,83,88,92,100,109,118,207,242,245,246,263,268,271,291,296,299,300,303,324,330,396,403,404,406,407],my:[2,3,4,5,7,9,11,17,192,206,210],n5:[6,13,267,272,273,276,277,279,281,282,285,289,290,291,296,297,300,301,307,308,311,331,396,406],n:[14,20,92,113,404],name:[8,9,11,15,227,229,232,378,381,382,403,404],nanomet:9,nasm:15,nativ:[8,11,13],ndarrai:[293,295,403,404,405],ndim:[21,22,30,44,113,133,139,160,239,256,265,282,293,313],nearest:3,necessari:[12,14,114,142,324,407],necessarili:[92,404,406],need:[14,15,92,139,341,404,406],neg:[100,116,130,404,406],neither:[6,7,8,9,11,14,324,396,403],neq:14,nest:[1,10,14,191,205,291],nesteddirectorystor:11,net_zlib:15,network:[13,16,17],neuroglanc:[9,13,396,405,406],neuroglancer_multiscale_volum:9,neuroglancer_precomput:[6,252,396,405,406],neuroglancer_uint64_sharded_v1:[9,396,405],never:[6,318,330,404],newaxi:[20,92,93,395,404],newer:[353,354],newli:93,nghttp2:15,nm:[8,9,252,277,307,342,343,344,346,347,348,349,350,352,406],no_proxi:12,non:[3,6,7,8,9,11,14,15,17,83,88,92,100,114,142,170,205,246,263,291,331,356,357,358,396,403,404,406],none:[14,17,20,21,22,24,26,27,28,29,30,31,32,33,35,37,40,41,42,43,47,48,49,51,55,62,63,64,67,71,72,73,74,91,92,96,97,98,99,102,103,104,108,109,110,111,113,119,130,139,146,147,170,183,191,198,201,203,204,205,207,208,209,211,212,213,217,218,219,222,235,237,238,239,242,243,244,245,246,250,252,253,254,255,256,257,259,263,264,265,268,269,270,271,275,277,278,279,280,281,282,283,285,290,291,292,293,295,298,299,306,307,310,311,314,321,324,325,326,328,331,333,336,338,339,358,359,362,363,365,366,367,368,374,395,396,403,404],nonzero:[92,404],nor:[6,8,9,11,14,324,396,403],normal:[4,5,6,7,8,9,11,12,14,15,114,142,246,263,291,330,331,396,404],note:[3,8,9,12,14,15,92,246,263,291,396,403],now:330,np:[130,295,403,405],num_channel:[9,396,405],number:[0,3,4,5,6,8,9,14,15,17,20,21,22,24,28,29,31,35,37,45,49,94,96,97,98,99,108,111,113,119,122,130,135,137,139,146,166,204,239,261,265,288,293,317,323,341,347,372,373,404,406,407],numer:[3,14,341,404,406],numpi:[11,14,20,91,92,95,96,101,113,130,139,144,161,168,239,244,245,257,264,265,270,271,283,292,293,295,298,302,314,315,326,327,369,370,372,373,374,378,380,386,387,388,390,391,392,393,394,397,398,399,400,401,402,405],numpy_dtyp:[378,383],numpyindexingspec:[91,92,95,101,139,144,161,168,239,244,257,264,265,270,283,292,293,298,302,314,315,326,327,374],o:[0,13,198,199,201,274,275,277,278,280,286,318,404,405],oauth2:12,obj:[144,404],object:[0,1,2,3,4,5,6,7,8,9,10,11,14,16,17,18,19,20,83,88,102,103,108,111,113,120,125,130,131,146,147,192,206,210,235,237,238,249,295,330,331,341,358,365,367,378,379,385,404,405,406,407],object_:[394,397,402],observ:[331,403],obtain:[8,11,92,113,249,293,320,404,405],occupi:407,occur:[14,102,198,199,201,404],odd:3,offer:3,offici:11,offset:[3,10,14,21,47,51,91,97,98,118,145,146,147,148,164,167,213,214,215,216,221,289,374,404,405,406],often:[17,330],oindex:[91,95,139,144,161,239,244,245,257,264,265,270,271,283,292,293,298,299,302,303,314,315,326,327,374],older:[6,7,8,9,11,207,353,355],omit:[10,396,404],onc:[14,20,117,212,330,331,340,358,403],one:[8,11,12,14,17,92,93,114,119,142,146,246,263,291,299,396,403,404,406],ones:8,onli:[0,3,6,7,8,9,10,11,12,14,15,16,37,47,49,51,92,93,102,119,146,212,246,263,274,275,277,278,280,286,291,312,318,330,331,358,396,403,404,405,406],onto:404,op1:404,open:[1,2,3,4,5,6,7,8,9,10,11,13,20,67,71,102,170,171,173,191,198,199,200,201,202,203,204,205,206,207,208,210,211,212,252,265,291,293,295,296,297,298,299,300,301,302,303,305,306,307,308,309,310,311,314,315,318,321,324,326,327,330,331,340,403,404,405,406,407],openssl:12,oper:[0,6,7,8,9,10,11,12,13,14,15,16,20,92,94,95,96,97,98,99,100,101,102,104,105,106,107,108,109,111,115,118,139,144,161,168,169,170,178,198,201,203,205,207,211,212,235,244,257,264,270,283,292,293,298,300,301,302,303,315,325,327,328,330,340,358,396,403,404],opn:404,opt:15,optim:[11,15],optimist:13,option:[0,1,2,3,4,5,6,7,8,9,10,11,12,14,15,16,17,18,19,20,67,113,239,246,263,265,274,275,277,278,280,286,291,353,356,396,403,406,407],order:[8,9,14,15,17,20,21,37,42,43,49,92,100,139,140,170,171,173,177,204,239,240,265,266,274,286,293,294,298,299,314,318,324,326,330,396,404,406,407],org:15,org_blosc_cblosc:15,org_lz4:15,org_nghttp2:15,org_sourceware_bzip2:15,org_tukaani_xz:15,origin:[3,8,9,11,14,21,37,40,41,49,91,96,97,98,99,113,129,134,139,157,162,191,208,239,246,258,263,265,284,291,293,316,324,374,396,403,404,406],orthogon:[95,161,257,283,314,315,404],os:12,other:[3,8,9,11,14,15,21,22,23,24,35,36,47,51,62,67,69,70,83,88,92,113,114,119,125,131,139,171,172,193,194,198,199,201,239,241,265,267,299,341,342,403,404,406],otherwis:[1,2,3,6,8,9,10,11,14,15,17,71,72,73,103,114,119,142,146,338,406,407],out:[14,92,93,94,95,96,97,98,99,100,101,142,143,144,145,146,147,148,161,168,290,395,404],outer:[91,95,139,161,239,257,265,283,293,314,315,374],output:[10,15,20,91,92,93,94,95,96,97,98,99,100,101,115,118,139,141,142,143,144,145,146,147,148,161,163,164,167,168,213,214,215,216,223,225,226,227,245,246,263,270,271,283,289,290,291,292,298,299,303,314,326,374,395,396,403,404,405],output_rank:[118,139,141,164,245,271,299,300,303],output_user_root:15,outputindexmap:[14,20,118,139,145,146,147,163,164,167,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,245,271,299,303],outputindexmethod:[20,213,220,223,227,228,229,230,231,232,233,234],outsid:[331,404],over:[3,12,14,67,75,118,146,147,330,404,406],overlap:[7,10],overrid:[0,1,2,3,4,5,6,7,8,9,10,11,15,16,17,18,19,291,324,396,407],overridden:[8,15,191,205,291,396],own:17,pack:11,pai:17,pair:[19,235,236,341,346],paramet:[8,9,11,17,18,20,24,35,37,49,52,60,61,63,64,71,72,73,74,83,88,94,96,97,98,99,100,103,108,111,115,116,117,118,119,120,125,131,141,146,147,173,191,198,199,201,203,204,205,207,208,212,242,245,246,263,268,271,291,296,299,300,302,303,315,318,324,327,330,368,396,403,406,407],parent:[0,1,2,3,4,5,6,7,8,9,10,11,16,17,18,19,55,63,64,65,66,407],pars:[55,58,64,170,183,347,406],part:[15,21,37,239,246,252,374],partial:[6,8,9,11,14,396],particular:[0,13],particularli:[90,403],partit:[295,406],pass:[15,20,353,356],path:[4,5,6,7,8,9,11,12,13,15,16,17,18,19,170,183,184,185,186,187,188,189,190,191,192,198,199,200,201,202,203,205,206,207,208,210,212,281,311,331,396,405],pattern:102,pem:12,pend:0,pep:404,per:[8,9,11,14,22,24,28,29,35,406],perfect:404,perfectli:[330,404],perform:[2,3,9,13,14,91,198,201,203,205,211,212,274,275,277,278,280,286,300,301,302,303,315,318,327,328,396,403,404,405,406],permiss:17,permit:[6,7,8,9,11,14,91,92,100,115,118,246,263,291,396,403,404],permut:[14,21,37,42,43,49,406],persist:[11,331],physic:[8,20,239,246,252,263,265,277,291,293,307,341,396,403,406],pick:9,pip:15,place:[9,12,92],plain:91,platform:[11,15],plu:404,pm:14,png:[6,15,407],point:[20,330,331,341,369,386,387,388,406,407],pointer:7,polici:[293,320],pool:[0,208,324,396,403],portion:[347,406],posit:[3,10,14,246,263,291,293,310,396,404,405],posix:[15,16],possibl:[8,9,14,15,321,403],potenti:404,power:404,pre:15,prebuilt:15,preced:[12,37,49,246,263,291,396,403,406],precis:[20,37,49,330,341,386,387,388,394,397,402,406,407],precomput:[9,13,406],predecessor:404,prefer:[37,49,406],prefix:[17,18,19,170,183,189,206,404],prepar:12,presenc:7,present:[3,8,14],preserv:403,preset:8,preshift_bit:[9,396,405],prevent:15,previou:404,previous:[4,5,6,7,8,9,11,16,17,19,102,110,205,396,403],primarili:[61,67,115,118],print:[12,71,72,73,74,78,102,250,252,253,254,255,259,279,282,285,290,403],prior:[6,7,8,9,11,15,94,96,97,98,99,403,404],problem:[11,17],process:[7,13,16,295],produc:[20,102,108,111,235,404],product:[113,137],progress:15,project:[15,17],project_id:17,promis:[20,102,106,235,236,237,238],propag:[10,83,88,125,131],properti:[3,8,9,11,13,18,151,152,153,154,155,156,157,159,249,331,396,403,406,407],propos:404,protocol:[16,404],provid:[7,8,9,11,12,13,15,16,17,102,330,331,358,404],purpos:[19,115,403,404],py:[15,113,120,144],python3:15,python:[1,11,13,20,67,77,302,303,394,397,402,404],qualiti:[4,9],quaniti:[341,406],quantiti:[20,246,252,263,291,307,341,345,396,403,406],queri:[13,102,106,107],queued_for_writeback_bytes_limit:0,quit:3,r:[175,312],rais:[47,51,75,94,96,97,98,99,102,108,111,117,130,198,199,201,204,207,242,243,244,245,246,257,263,264,268,269,270,271,283,291,292,331,338,396,403],rang:[4,14,67,91,97,98,99,100,170,171,172,173,174,175,176,177,203,204,215,216,330,374,375,404],rank:[1,2,3,4,5,6,7,8,9,10,11,14,21,22,24,30,31,35,37,42,44,45,47,49,51,92,93,94,95,96,97,98,99,100,101,113,114,115,118,119,122,126,127,130,133,135,139,142,143,144,145,146,147,148,158,160,161,164,168,223,225,226,239,241,242,243,244,245,246,247,248,251,252,254,256,257,259,262,263,264,265,271,282,285,286,290,291,293,299,300,303,313,317,321,395,396,403,404,406,407],rare:[11,404],rate:406,rather:[37,42,43,49,92,404,406],ratio:[22,24,26,27,35,37,49,406],raw:[8,331],re:[15,170,191,208,291,293,324,403],reach:0,read:[2,3,6,7,8,10,11,13,14,20,21,22,37,46,47,49,170,178,179,199,205,207,211,212,293,295,298,299,300,301,302,303,304,312,315,318,319,325,327,328,330,331,353,354,355,358,368,371,396,403,404,406],read_chunk:[8,9,11,21,37,46,47,48,49,286,305,321,406],read_chunk_aspect_ratio:[37,49],read_chunk_aspect_ratio_soft_constraint:[37,49],read_chunk_el:[9,37,48,49],read_chunk_elements_soft_constraint:[37,49],read_chunk_shap:[9,37,47,49,403],read_chunk_shape_soft_constraint:[37,49],read_chunk_templ:[21,47,51],read_context:403,read_funct:403,read_futur:405,read_param:403,readabl:[293,319],reader:[16,331],readi:[108,111,203,330,339],readm:15,readresult:[170,178,179,180,181,182,205,207,212],real:[246,263,291,396,403,407],rebuild:15,receiv:[14,17,108,111],recent:[0,92,106,117,198,199,201,207,237,245,404],recheck:[6,7,8,9,11],recheck_cached_data:[6,7,8,9,11,405],recheck_cached_metadata:[6,8,9,11],recommend:[9,15,300,301,302,303,315,327,341,404,406],recomput:403,record:[198,201,203,212],rectangular:[3,9,14],recurs:406,reduc:[15,299],refer:[0,4,5,6,7,8,9,11,12,13,15,16,17,18,19,92,191,208,291,324,330,404,406,407],reflect:[207,298,308,318,330,358],regardless:[6,7,8,9,11,404],region:[3,9,14,404,405],regist:[11,102,104,110],regular:[21,22,330,331,404,406],rel:[9,100,203,404,406],relat:[15,17,397,402],relationship:14,reli:407,relianc:16,remain:[8,11,14,92,99,191,205,291,340,347,404,406],remot:[0,12,13],remov:93,remove_done_callback:[102,110,358,366],reorder:100,replac:[191,291,404],repo:15,repositori:15,repres:[8,9,11,14,19,20,67,112,139,213,235,318,330,341,404,406,407],represent:[14,16,17,18,19,20,21,22,25,34,38,48,52,53,54,55,56,57,58,59,60,63,77,78,121,123,138,148,149,167,185,186,190,192,200,210,241,247,248,262,267,272,273,289,341,344,352,378,404,406,407],request:[17,102,105,207,353,354,403],requestor:17,requir:[1,2,3,4,5,6,7,8,9,10,11,16,17,18,19,119,146,318,396,405,406,407],reserv:14,resiz:[8,9,11,14,67,84,85],resolut:[8,9,277,396,405,406],resolv:[103,112,204,207,212,293,320,404],resourc:[0,1,2,3,4,5,6,7,8,9,10,11,13,16,17,18,19,20,55,56,57,61,62,191,205,208,267,273,291,324,396,403,407],respect:[3,9,24,35,67,93,96,330,404],restrict:204,result:[8,9,10,11,13,14,15,20,92,93,94,101,102,103,108,109,111,112,114,142,145,168,170,178,179,191,198,199,201,204,207,208,235,237,238,242,264,268,291,292,295,296,298,300,301,302,303,315,318,324,326,327,330,331,338,339,358,367,403,404,405,406],retain:[24,35,100,208,324,404,406],retain_context:[170,208,324],retri:17,retriev:[17,55,61,405],revalid:[6,7,8,9,11],revers:[100,139,140,239,240,265,266,293,294],rewrit:9,rfc:7,right:[14,17,114,142],rightarrow:14,roll:331,root:16,round:[3,9,14,404],row:[37,42,49,318,406],rs1:16,rtf:15,rule:[14,15],run:[17,103,108,111,403],runtim:[12,17],rw:312,s:[8,10,12,15,20,390,391,392,393,404,407],safe:[13,16,17,330],same:[0,7,8,9,10,11,14,15,19,62,94,96,97,98,99,191,208,291,306,311,321,324,330,331,358,403,404,405,406],satisfi:[9,318,404],satur:13,save:12,scalar:[92,96,97,98,99,300,302,303,315,327,330,369,378,379,404],scale:[9,252],scale_index:[9,396,405],scale_metadata:[9,396,405],scheama:10,schema:[1,2,3,4,5,6,7,13,14,20,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,286,291,293,321,396,403,407],scheme:[16,17,18,19],script:15,sdist:15,sdk:17,se_curl:[12,15],second:[6,14,108,111,193,197,207],section:[12,13,17],secur:[12,17],segment:[396,405,406],sel:404,select:[1,2,3,4,5,6,7,20,83,88,91,92,93,94,96,97,98,99,100,113,117,125,131,252,374,375,407],self:[23,34,35,36,47,48,49,51,54,57,60,61,68,69,70,75,76,77,78,80,81,83,86,87,88,90,92,94,95,96,97,98,99,100,101,104,105,106,107,108,109,110,111,114,115,116,117,118,122,123,125,131,138,140,141,142,143,144,145,149,161,162,165,166,167,168,172,174,184,186,187,188,190,191,194,198,199,200,201,202,203,204,207,208,211,212,224,225,227,229,237,238,240,241,242,243,244,245,248,251,257,258,260,261,262,263,264,266,267,268,269,270,271,273,276,283,284,287,288,289,291,292,294,295,296,297,298,299,300,301,302,303,304,310,314,315,316,317,318,320,322,323,324,326,327,328,330,333,336,338,342,348,349,352,359,360,361,364,365,366,367,379,384],semant:[16,91,92,95,101,139,144,161,168,239,244,257,264,265,270,283,292,293,298,302,314,315,326,327,374,404],separ:[0,6,7,8,11,12,15,17,184,198,199,201,207,212,295,330,404,407],sequenc:[10,24,35,37,49,91,92,94,96,97,98,99,114,117,119,120,139,141,142,146,147,246,263,291,374,375,396,403,404],serial:14,serv:[9,114,142,252,403,406],server:[12,17],servic:17,set:[3,9,10,12,15,17,19,20,37,49,91,94,96,170,207,246,263,291,324,374,396,403,404],set_except:[235,237],set_result:[235,238],setup:[13,15],sever:[15,102],sha256:15,shape:[14,21,22,24,26,27,32,33,35,37,47,49,51,113,119,122,124,125,126,127,128,129,130,131,132,133,134,135,136,137,139,146,159,165,239,242,243,244,245,246,253,257,260,263,264,265,278,286,287,291,293,295,296,297,298,299,300,301,302,303,305,306,307,308,309,310,311,314,315,318,321,322,324,326,327,330,396,403,404,406],shape_soft_constraint:[22,24,33,35,37,48,49,406],shard:[396,405,406],shard_bit:[9,396,405],shard_data_encod:9,shardingspec:9,share:[0,13,16,17,20,55,62,191,205,208,291,324,396,403],shift:[91,97,98,374],shlex:15,shortcut:404,shorthand:[302,303],should:[6,7,8,9,11,12,15,17,18,19,103,330,356,357,403,406],show:15,shuffl:[8,11,293,296,297,298,299,306,314,321,324,326,396,406],sign:[14,20,390,391,392,393,407],signal:235,signific:330,silent:404,similar:[14,95,96,101,161,168,257,264,283,292,314,315,326,327,404],simpler:3,simplest:15,simpli:[93,103,137,358,403,404],simultan:15,sinc:[6,14,92,108,111,130,193,197,207,403,404,405],singl:[7,8,9,11,12,14,20,92,100,113,116,170,198,199,201,204,207,212,213,216,246,252,263,273,291,307,341,387,396,403,404,405,406,407],single_input_dimens:[14,227,233],singleton:[20,93,395],size:[0,8,9,11,14,15,24,35,67,73,76,77,79,83,88,90,113,119,137,139,146,166,239,261,265,288,293,323,330,396,403,405,406],skip:[15,324,353,354,404],slice:[92,96,113,114,130,139,142,404,405],slower:[8,11],slowest:[8,11],small:[1,9],smallest:[3,9,11],snappi:[8,11,15],so:[15,405],soft:[0,1,2,3,4,5,6,7,8,9,11,21,22,24,27,29,33,35,37,41,42,43,47,49,51,406,407],sole:92,some:[8,14,331,341,406],sourc:[14,15,293,300,301,302,303,315,327,330,358,368],space:[15,20,21,45,92,93,94,95,96,97,98,99,100,101,113,135,139,142,143,144,145,146,147,148,158,160,161,164,168,246,263,290,291,395,396,403,404,406],spec:[13,55,58,59,60,62,63,64,66,92,169,170,183,184,185,186,187,188,189,190,191,192,205,206,208,241,242,254,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,306,324,376,396],special:[0,9,14,15,17,20,80,81,86,87,92,173,176,389,404,406],specif:[0,1,2,3,4,5,6,7,8,11,15,16,17,18,19,20,52,55,58,59,170,183,191,192,193,196,208,210,265,274,275,277,278,280,286,291,324,341,396,406,407],specifi:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,24,35,37,42,43,47,49,51,52,67,71,72,73,91,92,96,97,98,99,100,101,103,108,111,113,114,116,117,119,130,142,146,147,168,170,171,173,178,191,193,198,201,203,204,205,207,208,212,235,237,238,239,246,249,250,252,255,263,264,274,275,277,278,280,281,286,291,292,293,304,318,324,326,327,330,341,345,348,349,353,355,356,357,371,374,395,396,403,404,406,407],split:15,squar:404,ssl:[12,15,17],sslkeylogfil:12,stack:[6,15,407],stage:[20,331],staic:10,staleness_bound:[207,353,355],stamp:[170,178,179,180,205,207,212],standard:[11,15],start:[3,15,20,92,100,102,116,204,331,337,340,374,403,404],startup:15,state:[170,178,179,181,205,207,212],stderr:12,step:[14,92,330,404],still:[7,9,11,14,115,118,331,340,403,404],stop:[92,404],storag:[4,5,7,8,9,11,13,17,20,21,37,42,43,49,170,193,194,195,212,265,281,291,293,311,321,330,331,358,396,406],store:[7,8,9,11,12,14,18,20,170,183,184,187,188,189,192,193,196,198,199,201,202,203,204,205,206,207,208,209,210,211,212,252,265,281,291,293,304,305,306,307,310,311,321,330,331,341,371,396,403,405,406],str:[20,55,61,67,71,72,73,74,77,78,89,91,94,113,116,119,123,132,139,146,149,156,170,171,173,176,177,179,183,184,186,187,189,192,193,195,198,199,200,201,206,207,210,212,227,229,232,239,246,248,263,265,273,291,293,312,341,343,346,347,350,374,378,381,382,384,396,402,403,404],strictli:[114,142],stride:[3,14,91,96,146,148,167,213,215,216,222,374,404],string:[0,3,6,7,8,9,11,13,14,16,17,18,19,20,77,78,89,123,149,171,173,176,177,186,196,200,248,273,304,341,347,397,402,406,407],strip:[204,347,406],strip_context:[191,291,324],strip_prefix:15,strip_prefix_length:204,strong:13,studio:15,style:[17,18,19,91,92,95,96,101,130,139,144,161,168,239,244,245,257,264,265,270,271,283,292,293,298,302,314,315,326,327,374],sub:[7,15,405],subarrai:11,subdivid:406,subject:[293,320,358],subscript:[300,301,302,303,315,327,404,405],subsequ:[10,92,330,358,396,403,404],subset:[14,15,102,113,117,404],subtyp:[6,8,11,18,406,407],succe:14,success:[111,199,336,338],successfulli:[108,235,238,330,339,358],suffic:14,suffici:404,suffix:[183,184],suitabl:[1,2,3,4,5,6,7,8,9,11,15,396,406,407],sum:404,suppli:405,support:[0,2,3,6,7,8,9,10,13,14,15,16,17,18,19,91,102,130,169,170,198,201,203,212,252,293,302,319,329,331,369,404,405,406,407],surviv:330,synchron:[102,198,199,201,293,295,300,301,302,303,315,318,327,330,331,338,403,405],syntax:[0,7,16,17,19,300,301,302,303,315,327,341,404,406],system:[12,15,17,18,330],t:[15,112,139,140,191,205,239,240,265,266,291,293,294,403],tabl:[14,19],take:[9,12,13,37,49,246,263,291,396,403,404,406],taken:[9,10,47,51,70,406],target:[14,22,24,28,29,35,37,49,91,100,374,406],temporari:[9,15],tensoprstor:12,tensorflow:[11,369],tensorstor:[0,1,2,3,4,5,6,7,12,14,15,17,18,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,397,398,399,400,401,402,403,404,405,406,407],tensorstore_bazel_build_opt:15,tensorstore_bazel_compilation_mod:15,tensorstore_bazel_startup_opt:15,tensorstore_bazelisk:15,tensorstore_ca_bundl:12,tensorstore_ca_path:12,tensorstore_curl_verbos:12,tensorstore_gcs_http_url:[12,17],tensorstore_prebuilt_dir:15,tensorstore_system_lib:[12,15],term:[92,95,101,161,168,257,264,283,292,302,314,315,326,327,404],termin:[397,402],test:[19,102],th:[92,114,142,404],than:[0,6,7,8,9,11,14,15,37,42,43,49,92,117,207,353,355,403,404,406],thei:[8,10,19,60,115,118,397,402,403,404],them:330,therefor:[9,12],thi:[0,1,3,6,7,8,9,11,12,14,15,16,17,18,37,49,55,61,62,65,66,90,95,101,102,109,113,114,118,130,137,139,140,142,143,145,161,162,165,166,168,170,198,199,201,203,204,207,209,211,212,240,246,249,257,258,260,261,263,264,266,271,274,275,277,278,280,283,284,286,287,288,291,292,293,294,295,298,299,302,303,306,311,314,315,316,317,321,322,323,326,327,328,330,331,341,345,348,349,350,358,378,379,396,403,404,405,406],third:406,those:[102,299],though:[115,118,403],thread:[0,102,103,108,111,198,199,201,295,318,403],three:[9,14,114,142,406],through:[13,14,17,18,139],throughput:13,tie:3,time:[6,7,8,9,11,14,193,195,197,207,403,406],timedelta:11,timeout:[102,108,111,358,365,367],timeouterror:[108,111],timestamp:[170,178,180,193,194,403],timestampedstoragegener:[170,178,179,180,193,194,195,196,197,205,207,212,403],tl:15,tmp:[15,16,184,185,186,187,188,189,190,200,202,331,405],to_json:[21,22,34,48,52,54,56,57,58,60,65,113,138,139,167,183,190,239,262,265,289,341,352,378,384],togeth:11,tool:15,top:[2,405,406],total:[0,113,137,139,166,239,261,265,288,293,323],total_bytes_limit:[0,6,8,9,11,57,61,63,65,66,403,405],toward:404,traceback:[92,106,117,198,199,201,207,237,245,404],track:330,traffic:12,trail:[347,406],transact:[13,19,20,198,201,203,204,205,207,209,211,212,300,301,302,303,311,315,318,325,327,328,331,332,333,334,335,336,337,338,339,340,358,396],transform:[1,2,3,4,5,6,7,8,9,10,11,13,20,92,93,94,95,96,97,98,99,100,101,102,113,115,118,139,141,142,143,144,145,146,147,148,150,151,152,153,154,155,156,157,158,159,160,161,164,167,168,213,214,215,216,223,239,242,243,244,245,246,257,263,264,265,268,269,270,271,283,289,290,291,292,293,296,297,298,299,300,301,303,304,308,314,324,326,371,395,396,403,405,407],translat:[3,8,11,14,91,97,98,99,374,404],translate_backward_bi:[91,97,374],translate_bi:[91,92,94,98,115,141,143,289,290,374],translate_to:[91,99,374],transpos:[91,93,100,139,140,239,240,265,266,293,294,374,404],treat:[103,207,404,406],tree:15,trip:14,truncat:404,trust:12,ts:[8,9,10,11,44,45,47,48,51,57,61,62,63,65,66,67,68,69,70,71,72,73,74,75,77,78,80,81,82,83,84,85,86,87,88,89,90,92,93,94,95,96,97,98,99,100,101,102,103,106,114,115,116,117,118,119,120,121,122,124,125,126,127,128,129,130,131,132,133,134,135,136,137,140,141,142,143,144,145,146,147,148,150,151,152,153,154,155,156,157,158,159,160,161,164,167,168,170,175,184,185,186,187,188,189,190,191,192,198,199,200,201,202,203,204,205,206,207,208,210,211,212,214,215,216,235,237,238,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,259,262,263,264,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,285,286,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,313,314,315,317,318,321,324,326,327,330,331,342,343,344,345,346,347,348,349,350,351,352,371,375,389,395,396,403,404,405],tupl:[21,22,26,27,32,33,40,41,42,43,113,124,126,127,128,129,130,132,134,136,139,141,151,152,153,154,155,156,157,159,162,165,235,236,239,246,252,258,260,263,265,277,284,287,291,293,307,316,322,341,346,396,403,404],turbo:15,tutori:13,two:[7,14,20,21,22,23,36,193,194,330,331,341,342,358,390,391,392,393,404,406,407],txn:[170,211,302,330,331],type:[0,1,2,3,6,7,10,13,61,102,112,139,169,239,246,254,263,265,279,291,296,297,300,302,303,304,309,310,315,327,330,331,341,368,369,370,371,378,379,380,385,386,387,388,390,391,392,393,394,396,397,400,402,403,404,405,406,407],u1:11,u2:[11,278,286],u4:[293,298,299,314,324,326],u8:11,u:[350,351],udunits2:[341,406],uint16:[8,9,11,20,276,286,331,398,407],uint32:[8,9,11,20,102,293,295,296,297,298,299,300,301,302,303,304,306,307,308,309,310,311,314,315,318,321,324,326,327,330,371,399,403,405,407],uint64:[8,9,11,20,396,400,405,407],uint8:[4,5,8,9,11,20,246,247,248,251,254,259,262,263,276,279,401,407],um:277,unbind_context:[183,191,208,291,324],unbound:[10,14,20,47,51,67,74,80,81,86,87,90,119,146,191,291,389],unchang:[96,97,98,99,191,205,291,404],unchunk:9,uncommit:[318,330,331],uncondition:[101,168,264,292,326,327,404],unconstrain:[252,396],under:[2,6,11,16,404],underli:[4,5,6,7,8,9,10,11,13,14,18,139,265,281,291,293,311,330,331,358,396,406],unequ:404,unicod:[20,402,407],uniform:[3,13,406],uniqu:[14,62,403],unit:[10,20,239,246,252,263,265,277,291,293,307,341,342,343,344,345,346,347,348,349,350,351,352,396,403],unix:[6,17,18,19,108,111,193,197,207],unknown:[14,246,252,263,291,306,307,310,396,403,406],unlabel:[8,14,67,89,119,146,406],unless:[9,17,341,404,406],unlik:[92,102,404],unmatch:14,unmodifi:403,unpickl:403,unregist:[102,110],unset:10,unshar:[396,403],unshard:406,unsign:[20,398,399,400,401,407],unspecifi:[3,8,9,11,14,22,31,37,47,49,51,178,179,181,196,204,207,239,253,254,259,265,279,285,290,403,404,406],unsuccessfulli:[105,111,235,237],until:[102,108,111,198,199,201,203,212,331,340,358,403,404],unus:[4,5],up:[9,15,17,406],updat:[9,21,22,35,49,183,191,239,241,249,250,251,252,253,255,259,263,265,267,273,276,291,293,320,324],upon:[102,104,404],upper:[8,11,14,67,71,72,73,74,80,85,86,93,113,119,124,127,128,130,139,146,152,153,154,171,173,176,404],url:[13,15,16,17,18,19,170,183,185,192,205,210],us:[0,1,3,6,7,8,9,10,11,12,13,14,15,16,17,19,20,21,39,61,62,67,91,92,96,97,98,99,102,103,109,112,113,115,118,130,139,170,184,191,205,207,208,211,235,239,242,243,244,245,257,264,265,268,269,270,271,281,283,291,292,293,296,297,298,299,300,301,302,303,306,311,314,315,318,321,324,325,326,327,328,330,331,336,340,341,347,353,356,358,368,374,394,395,396,397,402,403,404,405,406],usag:331,user:16,usezlib:[8,406],ustr:[20,402,407],usual:[173,177,404],utf:407,util:15,v1:[14,396,405],v2:14,v3:14,v4:14,valid:[0,8,14,37,49,92,96,193,197,207,404,406],valu:[0,1,3,6,7,10,12,13,14,20,37,49,60,67,70,80,81,86,87,90,92,96,102,112,117,170,178,179,180,181,182,183,184,187,188,189,191,192,193,196,198,199,201,202,203,204,205,206,207,208,209,210,211,212,227,228,234,239,246,252,255,263,265,280,281,291,293,307,310,311,324,330,341,345,394,396,403,404,405,406,407],valueerror:[47,51,75,117,130,204,242,243,244,245,257,264,268,269,270,271,283,292],variabl:[15,17,20,397,402],varieti:18,varlength:8,vector:[14,91,92,101,113,119,139,141,146,168,239,264,265,292,293,326,327,374],verbos:[12,404],veri:[9,115,118],verifi:17,version:[3,12,15,193,196,403,404],via:[1,3,8,9,10,11,13,42,43,404],view:[2,3,13,139,140,170,211,223,239,240,265,266,293,294,296,297,298,299,304,314,326,328,371,376,377,403,404,405],vindex:[91,92,101,139,144,168,239,244,245,257,264,265,270,271,283,292,293,298,299,302,303,314,315,326,327,374],virtual:[2,3,13,15,139,293,296,297,298,299,314,326,376,377,403],virtual_chunk:[20,353,356,403],virtualchunkedreadparamet:[20,353,354,355,403],virtualchunkedwriteparamet:[20,356,357,403],visibl:331,visual:15,volum:9,voxel:[9,406],voxel_offset:[9,396,405],vv:15,w:[14,312],wa:[6,12,55,66,108,111,205,207,249,336,396,403,405],wai:[0,8,9,11,13,15,403,406],wait:[102,330,403,405],well:[9,10,11,92,369,396],were:404,what:6,wheel:15,when:[0,1,2,3,4,5,6,7,10,14,15,92,103,109,203,207,252,300,301,302,303,315,318,327,330,339,358,403,404,406,407],where:[0,3,9,10,12,14,20,92,95,101,112,114,130,142,144,146,148,161,168,246,263,291,396,403,404,406,407],wherebi:404,whether:[60,71,72,73,74,92,102,106,107,113,119,126,127,139,146,151,152,324,331,334,335,337,340,404],which:[0,2,3,6,7,8,9,10,11,12,13,14,15,17,19,47,51,55,63,64,65,66,67,96,97,98,99,103,113,139,193,197,207,249,299,330,336,341,350,358,368,374,403,404,405,406],whitespac:[347,406],wide:16,window:[12,15,16],wireshark:12,wise:[2,8,11,20,403],wish:403,with_transact:[170,205,211,293,302,328,330,331,396,403],within:[0,3,6,7,8,9,11,14,17,18,19,21,37,42,49,108,111,170,183,189,204,206,207,293,318,403,404,406],without:[8,14,17,91,97,98,99,184,198,199,201,205,207,212,330,331,374,396,403,404,405,406],won:[191,205,291],work:[15,17],workspac:15,worst:[8,9],would:[94,130],writabl:[293,329],write:[2,6,7,8,10,11,13,14,17,20,21,22,37,49,50,51,170,198,201,203,205,207,211,212,293,299,300,301,302,303,304,312,315,318,325,327,328,329,330,331,356,358,368,371,396,403,404,406],write_chunk:[8,9,11,21,37,48,49,50,51,286,305,321,406],write_chunk_aspect_ratio:[37,49],write_chunk_aspect_ratio_soft_constraint:[37,49],write_chunk_el:[9,37,49],write_chunk_elements_soft_constraint:[37,49],write_chunk_shap:[9,37,49,51],write_chunk_shape_soft_constraint:[37,48,49],write_chunk_templ:[21,47,51],write_context:403,write_funct:403,write_futur:405,writeback:[0,13,330,356,357],writefutur:[20,102,293,330,358,359,360,361,362,363,364,365,366,367],written:[11,15,20,246,263,291,293,310,330,396,403,405],x:[8,9,11,14,15,67,71,72,73,74,77,78,83,88,89,92,93,94,95,96,97,98,99,100,101,103,114,115,116,117,121,125,131,132,142,143,145,148,150,156,158,160,164,167,175,205,242,243,244,245,253,257,264,268,269,290,296,297,300,301,308,375,396,404,405],xcode:15,xre:9,xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx:15,xyz:9,xz:[8,15],y:[8,9,11,14,92,93,94,95,96,97,98,99,100,101,114,115,116,117,120,121,125,131,132,142,143,148,150,156,158,160,164,167,175,205,242,243,244,245,253,257,264,268,269,290,296,297,300,301,308,396,404,405],yet:[293,310,318],you:[6,8,9,11,12,15,17,62,330,396,403,405],your:15,yre:9,yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyi:15,z:[8,9,14,92,94,95,96,97,98,99,100,101,114,115,116,117,121,132,142,148,150,156,158,160,164,167,242,243,244,245,253,257,264,268,269,296,297,300,301,396,404,405],zarr:[2,3,6,13,250,268,269,270,271,274,275,278,280,283,286,292,293,295,298,299,302,303,305,306,309,310,314,315,318,321,324,326,327,330,396,404,406],zarr_format:[11,293,298,299,314,324,326,396],zarrai:11,zero:[6,8,9,11,14,67,79,92,93,119,146,246,263,291,396,403,404,406],zlib:[8,11,15],zre:9,zstd:[8,11,15]},titles:["Context framework","<code class=\"docutils literal notranslate\"><span class=\"pre\">array</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">cast</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">downsample</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">jpeg</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">png</span></code> Driver","Drivers","<code class=\"docutils literal notranslate\"><span class=\"pre\">json</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">n5</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">neuroglancer_precomputed</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">stack</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">zarr</span></code> Driver","Environment variables","TensorStore","Index space","Building and Installing","<code class=\"docutils literal notranslate\"><span class=\"pre\">file</span></code> Key-Value Store driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">gcs</span></code> Key-Value Store driver","Key-Value Storage Layer","<code class=\"docutils literal notranslate\"><span class=\"pre\">memory</span></code> Key-Value Store driver","API reference","tensorstore.ChunkLayout","tensorstore.ChunkLayout.Grid","tensorstore.ChunkLayout.Grid.__eq__","tensorstore.ChunkLayout.Grid.__init__(components)","tensorstore.ChunkLayout.Grid.__init__(json)","tensorstore.ChunkLayout.Grid.aspect_ratio","tensorstore.ChunkLayout.Grid.aspect_ratio_soft_constraint","tensorstore.ChunkLayout.Grid.elements","tensorstore.ChunkLayout.Grid.elements_soft_constraint","tensorstore.ChunkLayout.Grid.ndim","tensorstore.ChunkLayout.Grid.rank","tensorstore.ChunkLayout.Grid.shape","tensorstore.ChunkLayout.Grid.shape_soft_constraint","tensorstore.ChunkLayout.Grid.to_json","tensorstore.ChunkLayout.Grid.update","tensorstore.ChunkLayout.__eq__","tensorstore.ChunkLayout.__init__(components)","tensorstore.ChunkLayout.__init__(json)","tensorstore.ChunkLayout.codec_chunk","tensorstore.ChunkLayout.grid_origin","tensorstore.ChunkLayout.grid_origin_soft_constraint","tensorstore.ChunkLayout.inner_order","tensorstore.ChunkLayout.inner_order_soft_constraint","tensorstore.ChunkLayout.ndim","tensorstore.ChunkLayout.rank","tensorstore.ChunkLayout.read_chunk","tensorstore.ChunkLayout.read_chunk_template","tensorstore.ChunkLayout.to_json","tensorstore.ChunkLayout.update","tensorstore.ChunkLayout.write_chunk","tensorstore.ChunkLayout.write_chunk_template","tensorstore.CodecSpec","tensorstore.CodecSpec.__init__","tensorstore.CodecSpec.to_json","tensorstore.Context","tensorstore.Context.Resource","tensorstore.Context.Resource.to_json","tensorstore.Context.Spec","tensorstore.Context.Spec.__init__","tensorstore.Context.Spec.to_json","tensorstore.Context.__getitem__","tensorstore.Context.__init__(default)","tensorstore.Context.__init__(json)","tensorstore.Context.__init__(spec)","tensorstore.Context.parent","tensorstore.Context.spec","tensorstore.Dim","tensorstore.Dim.__contains__(dim)","tensorstore.Dim.__contains__(index)","tensorstore.Dim.__eq__","tensorstore.Dim.__init__(exclusive_max)","tensorstore.Dim.__init__(inclusive_max)","tensorstore.Dim.__init__(size)","tensorstore.Dim.__init__(unbounded)","tensorstore.Dim.__iter__","tensorstore.Dim.__len__","tensorstore.Dim.__repr__","tensorstore.Dim.__str__","tensorstore.Dim.empty","tensorstore.Dim.exclusive_max","tensorstore.Dim.exclusive_min","tensorstore.Dim.finite","tensorstore.Dim.hull","tensorstore.Dim.implicit_lower","tensorstore.Dim.implicit_upper","tensorstore.Dim.inclusive_max","tensorstore.Dim.inclusive_min","tensorstore.Dim.intersect","tensorstore.Dim.label","tensorstore.Dim.size","tensorstore.DimExpression","tensorstore.DimExpression.__getitem__","tensorstore.DimExpression.diagonal","tensorstore.DimExpression.label","tensorstore.DimExpression.oindex","tensorstore.DimExpression.stride","tensorstore.DimExpression.translate_backward_by","tensorstore.DimExpression.translate_by","tensorstore.DimExpression.translate_to","tensorstore.DimExpression.transpose","tensorstore.DimExpression.vindex","tensorstore.Future","tensorstore.Future.__new__","tensorstore.Future.add_done_callback","tensorstore.Future.cancel","tensorstore.Future.cancelled","tensorstore.Future.done","tensorstore.Future.exception","tensorstore.Future.force","tensorstore.Future.remove_done_callback","tensorstore.Future.result","tensorstore.FutureLike","tensorstore.IndexDomain","tensorstore.IndexDomain.__getitem__(domain)","tensorstore.IndexDomain.__getitem__(expr)","tensorstore.IndexDomain.__getitem__(identifier)","tensorstore.IndexDomain.__getitem__(selection)","tensorstore.IndexDomain.__getitem__(transform)","tensorstore.IndexDomain.__init__(components)","tensorstore.IndexDomain.__init__(dimensions)","tensorstore.IndexDomain.__init__(json)","tensorstore.IndexDomain.__len__","tensorstore.IndexDomain.__repr__","tensorstore.IndexDomain.exclusive_max","tensorstore.IndexDomain.hull","tensorstore.IndexDomain.implicit_lower_bounds","tensorstore.IndexDomain.implicit_upper_bounds","tensorstore.IndexDomain.inclusive_max","tensorstore.IndexDomain.inclusive_min","tensorstore.IndexDomain.index_exp","tensorstore.IndexDomain.intersect","tensorstore.IndexDomain.labels","tensorstore.IndexDomain.ndim","tensorstore.IndexDomain.origin","tensorstore.IndexDomain.rank","tensorstore.IndexDomain.shape","tensorstore.IndexDomain.size","tensorstore.IndexDomain.to_json","tensorstore.IndexTransform","tensorstore.IndexTransform.T","tensorstore.IndexTransform.__call__","tensorstore.IndexTransform.__getitem__(domain)","tensorstore.IndexTransform.__getitem__(expr)","tensorstore.IndexTransform.__getitem__(indices)","tensorstore.IndexTransform.__getitem__(transform)","tensorstore.IndexTransform.__init__(components)","tensorstore.IndexTransform.__init__(domain)","tensorstore.IndexTransform.__init__(json)","tensorstore.IndexTransform.__repr__","tensorstore.IndexTransform.domain","tensorstore.IndexTransform.implicit_lower_bounds","tensorstore.IndexTransform.implicit_upper_bounds","tensorstore.IndexTransform.input_exclusive_max","tensorstore.IndexTransform.input_inclusive_max","tensorstore.IndexTransform.input_inclusive_min","tensorstore.IndexTransform.input_labels","tensorstore.IndexTransform.input_origin","tensorstore.IndexTransform.input_rank","tensorstore.IndexTransform.input_shape","tensorstore.IndexTransform.ndim","tensorstore.IndexTransform.oindex","tensorstore.IndexTransform.origin","tensorstore.IndexTransform.output","tensorstore.IndexTransform.output_rank","tensorstore.IndexTransform.shape","tensorstore.IndexTransform.size","tensorstore.IndexTransform.to_json","tensorstore.IndexTransform.vindex","tensorstore.Indexable","tensorstore.KvStore","tensorstore.KvStore.KeyRange","tensorstore.KvStore.KeyRange.__eq__","tensorstore.KvStore.KeyRange.__init__","tensorstore.KvStore.KeyRange.copy","tensorstore.KvStore.KeyRange.empty","tensorstore.KvStore.KeyRange.exclusive_max","tensorstore.KvStore.KeyRange.inclusive_min","tensorstore.KvStore.ReadResult","tensorstore.KvStore.ReadResult.__init__","tensorstore.KvStore.ReadResult.stamp","tensorstore.KvStore.ReadResult.state","tensorstore.KvStore.ReadResult.value","tensorstore.KvStore.Spec","tensorstore.KvStore.Spec.__add__","tensorstore.KvStore.Spec.__new__","tensorstore.KvStore.Spec.__repr__","tensorstore.KvStore.Spec.__truediv__","tensorstore.KvStore.Spec.copy","tensorstore.KvStore.Spec.path","tensorstore.KvStore.Spec.to_json","tensorstore.KvStore.Spec.update","tensorstore.KvStore.Spec.url","tensorstore.KvStore.TimestampedStorageGeneration","tensorstore.KvStore.TimestampedStorageGeneration.__eq__","tensorstore.KvStore.TimestampedStorageGeneration.__init__","tensorstore.KvStore.TimestampedStorageGeneration.generation","tensorstore.KvStore.TimestampedStorageGeneration.time","tensorstore.KvStore.__delitem__","tensorstore.KvStore.__getitem__","tensorstore.KvStore.__repr__","tensorstore.KvStore.__setitem__","tensorstore.KvStore.copy","tensorstore.KvStore.delete_range","tensorstore.KvStore.list","tensorstore.KvStore.open","tensorstore.KvStore.path","tensorstore.KvStore.read","tensorstore.KvStore.spec","tensorstore.KvStore.transaction","tensorstore.KvStore.url","tensorstore.KvStore.with_transaction","tensorstore.KvStore.write","tensorstore.OutputIndexMap","tensorstore.OutputIndexMap.__init__(constant)","tensorstore.OutputIndexMap.__init__(index_array)","tensorstore.OutputIndexMap.__init__(input_dimension)","tensorstore.OutputIndexMap.index_array","tensorstore.OutputIndexMap.index_range","tensorstore.OutputIndexMap.input_dimension","tensorstore.OutputIndexMap.method","tensorstore.OutputIndexMap.offset","tensorstore.OutputIndexMap.stride","tensorstore.OutputIndexMaps","tensorstore.OutputIndexMaps.__getitem__","tensorstore.OutputIndexMaps.__len__","tensorstore.OutputIndexMaps.rank","tensorstore.OutputIndexMethod","tensorstore.OutputIndexMethod.__init__","tensorstore.OutputIndexMethod.__str__","tensorstore.OutputIndexMethod.array","tensorstore.OutputIndexMethod.constant","tensorstore.OutputIndexMethod.name","tensorstore.OutputIndexMethod.single_input_dimension","tensorstore.OutputIndexMethod.value","tensorstore.Promise","tensorstore.Promise.new","tensorstore.Promise.set_exception","tensorstore.Promise.set_result","tensorstore.Schema","tensorstore.Schema.T","tensorstore.Schema.__eq__","tensorstore.Schema.__getitem__(domain)","tensorstore.Schema.__getitem__(expr)","tensorstore.Schema.__getitem__(indices)","tensorstore.Schema.__getitem__(transform)","tensorstore.Schema.__init__(components)","tensorstore.Schema.__init__(json)","tensorstore.Schema.__repr__","tensorstore.Schema.chunk_layout","tensorstore.Schema.codec","tensorstore.Schema.copy","tensorstore.Schema.dimension_units","tensorstore.Schema.domain","tensorstore.Schema.dtype","tensorstore.Schema.fill_value","tensorstore.Schema.ndim","tensorstore.Schema.oindex","tensorstore.Schema.origin","tensorstore.Schema.rank","tensorstore.Schema.shape","tensorstore.Schema.size","tensorstore.Schema.to_json","tensorstore.Schema.update","tensorstore.Schema.vindex","tensorstore.Spec","tensorstore.Spec.T","tensorstore.Spec.__eq__","tensorstore.Spec.__getitem__(domain)","tensorstore.Spec.__getitem__(expr)","tensorstore.Spec.__getitem__(indices)","tensorstore.Spec.__getitem__(transform)","tensorstore.Spec.__new__","tensorstore.Spec.__repr__","tensorstore.Spec.chunk_layout","tensorstore.Spec.codec","tensorstore.Spec.copy","tensorstore.Spec.dimension_units","tensorstore.Spec.domain","tensorstore.Spec.dtype","tensorstore.Spec.fill_value","tensorstore.Spec.kvstore","tensorstore.Spec.ndim","tensorstore.Spec.oindex","tensorstore.Spec.origin","tensorstore.Spec.rank","tensorstore.Spec.schema","tensorstore.Spec.shape","tensorstore.Spec.size","tensorstore.Spec.to_json","tensorstore.Spec.transform","tensorstore.Spec.update","tensorstore.Spec.vindex","tensorstore.TensorStore","tensorstore.TensorStore.T","tensorstore.TensorStore.__array__","tensorstore.TensorStore.__getitem__(domain)","tensorstore.TensorStore.__getitem__(expr)","tensorstore.TensorStore.__getitem__(indices)","tensorstore.TensorStore.__getitem__(transform)","tensorstore.TensorStore.__setitem__(domain)","tensorstore.TensorStore.__setitem__(expr)","tensorstore.TensorStore.__setitem__(indices)","tensorstore.TensorStore.__setitem__(transform)","tensorstore.TensorStore.astype","tensorstore.TensorStore.chunk_layout","tensorstore.TensorStore.codec","tensorstore.TensorStore.dimension_units","tensorstore.TensorStore.domain","tensorstore.TensorStore.dtype","tensorstore.TensorStore.fill_value","tensorstore.TensorStore.kvstore","tensorstore.TensorStore.mode","tensorstore.TensorStore.ndim","tensorstore.TensorStore.oindex","tensorstore.TensorStore.oindex.__setitem__","tensorstore.TensorStore.origin","tensorstore.TensorStore.rank","tensorstore.TensorStore.read","tensorstore.TensorStore.readable","tensorstore.TensorStore.resolve","tensorstore.TensorStore.schema","tensorstore.TensorStore.shape","tensorstore.TensorStore.size","tensorstore.TensorStore.spec","tensorstore.TensorStore.transaction","tensorstore.TensorStore.vindex","tensorstore.TensorStore.vindex.__setitem__","tensorstore.TensorStore.with_transaction","tensorstore.TensorStore.writable","tensorstore.TensorStore.write","tensorstore.Transaction","tensorstore.Transaction.__init__","tensorstore.Transaction.abort","tensorstore.Transaction.aborted","tensorstore.Transaction.atomic","tensorstore.Transaction.commit_async","tensorstore.Transaction.commit_started","tensorstore.Transaction.commit_sync","tensorstore.Transaction.future","tensorstore.Transaction.open","tensorstore.Unit","tensorstore.Unit.__eq__","tensorstore.Unit.__init__(components)","tensorstore.Unit.__init__(json)","tensorstore.Unit.__init__(multiplier)","tensorstore.Unit.__init__(pair)","tensorstore.Unit.__init__(unit)","tensorstore.Unit.__mul__","tensorstore.Unit.__truediv__","tensorstore.Unit.base_unit","tensorstore.Unit.multiplier","tensorstore.Unit.to_json","tensorstore.VirtualChunkedReadParameters","tensorstore.VirtualChunkedReadParameters.if_not_equal","tensorstore.VirtualChunkedReadParameters.staleness_bound","tensorstore.VirtualChunkedWriteParameters","tensorstore.VirtualChunkedWriteParameters.if_equal","tensorstore.WriteFutures","tensorstore.WriteFutures.add_done_callback","tensorstore.WriteFutures.cancel","tensorstore.WriteFutures.cancelled","tensorstore.WriteFutures.commit","tensorstore.WriteFutures.copy","tensorstore.WriteFutures.done","tensorstore.WriteFutures.exception","tensorstore.WriteFutures.remove_done_callback","tensorstore.WriteFutures.result","tensorstore.array","tensorstore.bfloat16","tensorstore.bool","tensorstore.cast","tensorstore.complex128","tensorstore.complex64","tensorstore.d","tensorstore.d.__class_getitem__","tensorstore.downsample(spec)","tensorstore.downsample(store)","tensorstore.dtype","tensorstore.dtype.__call__","tensorstore.dtype.__init__(dtype)","tensorstore.dtype.__init__(name)","tensorstore.dtype.name","tensorstore.dtype.numpy_dtype","tensorstore.dtype.to_json","tensorstore.dtype.type","tensorstore.float16","tensorstore.float32","tensorstore.float64","tensorstore.inf","tensorstore.int16","tensorstore.int32","tensorstore.int64","tensorstore.int8","tensorstore.json","tensorstore.newaxis","tensorstore.open","tensorstore.string","tensorstore.uint16","tensorstore.uint32","tensorstore.uint64","tensorstore.uint8","tensorstore.ustring","tensorstore.virtual_chunked","Indexing","Tutorial","Schema","JSON Spec"],titleterms:{"boolean":[92,404],"class":[21,55,170,406],"new":[8,9,11,396],"public":[22,52,67,102,178,213,223,227,235,353,356,358,378],accessor:[21,55,56,58,67,102,113,139,170,171,183,193,239,265,293,331,341],ad:[92,404],align:14,all:[114,142],an:396,api:[15,20],arithmet:341,arrai:[1,8,9,11,92,404],aspect:[8,11],asynchron:20,authent:17,block:102,broadcast:14,build:15,c:[11,15],ca:[12,17],cach:403,callback:102,cast:2,certif:[12,17],checkout:15,chunk:[6,8,9,11,21,406],cloud:12,codec:[8,9,11,406],compar:404,comparison:[21,22,171,193,239,265,341],compress:[8,9],compressor:11,concept:13,configur:12,constraint:[8,9,11],construct:404,constructor:[21,22,52,55,58,67,102,113,139,170,171,178,183,193,213,227,235,239,265,331,341,374,378],context:0,core:20,creat:[8,9,11,396],credenti:12,data:[8,9,11,20,293],dataset:405,debug:12,depend:15,develop:15,differ:404,dimens:[8,9,92,114,142,404,406],document:15,domain:[8,9,11,14],downsampl:3,driver:[1,2,3,4,5,6,7,8,9,10,11,16,17,18,19],element:[8,11],ellipsi:[92,404],encod:9,environ:12,error:92,exampl:[0,1,2,3,4,5,6,7,8,9,10,11,14,16,17,19,44,45,47,48,51,57,61,62,63,65,66,67,68,69,71,72,73,74,75,80,81,82,83,84,85,86,87,88,89,90,92,93,94,95,96,97,98,99,101,103,106,114,115,116,117,118,119,120,121,122,124,125,126,127,128,129,130,131,132,133,134,135,136,137,141,142,143,144,145,146,147,148,150,151,152,153,154,155,156,157,158,159,160,161,164,167,168,170,175,184,186,187,188,189,190,191,192,198,199,200,201,202,203,204,206,207,208,210,211,212,214,215,216,237,238,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,259,262,263,264,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,285,286,289,290,291,292,293,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,313,317,318,321,324,330,342,343,344,345,346,347,348,349,350,351,352,371,375,389,395,396,406],exist:396,explicit:[8,9,11],express:404,file:[6,16],fill:[8,9,11],flyem:405,fortran:11,framework:0,from:15,fulli:[114,142],gc:17,geometr:113,get:13,googl:12,hemibrain:405,highlight:13,http:12,i:[170,293],index:[14,20,92,113,139,239,265,293,404],instal:15,integ:[92,404],interfac:102,interv:[92,404],ipython:15,janelia:405,jpeg:4,json:[7,9,407],kei:[16,17,18,19],label:[114,142],layer:[10,18],layout:[8,9,11,406],librari:15,limit:[8,9,11,16],local:[15,405],map:[8,9,11],member:[22,52,67,102,178,213,223,227,235,353,356,358,378],memori:19,method:14,mix:[114,142],mode:404,mutat:[183,239,265],n5:[8,405],neuroglancer_precomput:9,non:330,numpi:404,o:[170,293],oindex:404,open:396,oper:[21,22,67,91,113,171,183,193,239,265,331,341,374],order:11,outer:404,output:14,packag:15,parti:15,pickl:403,png:5,proxi:12,publish:15,pypi:15,python:15,ratio:[8,11],raw:9,read:[9,405],refer:20,represent:[67,113,139,170,183,227,239,265],request:12,requir:15,run:15,scalar:11,schema:[8,9,10,11,406],segment:9,select:[8,9,11,404],semant:330,separ:9,sequenc:113,setter:21,shape:[8,9,11],shard:9,shell:15,singl:6,singleton:[92,404],space:14,spec:[20,407],specif:9,stack:10,start:13,storag:[6,12,18],store:[16,17,19],string:[67,113,139,170,183,227,239,265],structur:11,style:404,support:[11,20,403],synchron:170,templat:21,tensorstor:[8,9,10,11,13,396],test:[15,17],third:15,tl:[12,17],transact:[170,293,330,403],transform:[14,404],tutori:405,type:[8,9,11,20,293],unconstrain:[8,9,11],unit:[8,9,406],unlabel:[114,142],unshard:9,valu:[8,9,11,16,17,18,19],variabl:12,vector:404,view:20,vindex:404,virtual:20,when:[8,9,11],without:15,write:[9,405],zarr:11}})