Search.setIndex({docurls:["context.html","driver/array/index.html","driver/cast/index.html","driver/downsample/index.html","driver/image/jpeg/index.html","driver/image/png/index.html","driver/index.html","driver/json/index.html","driver/n5/index.html","driver/neuroglancer_precomputed/index.html","driver/zarr/index.html","environment.html","index.html","index_space.html","installation.html","kvstore/file/index.html","kvstore/gcs/index.html","kvstore/index.html","kvstore/memory/index.html","python/api/index.html","python/api/tensorstore.ChunkLayout.html","python/api/tensorstore.ChunkLayout.Grid.html","python/api/tensorstore.ChunkLayout.Grid.__eq__.html","python/api/tensorstore.ChunkLayout.Grid.__init__-components.html","python/api/tensorstore.ChunkLayout.Grid.__init__-json.html","python/api/tensorstore.ChunkLayout.Grid.aspect_ratio.html","python/api/tensorstore.ChunkLayout.Grid.aspect_ratio_soft_constraint.html","python/api/tensorstore.ChunkLayout.Grid.elements.html","python/api/tensorstore.ChunkLayout.Grid.elements_soft_constraint.html","python/api/tensorstore.ChunkLayout.Grid.ndim.html","python/api/tensorstore.ChunkLayout.Grid.rank.html","python/api/tensorstore.ChunkLayout.Grid.shape.html","python/api/tensorstore.ChunkLayout.Grid.shape_soft_constraint.html","python/api/tensorstore.ChunkLayout.Grid.to_json.html","python/api/tensorstore.ChunkLayout.Grid.update.html","python/api/tensorstore.ChunkLayout.__eq__.html","python/api/tensorstore.ChunkLayout.__init__-components.html","python/api/tensorstore.ChunkLayout.__init__-json.html","python/api/tensorstore.ChunkLayout.codec_chunk.html","python/api/tensorstore.ChunkLayout.grid_origin.html","python/api/tensorstore.ChunkLayout.grid_origin_soft_constraint.html","python/api/tensorstore.ChunkLayout.inner_order.html","python/api/tensorstore.ChunkLayout.inner_order_soft_constraint.html","python/api/tensorstore.ChunkLayout.ndim.html","python/api/tensorstore.ChunkLayout.rank.html","python/api/tensorstore.ChunkLayout.read_chunk.html","python/api/tensorstore.ChunkLayout.read_chunk_template.html","python/api/tensorstore.ChunkLayout.to_json.html","python/api/tensorstore.ChunkLayout.update.html","python/api/tensorstore.ChunkLayout.write_chunk.html","python/api/tensorstore.ChunkLayout.write_chunk_template.html","python/api/tensorstore.CodecSpec.html","python/api/tensorstore.CodecSpec.__init__.html","python/api/tensorstore.CodecSpec.to_json.html","python/api/tensorstore.Context.html","python/api/tensorstore.Context.Resource.html","python/api/tensorstore.Context.Resource.to_json.html","python/api/tensorstore.Context.Spec.html","python/api/tensorstore.Context.Spec.__init__.html","python/api/tensorstore.Context.Spec.to_json.html","python/api/tensorstore.Context.__getitem__.html","python/api/tensorstore.Context.__init__-default.html","python/api/tensorstore.Context.__init__-json.html","python/api/tensorstore.Context.__init__-spec.html","python/api/tensorstore.Context.parent.html","python/api/tensorstore.Context.spec.html","python/api/tensorstore.Dim.html","python/api/tensorstore.Dim.__contains__-dim.html","python/api/tensorstore.Dim.__contains__-index.html","python/api/tensorstore.Dim.__eq__.html","python/api/tensorstore.Dim.__init__-exclusive_max.html","python/api/tensorstore.Dim.__init__-inclusive_max.html","python/api/tensorstore.Dim.__init__-size.html","python/api/tensorstore.Dim.__init__-unbounded.html","python/api/tensorstore.Dim.__iter__.html","python/api/tensorstore.Dim.__len__.html","python/api/tensorstore.Dim.__repr__.html","python/api/tensorstore.Dim.__str__.html","python/api/tensorstore.Dim.empty.html","python/api/tensorstore.Dim.exclusive_max.html","python/api/tensorstore.Dim.exclusive_min.html","python/api/tensorstore.Dim.finite.html","python/api/tensorstore.Dim.hull.html","python/api/tensorstore.Dim.implicit_lower.html","python/api/tensorstore.Dim.implicit_upper.html","python/api/tensorstore.Dim.inclusive_max.html","python/api/tensorstore.Dim.inclusive_min.html","python/api/tensorstore.Dim.intersect.html","python/api/tensorstore.Dim.label.html","python/api/tensorstore.Dim.size.html","python/api/tensorstore.DimExpression.html","python/api/tensorstore.DimExpression.__getitem__.html","python/api/tensorstore.DimExpression.diagonal.html","python/api/tensorstore.DimExpression.label.html","python/api/tensorstore.DimExpression.oindex.html","python/api/tensorstore.DimExpression.stride.html","python/api/tensorstore.DimExpression.translate_backward_by.html","python/api/tensorstore.DimExpression.translate_by.html","python/api/tensorstore.DimExpression.translate_to.html","python/api/tensorstore.DimExpression.transpose.html","python/api/tensorstore.DimExpression.vindex.html","python/api/tensorstore.Future.html","python/api/tensorstore.Future.__new__.html","python/api/tensorstore.Future.add_done_callback.html","python/api/tensorstore.Future.cancel.html","python/api/tensorstore.Future.cancelled.html","python/api/tensorstore.Future.done.html","python/api/tensorstore.Future.exception.html","python/api/tensorstore.Future.force.html","python/api/tensorstore.Future.remove_done_callback.html","python/api/tensorstore.Future.result.html","python/api/tensorstore.FutureLike.html","python/api/tensorstore.IndexDomain.html","python/api/tensorstore.IndexDomain.__getitem__-domain.html","python/api/tensorstore.IndexDomain.__getitem__-expr.html","python/api/tensorstore.IndexDomain.__getitem__-identifier.html","python/api/tensorstore.IndexDomain.__getitem__-selection.html","python/api/tensorstore.IndexDomain.__getitem__-transform.html","python/api/tensorstore.IndexDomain.__init__-components.html","python/api/tensorstore.IndexDomain.__init__-dimensions.html","python/api/tensorstore.IndexDomain.__init__-json.html","python/api/tensorstore.IndexDomain.__len__.html","python/api/tensorstore.IndexDomain.__repr__.html","python/api/tensorstore.IndexDomain.exclusive_max.html","python/api/tensorstore.IndexDomain.hull.html","python/api/tensorstore.IndexDomain.implicit_lower_bounds.html","python/api/tensorstore.IndexDomain.implicit_upper_bounds.html","python/api/tensorstore.IndexDomain.inclusive_max.html","python/api/tensorstore.IndexDomain.inclusive_min.html","python/api/tensorstore.IndexDomain.index_exp.html","python/api/tensorstore.IndexDomain.intersect.html","python/api/tensorstore.IndexDomain.labels.html","python/api/tensorstore.IndexDomain.ndim.html","python/api/tensorstore.IndexDomain.origin.html","python/api/tensorstore.IndexDomain.rank.html","python/api/tensorstore.IndexDomain.shape.html","python/api/tensorstore.IndexDomain.size.html","python/api/tensorstore.IndexDomain.to_json.html","python/api/tensorstore.IndexTransform.html","python/api/tensorstore.IndexTransform.T.html","python/api/tensorstore.IndexTransform.__call__.html","python/api/tensorstore.IndexTransform.__getitem__-domain.html","python/api/tensorstore.IndexTransform.__getitem__-expr.html","python/api/tensorstore.IndexTransform.__getitem__-indices.html","python/api/tensorstore.IndexTransform.__getitem__-transform.html","python/api/tensorstore.IndexTransform.__init__-components.html","python/api/tensorstore.IndexTransform.__init__-domain.html","python/api/tensorstore.IndexTransform.__init__-json.html","python/api/tensorstore.IndexTransform.__repr__.html","python/api/tensorstore.IndexTransform.domain.html","python/api/tensorstore.IndexTransform.implicit_lower_bounds.html","python/api/tensorstore.IndexTransform.implicit_upper_bounds.html","python/api/tensorstore.IndexTransform.input_exclusive_max.html","python/api/tensorstore.IndexTransform.input_inclusive_max.html","python/api/tensorstore.IndexTransform.input_inclusive_min.html","python/api/tensorstore.IndexTransform.input_labels.html","python/api/tensorstore.IndexTransform.input_origin.html","python/api/tensorstore.IndexTransform.input_rank.html","python/api/tensorstore.IndexTransform.input_shape.html","python/api/tensorstore.IndexTransform.ndim.html","python/api/tensorstore.IndexTransform.oindex.html","python/api/tensorstore.IndexTransform.origin.html","python/api/tensorstore.IndexTransform.output.html","python/api/tensorstore.IndexTransform.output_rank.html","python/api/tensorstore.IndexTransform.shape.html","python/api/tensorstore.IndexTransform.size.html","python/api/tensorstore.IndexTransform.to_json.html","python/api/tensorstore.IndexTransform.vindex.html","python/api/tensorstore.Indexable.html","python/api/tensorstore.KvStore.html","python/api/tensorstore.KvStore.KeyRange.html","python/api/tensorstore.KvStore.KeyRange.__eq__.html","python/api/tensorstore.KvStore.KeyRange.__init__.html","python/api/tensorstore.KvStore.KeyRange.copy.html","python/api/tensorstore.KvStore.KeyRange.empty.html","python/api/tensorstore.KvStore.KeyRange.exclusive_max.html","python/api/tensorstore.KvStore.KeyRange.inclusive_min.html","python/api/tensorstore.KvStore.ReadResult.html","python/api/tensorstore.KvStore.ReadResult.__init__.html","python/api/tensorstore.KvStore.ReadResult.stamp.html","python/api/tensorstore.KvStore.ReadResult.state.html","python/api/tensorstore.KvStore.ReadResult.value.html","python/api/tensorstore.KvStore.Spec.html","python/api/tensorstore.KvStore.Spec.__add__.html","python/api/tensorstore.KvStore.Spec.__new__.html","python/api/tensorstore.KvStore.Spec.__repr__.html","python/api/tensorstore.KvStore.Spec.__truediv__.html","python/api/tensorstore.KvStore.Spec.copy.html","python/api/tensorstore.KvStore.Spec.path.html","python/api/tensorstore.KvStore.Spec.to_json.html","python/api/tensorstore.KvStore.Spec.update.html","python/api/tensorstore.KvStore.Spec.url.html","python/api/tensorstore.KvStore.TimestampedStorageGeneration.html","python/api/tensorstore.KvStore.TimestampedStorageGeneration.__eq__.html","python/api/tensorstore.KvStore.TimestampedStorageGeneration.__init__.html","python/api/tensorstore.KvStore.TimestampedStorageGeneration.generation.html","python/api/tensorstore.KvStore.TimestampedStorageGeneration.time.html","python/api/tensorstore.KvStore.__delitem__.html","python/api/tensorstore.KvStore.__getitem__.html","python/api/tensorstore.KvStore.__repr__.html","python/api/tensorstore.KvStore.__setitem__.html","python/api/tensorstore.KvStore.copy.html","python/api/tensorstore.KvStore.delete_range.html","python/api/tensorstore.KvStore.list.html","python/api/tensorstore.KvStore.open.html","python/api/tensorstore.KvStore.path.html","python/api/tensorstore.KvStore.read.html","python/api/tensorstore.KvStore.spec.html","python/api/tensorstore.KvStore.transaction.html","python/api/tensorstore.KvStore.url.html","python/api/tensorstore.KvStore.with_transaction.html","python/api/tensorstore.KvStore.write.html","python/api/tensorstore.OutputIndexMap.html","python/api/tensorstore.OutputIndexMap.__init__-constant.html","python/api/tensorstore.OutputIndexMap.__init__-index_array.html","python/api/tensorstore.OutputIndexMap.__init__-input_dimension.html","python/api/tensorstore.OutputIndexMap.index_array.html","python/api/tensorstore.OutputIndexMap.index_range.html","python/api/tensorstore.OutputIndexMap.input_dimension.html","python/api/tensorstore.OutputIndexMap.method.html","python/api/tensorstore.OutputIndexMap.offset.html","python/api/tensorstore.OutputIndexMap.stride.html","python/api/tensorstore.OutputIndexMaps.html","python/api/tensorstore.OutputIndexMaps.__getitem__.html","python/api/tensorstore.OutputIndexMaps.__len__.html","python/api/tensorstore.OutputIndexMaps.rank.html","python/api/tensorstore.OutputIndexMethod.html","python/api/tensorstore.OutputIndexMethod.__init__.html","python/api/tensorstore.OutputIndexMethod.__str__.html","python/api/tensorstore.OutputIndexMethod.array.html","python/api/tensorstore.OutputIndexMethod.constant.html","python/api/tensorstore.OutputIndexMethod.name.html","python/api/tensorstore.OutputIndexMethod.single_input_dimension.html","python/api/tensorstore.OutputIndexMethod.value.html","python/api/tensorstore.Promise.html","python/api/tensorstore.Promise.new.html","python/api/tensorstore.Promise.set_exception.html","python/api/tensorstore.Promise.set_result.html","python/api/tensorstore.Schema.html","python/api/tensorstore.Schema.T.html","python/api/tensorstore.Schema.__eq__.html","python/api/tensorstore.Schema.__getitem__-domain.html","python/api/tensorstore.Schema.__getitem__-expr.html","python/api/tensorstore.Schema.__getitem__-indices.html","python/api/tensorstore.Schema.__getitem__-transform.html","python/api/tensorstore.Schema.__init__-components.html","python/api/tensorstore.Schema.__init__-json.html","python/api/tensorstore.Schema.__repr__.html","python/api/tensorstore.Schema.chunk_layout.html","python/api/tensorstore.Schema.codec.html","python/api/tensorstore.Schema.copy.html","python/api/tensorstore.Schema.dimension_units.html","python/api/tensorstore.Schema.domain.html","python/api/tensorstore.Schema.dtype.html","python/api/tensorstore.Schema.fill_value.html","python/api/tensorstore.Schema.ndim.html","python/api/tensorstore.Schema.oindex.html","python/api/tensorstore.Schema.origin.html","python/api/tensorstore.Schema.rank.html","python/api/tensorstore.Schema.shape.html","python/api/tensorstore.Schema.size.html","python/api/tensorstore.Schema.to_json.html","python/api/tensorstore.Schema.update.html","python/api/tensorstore.Schema.vindex.html","python/api/tensorstore.Spec.html","python/api/tensorstore.Spec.T.html","python/api/tensorstore.Spec.__eq__.html","python/api/tensorstore.Spec.__getitem__-domain.html","python/api/tensorstore.Spec.__getitem__-expr.html","python/api/tensorstore.Spec.__getitem__-indices.html","python/api/tensorstore.Spec.__getitem__-transform.html","python/api/tensorstore.Spec.__new__.html","python/api/tensorstore.Spec.__repr__.html","python/api/tensorstore.Spec.chunk_layout.html","python/api/tensorstore.Spec.codec.html","python/api/tensorstore.Spec.copy.html","python/api/tensorstore.Spec.dimension_units.html","python/api/tensorstore.Spec.domain.html","python/api/tensorstore.Spec.dtype.html","python/api/tensorstore.Spec.fill_value.html","python/api/tensorstore.Spec.kvstore.html","python/api/tensorstore.Spec.ndim.html","python/api/tensorstore.Spec.oindex.html","python/api/tensorstore.Spec.origin.html","python/api/tensorstore.Spec.rank.html","python/api/tensorstore.Spec.schema.html","python/api/tensorstore.Spec.shape.html","python/api/tensorstore.Spec.size.html","python/api/tensorstore.Spec.to_json.html","python/api/tensorstore.Spec.transform.html","python/api/tensorstore.Spec.update.html","python/api/tensorstore.Spec.vindex.html","python/api/tensorstore.TensorStore.html","python/api/tensorstore.TensorStore.T.html","python/api/tensorstore.TensorStore.__array__.html","python/api/tensorstore.TensorStore.__getitem__-domain.html","python/api/tensorstore.TensorStore.__getitem__-expr.html","python/api/tensorstore.TensorStore.__getitem__-indices.html","python/api/tensorstore.TensorStore.__getitem__-transform.html","python/api/tensorstore.TensorStore.__setitem__-domain.html","python/api/tensorstore.TensorStore.__setitem__-expr.html","python/api/tensorstore.TensorStore.__setitem__-indices.html","python/api/tensorstore.TensorStore.__setitem__-transform.html","python/api/tensorstore.TensorStore.astype.html","python/api/tensorstore.TensorStore.chunk_layout.html","python/api/tensorstore.TensorStore.codec.html","python/api/tensorstore.TensorStore.dimension_units.html","python/api/tensorstore.TensorStore.domain.html","python/api/tensorstore.TensorStore.dtype.html","python/api/tensorstore.TensorStore.fill_value.html","python/api/tensorstore.TensorStore.kvstore.html","python/api/tensorstore.TensorStore.mode.html","python/api/tensorstore.TensorStore.ndim.html","python/api/tensorstore.TensorStore.oindex.html","python/api/tensorstore.TensorStore.oindex.__setitem__.html","python/api/tensorstore.TensorStore.origin.html","python/api/tensorstore.TensorStore.rank.html","python/api/tensorstore.TensorStore.read.html","python/api/tensorstore.TensorStore.readable.html","python/api/tensorstore.TensorStore.resolve.html","python/api/tensorstore.TensorStore.schema.html","python/api/tensorstore.TensorStore.shape.html","python/api/tensorstore.TensorStore.size.html","python/api/tensorstore.TensorStore.spec.html","python/api/tensorstore.TensorStore.transaction.html","python/api/tensorstore.TensorStore.vindex.html","python/api/tensorstore.TensorStore.vindex.__setitem__.html","python/api/tensorstore.TensorStore.with_transaction.html","python/api/tensorstore.TensorStore.writable.html","python/api/tensorstore.TensorStore.write.html","python/api/tensorstore.Transaction.html","python/api/tensorstore.Transaction.__init__.html","python/api/tensorstore.Transaction.abort.html","python/api/tensorstore.Transaction.aborted.html","python/api/tensorstore.Transaction.atomic.html","python/api/tensorstore.Transaction.commit_async.html","python/api/tensorstore.Transaction.commit_started.html","python/api/tensorstore.Transaction.commit_sync.html","python/api/tensorstore.Transaction.future.html","python/api/tensorstore.Transaction.open.html","python/api/tensorstore.Unit.html","python/api/tensorstore.Unit.__eq__.html","python/api/tensorstore.Unit.__init__-components.html","python/api/tensorstore.Unit.__init__-json.html","python/api/tensorstore.Unit.__init__-multiplier.html","python/api/tensorstore.Unit.__init__-pair.html","python/api/tensorstore.Unit.__init__-unit.html","python/api/tensorstore.Unit.__mul__.html","python/api/tensorstore.Unit.__truediv__.html","python/api/tensorstore.Unit.base_unit.html","python/api/tensorstore.Unit.multiplier.html","python/api/tensorstore.Unit.to_json.html","python/api/tensorstore.VirtualChunkedReadParameters.html","python/api/tensorstore.VirtualChunkedReadParameters.if_not_equal.html","python/api/tensorstore.VirtualChunkedReadParameters.staleness_bound.html","python/api/tensorstore.VirtualChunkedWriteParameters.html","python/api/tensorstore.VirtualChunkedWriteParameters.if_equal.html","python/api/tensorstore.WriteFutures.html","python/api/tensorstore.WriteFutures.add_done_callback.html","python/api/tensorstore.WriteFutures.cancel.html","python/api/tensorstore.WriteFutures.cancelled.html","python/api/tensorstore.WriteFutures.commit.html","python/api/tensorstore.WriteFutures.copy.html","python/api/tensorstore.WriteFutures.done.html","python/api/tensorstore.WriteFutures.exception.html","python/api/tensorstore.WriteFutures.remove_done_callback.html","python/api/tensorstore.WriteFutures.result.html","python/api/tensorstore.array.html","python/api/tensorstore.bfloat16.html","python/api/tensorstore.bool.html","python/api/tensorstore.cast.html","python/api/tensorstore.complex128.html","python/api/tensorstore.complex64.html","python/api/tensorstore.d.html","python/api/tensorstore.d.__class_getitem__.html","python/api/tensorstore.downsample-spec.html","python/api/tensorstore.downsample-store.html","python/api/tensorstore.dtype.html","python/api/tensorstore.dtype.__call__.html","python/api/tensorstore.dtype.__init__-dtype.html","python/api/tensorstore.dtype.__init__-name.html","python/api/tensorstore.dtype.name.html","python/api/tensorstore.dtype.numpy_dtype.html","python/api/tensorstore.dtype.to_json.html","python/api/tensorstore.dtype.type.html","python/api/tensorstore.float16.html","python/api/tensorstore.float32.html","python/api/tensorstore.float64.html","python/api/tensorstore.inf.html","python/api/tensorstore.int16.html","python/api/tensorstore.int32.html","python/api/tensorstore.int64.html","python/api/tensorstore.int8.html","python/api/tensorstore.json.html","python/api/tensorstore.newaxis.html","python/api/tensorstore.open.html","python/api/tensorstore.string.html","python/api/tensorstore.uint16.html","python/api/tensorstore.uint32.html","python/api/tensorstore.uint64.html","python/api/tensorstore.uint8.html","python/api/tensorstore.ustring.html","python/api/tensorstore.virtual_chunked.html","python/indexing.html","python/tutorial.html","schema.html","spec.html"],envversion:{"sphinx.domains.c":2,"sphinx.domains.changeset":1,"sphinx.domains.citation":1,"sphinx.domains.cpp":4,"sphinx.domains.index":1,"sphinx.domains.javascript":2,"sphinx.domains.math":2,"sphinx.domains.python":3,"sphinx.domains.rst":2,"sphinx.domains.std":2,"sphinx.ext.intersphinx":1,sphinx:56},objects:{"":{"ChunkLayout/Grid":[405,0,1,"json-ChunkLayout/Grid","Constraints on the write/read/codec chunk grids."],"KvStoreUrl/file":[15,0,1,"json-KvStoreUrl/file","file:// KvStore URL scheme"],"KvStoreUrl/gs":[16,0,1,"json-KvStoreUrl/gs","gs:// KvStore URL scheme"],"KvStoreUrl/memory":[18,0,1,"json-KvStoreUrl/memory","memory:// KvStore URL scheme"],"driver/array":[1,0,1,"json-driver/array",""],"driver/cast":[2,0,1,"json-driver/cast",""],"driver/downsample":[3,0,1,"json-driver/downsample",""],"driver/jpeg":[4,0,1,"json-driver/jpeg",""],"driver/json":[7,0,1,"json-driver/json",""],"driver/n5":[8,0,1,"json-driver/n5",""],"driver/n5/Codec":[8,0,1,"json-driver/n5/Codec",""],"driver/n5/Compression":[8,0,1,"json-driver/n5/Compression",""],"driver/n5/Compression/blosc":[8,0,1,"json-driver/n5/Compression/blosc",""],"driver/n5/Compression/bzip2":[8,0,1,"json-driver/n5/Compression/bzip2",""],"driver/n5/Compression/gzip":[8,0,1,"json-driver/n5/Compression/gzip",""],"driver/n5/Compression/raw":[8,0,1,"json-driver/n5/Compression/raw",""],"driver/n5/Compression/xz":[8,0,1,"json-driver/n5/Compression/xz",""],"driver/neuroglancer_precomputed":[9,0,1,"json-driver/neuroglancer_precomputed",""],"driver/neuroglancer_precomputed/Codec":[9,0,1,"json-driver/neuroglancer_precomputed/Codec","Neuroglancer Precomputed Codec"],"driver/neuroglancer_precomputed/ShardingSpec":[9,0,1,"json-driver/neuroglancer_precomputed/ShardingSpec","Sharding"],"driver/png":[5,0,1,"json-driver/png",""],"driver/zarr":[10,0,1,"json-driver/zarr",""],"driver/zarr/Codec":[10,0,1,"json-driver/zarr/Codec",""],"driver/zarr/Compressor":[10,0,1,"json-driver/zarr/Compressor","Compressor"],"driver/zarr/Compressor/blosc":[10,0,1,"json-driver/zarr/Compressor/blosc",""],"driver/zarr/Compressor/bz2":[10,0,1,"json-driver/zarr/Compressor/bz2",""],"driver/zarr/Compressor/zlib":[10,0,1,"json-driver/zarr/Compressor/zlib",""],"kvstore/file":[15,0,1,"json-kvstore/file","JSON specification of file-backed key-value store."],"kvstore/gcs":[16,0,1,"json-kvstore/gcs",""],"kvstore/memory":[18,0,1,"json-kvstore/memory",""],BAZELISK_HOME:[14,9,1,"-",""],CacheRevalidationBound:[6,0,1,"json-CacheRevalidationBound",""],ChunkLayout:[405,0,1,"json-ChunkLayout",""],Codec:[405,0,1,"json-Codec",""],Context:[0,0,1,"json-Context",""],ContextResource:[0,0,1,"json-ContextResource",""],DownsampleMethod:[3,0,1,"json-DownsampleMethod","Downsample method"],GOOGLE_APPLICATION_CREDENTIALS:[11,9,1,"-",""],IndexDomain:[13,0,1,"json-IndexDomain",""],IndexInterval:[13,0,1,"json-IndexInterval","Specifies a closed interval of integer index values."],IndexTransform:[13,0,1,"json-IndexTransform",""],KeyValueStoreBackedChunkDriver:[6,0,1,"json-KeyValueStoreBackedChunkDriver",""],KvStore:[17,0,1,"json-KvStore","Key-value store specification."],KvStoreUrl:[17,0,1,"json-KvStoreUrl","URL representation of a key-value store."],OutputIndexMap:[13,0,1,"json-OutputIndexMap","Specifies a transform from an input space to a single output index."],SSLKEYLOGFILE:[11,9,1,"-",""],Schema:[405,0,1,"json-Schema",""],TENSORSTORE_BAZELISK:[14,9,1,"-",""],TENSORSTORE_BAZEL_BUILD_OPTIONS:[14,9,1,"-",""],TENSORSTORE_BAZEL_COMPILATION_MODE:[14,9,1,"-",""],TENSORSTORE_BAZEL_STARTUP_OPTIONS:[14,9,1,"-",""],TENSORSTORE_CA_BUNDLE:[11,9,1,"-",""],TENSORSTORE_CA_PATH:[11,9,1,"-",""],TENSORSTORE_CURL_VERBOSE:[11,9,1,"-",""],TENSORSTORE_GCS_HTTP_URL:[11,9,1,"-",""],TENSORSTORE_PREBUILT_DIR:[14,9,1,"-",""],TENSORSTORE_SYSTEM_LIBS:[14,9,1,"-",""],TensorStore:[406,0,1,"json-TensorStore","Specifies a TensorStore to open/create."],Unit:[405,0,1,"json-Unit","Specifies a physical quantity/unit."],all_proxy:[11,9,1,"-",""],dtype:[406,0,1,"json-dtype","Specifies a TensorStore data type."],http_proxy:[11,9,1,"-",""],https_proxy:[11,9,1,"-",""],no_proxy:[11,9,1,"-",""]},"ChunkLayout/Grid":{aspect_ratio:[405,1,2,"json-ChunkLayout/Grid.aspect_ratio","Aspect ratio of the chunk shape."],aspect_ratio_soft_constraint:[405,1,2,"json-ChunkLayout/Grid.aspect_ratio_soft_constraint","Soft constraint on aspect ratio, lower precedence than aspect_ratio."],elements:[405,1,2,"json-ChunkLayout/Grid.elements","Preferred number of elements per chunk."],elements_soft_constraint:[405,1,2,"json-ChunkLayout/Grid.elements_soft_constraint","Preferred number of elements per chunk, lower precedence than\nelements."],shape:[405,1,2,"json-ChunkLayout/Grid.shape","Hard constraints on the chunk size for each dimension."],shape_soft_constraint:[405,1,2,"json-ChunkLayout/Grid.shape_soft_constraint","Preferred chunk sizes for each dimension."]},"Context.cache_pool":{queued_for_writeback_bytes_limit:[0,1,2,"json-Context.cache_pool.queued_for_writeback_bytes_limit",""],total_bytes_limit:[0,1,2,"json-Context.cache_pool.total_bytes_limit",""]},"Context.data_copy_concurrency":{limit:[0,1,2,"json-Context.data_copy_concurrency.limit",""]},"Context.file_io_concurrency":{limit:[0,1,2,"json-Context.file_io_concurrency.limit",""]},"Context.gcs_request_concurrency":{limit:[16,1,2,"json-Context.gcs_request_concurrency.limit",""]},"Context.gcs_request_retries":{max_retries:[16,1,2,"json-Context.gcs_request_retries.max_retries",""]},"Context.gcs_user_project":{project_id:[16,1,2,"json-Context.gcs_user_project.project_id","Google Cloud project id, e.g. \"my-project\".  The Google Cloud\naccount that is used must have appropriate permissions to bill to the\nspecified project."]},"driver/array":{array:[1,1,2,"json-driver/array.array","Nested array of rank equal to rank specifying the initial value."],context:[1,1,2,"json-driver/array.context","Specifies context resources that augment/override the parent context."],driver:[1,1,2,"json-driver/array.driver",""],dtype:[1,1,2,"json-driver/array.dtype","Specifies the data type."],rank:[1,1,2,"json-driver/array.rank","Specifies the rank of the TensorStore."],schema:[1,1,2,"json-driver/array.schema","Specifies constraints on the schema."],transform:[1,1,2,"json-driver/array.transform","Specifies a transform."]},"driver/cast":{base:[2,1,2,"json-driver/cast.base","Base TensorStore to convert."],context:[2,1,2,"json-driver/cast.context","Specifies context resources that augment/override the parent context."],driver:[2,1,2,"json-driver/cast.driver",""],dtype:[2,1,2,"json-driver/cast.dtype","Specifies the data type under which to view the base TensorStore."],rank:[2,1,2,"json-driver/cast.rank","Specifies the rank of the TensorStore."],schema:[2,1,2,"json-driver/cast.schema","Specifies constraints on the schema."],transform:[2,1,2,"json-driver/cast.transform","Specifies a transform."]},"driver/downsample":{base:[3,1,2,"json-driver/downsample.base","Base TensorStore to downsample."],context:[3,1,2,"json-driver/downsample.context","Specifies context resources that augment/override the parent context."],downsample_factors:[3,1,2,"json-driver/downsample.downsample_factors",""],downsample_method:[3,1,2,"json-driver/downsample.downsample_method",""],driver:[3,1,2,"json-driver/downsample.driver",""],dtype:[3,1,2,"json-driver/downsample.dtype","Specifies the data type."],rank:[3,1,2,"json-driver/downsample.rank","Specifies the rank of the TensorStore."],schema:[3,1,2,"json-driver/downsample.schema","Specifies constraints on the schema."],transform:[3,1,2,"json-driver/downsample.transform","Specifies a transform."]},"driver/jpeg":{cache_pool:[4,1,2,"json-driver/jpeg.cache_pool",""],context:[4,1,2,"json-driver/jpeg.context","Specifies context resources that augment/override the parent context."],data_copy_concurrency:[4,1,2,"json-driver/jpeg.data_copy_concurrency",""],driver:[4,1,2,"json-driver/jpeg.driver",""],dtype:[4,1,2,"json-driver/jpeg.dtype",""],kvstore:[4,1,2,"json-driver/jpeg.kvstore",""],quality:[4,1,2,"json-driver/jpeg.quality",""],rank:[4,1,2,"json-driver/jpeg.rank",""],schema:[4,1,2,"json-driver/jpeg.schema","Specifies constraints on the schema."],transform:[4,1,2,"json-driver/jpeg.transform","Specifies a transform."]},"driver/json":{cache_pool:[7,1,2,"json-driver/json.cache_pool",""],context:[7,1,2,"json-driver/json.context","Specifies context resources that augment/override the parent context."],data_copy_concurrency:[7,1,2,"json-driver/json.data_copy_concurrency",""],driver:[7,1,2,"json-driver/json.driver",""],dtype:[7,1,2,"json-driver/json.dtype",""],json_pointer:[7,1,2,"json-driver/json.json_pointer",""],kvstore:[7,1,2,"json-driver/json.kvstore",""],path:[7,1,2,"json-driver/json.path","Additional path to the JSON file within the KvStore specified by\nkvstore."],rank:[7,1,2,"json-driver/json.rank",""],recheck_cached_data:[7,1,2,"json-driver/json.recheck_cached_data",""],schema:[7,1,2,"json-driver/json.schema","Specifies constraints on the schema."],transform:[7,1,2,"json-driver/json.transform","Specifies a transform."]},"driver/n5":{cache_pool:[8,1,2,"json-driver/n5.cache_pool",""],context:[8,1,2,"json-driver/n5.context","Specifies context resources that augment/override the parent context."],create:[8,1,2,"json-driver/n5.create",""],data_copy_concurrency:[8,1,2,"json-driver/n5.data_copy_concurrency",""],delete_existing:[8,1,2,"json-driver/n5.delete_existing",""],driver:[8,1,2,"json-driver/n5.driver",""],dtype:[8,1,2,"json-driver/n5.dtype","Specifies the data type."],kvstore:[8,1,2,"json-driver/n5.kvstore",""],metadata:[8,1,2,"json-driver/n5.metadata","N5 array metadata."],open:[8,1,2,"json-driver/n5.open",""],path:[8,1,2,"json-driver/n5.path","Additional path within the KvStore specified by\nkvstore."],rank:[8,1,2,"json-driver/n5.rank","Specifies the rank of the TensorStore."],recheck_cached_data:[8,1,2,"json-driver/n5.recheck_cached_data",""],recheck_cached_metadata:[8,1,2,"json-driver/n5.recheck_cached_metadata",""],schema:[8,1,2,"json-driver/n5.schema","Specifies constraints on the schema."],transform:[8,1,2,"json-driver/n5.transform","Specifies a transform."]},"driver/n5.metadata":{axes:[8,1,2,"json-driver/n5.metadata.axes","Specifies a label for each dimension of the dataset."],blockSize:[8,1,2,"json-driver/n5.metadata.blockSize","Chunk dimensions."],compression:[8,1,2,"json-driver/n5.metadata.compression","Specifies the chunk compression method."],dataType:[8,1,2,"json-driver/n5.metadata.dataType","Specifies the data type."],dimensions:[8,1,2,"json-driver/n5.metadata.dimensions","Dimensions of the dataset."],resolution:[8,1,2,"json-driver/n5.metadata.resolution","Specifies the multiplier for the physical units."],units:[8,1,2,"json-driver/n5.metadata.units","Specifies the base physical unit for each dimension."]},"driver/n5/Codec":{compression:[8,1,2,"json-driver/n5/Codec.compression","Specifies the chunk compression method."],driver:[8,1,2,"json-driver/n5/Codec.driver",""]},"driver/n5/Compression":{type:[8,1,2,"json-driver/n5/Compression.type",""]},"driver/n5/Compression/blosc":{clevel:[8,1,2,"json-driver/n5/Compression/blosc.clevel","Specifies the Blosc compression level to use."],cname:[8,1,2,"json-driver/n5/Compression/blosc.cname",""],shuffle:[8,1,2,"json-driver/n5/Compression/blosc.shuffle",""],type:[8,1,2,"json-driver/n5/Compression/blosc.type",""]},"driver/n5/Compression/bzip2":{blockSize:[8,1,2,"json-driver/n5/Compression/bzip2.blockSize","Specifies the bzip2 block size to use (in units of 100KB), which also determine the compression level."],type:[8,1,2,"json-driver/n5/Compression/bzip2.type",""]},"driver/n5/Compression/gzip":{level:[8,1,2,"json-driver/n5/Compression/gzip.level","Specifies the zlib compression level to use."],type:[8,1,2,"json-driver/n5/Compression/gzip.type",""],useZlib:[8,1,2,"json-driver/n5/Compression/gzip.useZlib",""]},"driver/n5/Compression/raw":{type:[8,1,2,"json-driver/n5/Compression/raw.type",""]},"driver/n5/Compression/xz":{preset:[8,1,2,"json-driver/n5/Compression/xz.preset",""],type:[8,1,2,"json-driver/n5/Compression/xz.type",""]},"driver/neuroglancer_precomputed":{cache_pool:[9,1,2,"json-driver/neuroglancer_precomputed.cache_pool",""],context:[9,1,2,"json-driver/neuroglancer_precomputed.context","Specifies context resources that augment/override the parent context."],create:[9,1,2,"json-driver/neuroglancer_precomputed.create",""],data_copy_concurrency:[9,1,2,"json-driver/neuroglancer_precomputed.data_copy_concurrency",""],delete_existing:[9,1,2,"json-driver/neuroglancer_precomputed.delete_existing",""],driver:[9,1,2,"json-driver/neuroglancer_precomputed.driver",""],dtype:[9,1,2,"json-driver/neuroglancer_precomputed.dtype","Specifies the data type."],kvstore:[9,1,2,"json-driver/neuroglancer_precomputed.kvstore",""],multiscale_metadata:[9,1,2,"json-driver/neuroglancer_precomputed.multiscale_metadata","Scale-independent metadata."],open:[9,1,2,"json-driver/neuroglancer_precomputed.open",""],path:[9,1,2,"json-driver/neuroglancer_precomputed.path","Additional path within the KvStore specified by\nkvstore."],rank:[9,1,2,"json-driver/neuroglancer_precomputed.rank","Specifies the rank of the TensorStore."],recheck_cached_data:[9,1,2,"json-driver/neuroglancer_precomputed.recheck_cached_data",""],recheck_cached_metadata:[9,1,2,"json-driver/neuroglancer_precomputed.recheck_cached_metadata",""],scale_index:[9,1,2,"json-driver/neuroglancer_precomputed.scale_index","Zero-based index of the scale to open or create."],scale_metadata:[9,1,2,"json-driver/neuroglancer_precomputed.scale_metadata","Per-scale metadata."],schema:[9,1,2,"json-driver/neuroglancer_precomputed.schema","Specifies constraints on the schema."],transform:[9,1,2,"json-driver/neuroglancer_precomputed.transform","Specifies a transform."]},"driver/neuroglancer_precomputed.multiscale_metadata":{data_type:[9,1,2,"json-driver/neuroglancer_precomputed.multiscale_metadata.data_type","Specifies the data type."],num_channels:[9,1,2,"json-driver/neuroglancer_precomputed.multiscale_metadata.num_channels","Number of channels."],type:[9,1,2,"json-driver/neuroglancer_precomputed.multiscale_metadata.type","Specifying the type of volume."]},"driver/neuroglancer_precomputed.scale_metadata":{chunk_size:[9,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.chunk_size","Chunk dimensions (XYZ order)."],compressed_segmentation_block_size:[9,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.compressed_segmentation_block_size","Block size for compressed segmentation encoding."],encoding:[9,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.encoding","Specifies the chunk encoding."],jpeg_quality:[9,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.jpeg_quality","JPEG encoding quality."],key:[9,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.key","Specifies the scale key (relative to path)."],resolution:[9,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.resolution","Voxel size in nanometers (XYZ order)."],sharding:[9,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.sharding",""],size:[9,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.size","Voxel dimensions of the volume (XYZ order)."],voxel_offset:[9,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.voxel_offset","Voxel origin of the volume (XYZ order)."]},"driver/neuroglancer_precomputed/Codec":{driver:[9,1,2,"json-driver/neuroglancer_precomputed/Codec.driver",""],encoding:[9,1,2,"json-driver/neuroglancer_precomputed/Codec.encoding","Specifies the chunk encoding."],jpeg_quality:[9,1,2,"json-driver/neuroglancer_precomputed/Codec.jpeg_quality","JPEG encoding quality."],shard_data_encoding:[9,1,2,"json-driver/neuroglancer_precomputed/Codec.shard_data_encoding","Additional data compression when using the sharded format."]},"driver/neuroglancer_precomputed/ShardingSpec":{"@type":[9,1,2,"json-driver/neuroglancer_precomputed/ShardingSpec.@type",""],data_encoding:[9,1,2,"json-driver/neuroglancer_precomputed/ShardingSpec.data_encoding","Specifies the encoding of the data chunks."],hash:[9,1,2,"json-driver/neuroglancer_precomputed/ShardingSpec.hash","Specifies the hash function used to map chunk IDs to shards."],minishard_bits:[9,1,2,"json-driver/neuroglancer_precomputed/ShardingSpec.minishard_bits","Number of bits of the hashed chunk ID that determine the minishard number."],minishard_index_encoding:[9,1,2,"json-driver/neuroglancer_precomputed/ShardingSpec.minishard_index_encoding","Specifies the encoding of the minishard index."],preshift_bits:[9,1,2,"json-driver/neuroglancer_precomputed/ShardingSpec.preshift_bits","Number of low-order bits of the chunk ID that do not contribute to the hashed chunk ID."],shard_bits:[9,1,2,"json-driver/neuroglancer_precomputed/ShardingSpec.shard_bits","Number of bits of the hashed chunk ID that determine the shard number."]},"driver/png":{cache_pool:[5,1,2,"json-driver/png.cache_pool",""],compression_level:[5,1,2,"json-driver/png.compression_level",""],context:[5,1,2,"json-driver/png.context","Specifies context resources that augment/override the parent context."],data_copy_concurrency:[5,1,2,"json-driver/png.data_copy_concurrency",""],driver:[5,1,2,"json-driver/png.driver",""],dtype:[5,1,2,"json-driver/png.dtype",""],kvstore:[5,1,2,"json-driver/png.kvstore",""],rank:[5,1,2,"json-driver/png.rank",""],schema:[5,1,2,"json-driver/png.schema","Specifies constraints on the schema."],transform:[5,1,2,"json-driver/png.transform","Specifies a transform."]},"driver/zarr":{cache_pool:[10,1,2,"json-driver/zarr.cache_pool",""],context:[10,1,2,"json-driver/zarr.context","Specifies context resources that augment/override the parent context."],create:[10,1,2,"json-driver/zarr.create",""],data_copy_concurrency:[10,1,2,"json-driver/zarr.data_copy_concurrency",""],delete_existing:[10,1,2,"json-driver/zarr.delete_existing",""],driver:[10,1,2,"json-driver/zarr.driver",""],dtype:[10,1,2,"json-driver/zarr.dtype","Specifies the data type."],field:[10,1,2,"json-driver/zarr.field","Name of field to open."],key_encoding:[10,1,2,"json-driver/zarr.key_encoding","Specifies the encoding of chunk indices into key-value store keys."],kvstore:[10,1,2,"json-driver/zarr.kvstore",""],metadata:[10,1,2,"json-driver/zarr.metadata","Zarr array metadata."],metadata_key:[10,1,2,"json-driver/zarr.metadata_key","Specifies the key under which to store the array metadata in JSON format."],open:[10,1,2,"json-driver/zarr.open",""],path:[10,1,2,"json-driver/zarr.path","Additional path within the KvStore specified by\nkvstore."],rank:[10,1,2,"json-driver/zarr.rank","Specifies the rank of the TensorStore."],recheck_cached_data:[10,1,2,"json-driver/zarr.recheck_cached_data",""],recheck_cached_metadata:[10,1,2,"json-driver/zarr.recheck_cached_metadata",""],schema:[10,1,2,"json-driver/zarr.schema","Specifies constraints on the schema."],transform:[10,1,2,"json-driver/zarr.transform","Specifies a transform."]},"driver/zarr.metadata":{chunks:[10,1,2,"json-driver/zarr.metadata.chunks","Chunk dimensions."],compressor:[10,1,2,"json-driver/zarr.metadata.compressor","Specifies the chunk compression method."],dimension_separator:[10,1,2,"json-driver/zarr.metadata.dimension_separator","Specifies the encoding of chunk indices into key-value store keys."],dtype:[10,1,2,"json-driver/zarr.metadata.dtype","Specifies the scalar or structured data type."],fill_value:[10,1,2,"json-driver/zarr.metadata.fill_value","Specifies the fill value."],filters:[10,1,2,"json-driver/zarr.metadata.filters","Specifies the filters to apply to chunks."],order:[10,1,2,"json-driver/zarr.metadata.order","Specifies the data layout for encoded chunks."],shape:[10,1,2,"json-driver/zarr.metadata.shape","Chunked dimensions of the array."],zarr_format:[10,1,2,"json-driver/zarr.metadata.zarr_format",""]},"driver/zarr/Codec":{compressor:[10,1,2,"json-driver/zarr/Codec.compressor","Specifies the chunk compression method."],driver:[10,1,2,"json-driver/zarr/Codec.driver",""],filters:[10,1,2,"json-driver/zarr/Codec.filters","Specifies the filters to apply to chunks."]},"driver/zarr/Compressor":{id:[10,1,2,"json-driver/zarr/Compressor.id",""]},"driver/zarr/Compressor/blosc":{blocksize:[10,1,2,"json-driver/zarr/Compressor/blosc.blocksize","Specifies the Blosc blocksize."],clevel:[10,1,2,"json-driver/zarr/Compressor/blosc.clevel","Specifies the Blosc compression level to use."],cname:[10,1,2,"json-driver/zarr/Compressor/blosc.cname",""],id:[10,1,2,"json-driver/zarr/Compressor/blosc.id",""],shuffle:[10,1,2,"json-driver/zarr/Compressor/blosc.shuffle",""]},"driver/zarr/Compressor/bz2":{id:[10,1,2,"json-driver/zarr/Compressor/bz2.id",""],level:[10,1,2,"json-driver/zarr/Compressor/bz2.level","Specifies the bzip2 buffer size/compression level to use."]},"driver/zarr/Compressor/zlib":{id:[10,1,2,"json-driver/zarr/Compressor/zlib.id",""],level:[10,1,2,"json-driver/zarr/Compressor/zlib.level","Specifies the zlib compression level to use."]},"kvstore/file":{context:[15,1,2,"json-kvstore/file.context",""],driver:[15,1,2,"json-kvstore/file.driver",""],file_io_concurrency:[15,1,2,"json-kvstore/file.file_io_concurrency",""],path:[15,1,2,"json-kvstore/file.path","Path to root directory on local filesystem."]},"kvstore/gcs":{bucket:[16,1,2,"json-kvstore/gcs.bucket","Google Cloud Storage bucket to use."],context:[16,1,2,"json-kvstore/gcs.context",""],driver:[16,1,2,"json-kvstore/gcs.driver",""],gcs_request_concurrency:[16,1,2,"json-kvstore/gcs.gcs_request_concurrency",""],gcs_request_retries:[16,1,2,"json-kvstore/gcs.gcs_request_retries",""],gcs_user_project:[16,1,2,"json-kvstore/gcs.gcs_user_project",""],path:[16,1,2,"json-kvstore/gcs.path","Key prefix within the key-value store."]},"kvstore/memory":{atomic:[18,1,2,"json-kvstore/memory.atomic",""],context:[18,1,2,"json-kvstore/memory.context",""],driver:[18,1,2,"json-kvstore/memory.driver",""],memory_key_value_store:[18,1,2,"json-kvstore/memory.memory_key_value_store",""],path:[18,1,2,"json-kvstore/memory.path","Key prefix within the key-value store."]},"tensorstore.ChunkLayout":{"__init__(components)":[36,3,1,"","Constructs from component parts."],"__init__(json)":[37,3,1,"","Constructs from the JSON representation."],Grid:[21,2,1,"","Describes a regular grid layout for write/read/codec chunks."],__eq__:[35,3,1,"","Compares two chunk layouts for equality."],codec_chunk:[38,5,1,"","Chunk grid used by the codec."],grid_origin:[39,5,1,"","Hard constraints on the grid origin."],grid_origin_soft_constraint:[40,5,1,"","Soft constraints on the grid origin."],inner_order:[41,5,1,"","Permutation specifying the element storage order within the innermost chunks."],inner_order_soft_constraint:[42,5,1,"","Permutation specifying soft constraint on the element storage order."],ndim:[43,5,1,"","Alias for rank."],rank:[44,5,1,"","Number of dimensions in the index space."],read_chunk:[45,5,1,"","Chunk grid for efficient reads."],read_chunk_template:[46,5,1,"","Chunk offset and shape for efficient reads."],to_json:[47,3,1,"","Converts to the JSON representation."],update:[48,3,1,"","Adds additional constraints."],write_chunk:[49,5,1,"","Chunk grid for efficient writes."],write_chunk_template:[50,5,1,"","Chunk offset and shape for efficient writes."]},"tensorstore.ChunkLayout.Grid":{"__init__(components)":[23,3,1,"","Constructs a chunk grid."],"__init__(json)":[24,3,1,"","Constructs from the JSON representation."],__eq__:[22,3,1,"","Compares two chunk grids for equality."],aspect_ratio:[25,5,1,"","Chunk shape aspect ratio."],aspect_ratio_soft_constraint:[26,5,1,"","Soft constraints on chunk shape aspect ratio."],elements:[27,5,1,"","Target number of elements per chunk."],elements_soft_constraint:[28,5,1,"","Soft constraint on target number of elements per chunk."],ndim:[29,5,1,"","Alias for rank."],rank:[30,5,1,"","Number of dimensions, or None if unspecified."],shape:[31,5,1,"","Hard constraints on chunk shape."],shape_soft_constraint:[32,5,1,"","Soft constraints on chunk shape."],to_json:[33,3,1,"","Converts to the JSON representation."],update:[34,3,1,"","Adds additional constraints."]},"tensorstore.ChunkLayout.Grid.__init__(components)":{aspect_ratio:[23,4,2,"p-aspect_ratio","Aspect ratio for each dimension."],aspect_ratio_soft_constraint:[23,4,2,"p-aspect_ratio_soft_constraint","Soft constraints on the aspect ratio for each dimension."],elements:[23,4,2,"p-elements","Target number of elements per chunk."],elements_soft_constraint:[23,4,2,"p-elements_soft_constraint","Soft constraint on the target number of elements per chunk."],grid:[23,4,2,"p-grid","Other grid constraints to merge in."],grid_soft_constraint:[23,4,2,"p-grid_soft_constraint","Other grid constraints to merge in as soft constraints."],rank:[23,4,2,"p-rank","Specifies the number of dimensions."],shape:[23,4,2,"p-shape","Hard constraints on the chunk size for each dimension."],shape_soft_constraint:[23,4,2,"p-shape_soft_constraint","Soft constraints on the chunk size for each dimension."]},"tensorstore.ChunkLayout.Grid.update":{aspect_ratio:[34,4,2,"p-aspect_ratio","Aspect ratio for each dimension."],aspect_ratio_soft_constraint:[34,4,2,"p-aspect_ratio_soft_constraint","Soft constraints on the aspect ratio for each dimension."],elements:[34,4,2,"p-elements","Target number of elements per chunk."],elements_soft_constraint:[34,4,2,"p-elements_soft_constraint","Soft constraint on the target number of elements per chunk."],grid:[34,4,2,"p-grid","Other grid constraints to merge in."],grid_soft_constraint:[34,4,2,"p-grid_soft_constraint","Other grid constraints to merge in as soft constraints."],rank:[34,4,2,"p-rank","Specifies the number of dimensions."],shape:[34,4,2,"p-shape","Hard constraints on the chunk size for each dimension."],shape_soft_constraint:[34,4,2,"p-shape_soft_constraint","Soft constraints on the chunk size for each dimension."]},"tensorstore.ChunkLayout.__init__(components)":{chunk:[36,4,2,"p-chunk","Common constraints on write, read, and codec chunks."],chunk_aspect_ratio:[36,4,2,"p-chunk_aspect_ratio","Hard constraints on the write, read, and codec chunk aspect ratio."],chunk_aspect_ratio_soft_constraint:[36,4,2,"p-chunk_aspect_ratio_soft_constraint","Soft constraints on the write, read, and codec chunk aspect ratio."],chunk_elements:[36,4,2,"p-chunk_elements","Hard constraints on the target number of elements for write and read chunks.\nCorresponds to the JSON elements member of\nChunkLayout.chunk."],chunk_elements_soft_constraint:[36,4,2,"p-chunk_elements_soft_constraint","Soft constraints on the target number of elements for write and read chunks.\nCorresponds to the JSON\nelements_soft_constraint member of\nChunkLayout.chunk."],chunk_shape:[36,4,2,"p-chunk_shape","Hard constraints on both the write and read chunk shape."],chunk_shape_soft_constraint:[36,4,2,"p-chunk_shape_soft_constraint","Soft constraints on both the write and read chunk shape."],codec_chunk:[36,4,2,"p-codec_chunk","Constraints on codec chunks."],codec_chunk_aspect_ratio:[36,4,2,"p-codec_chunk_aspect_ratio","Soft constraints on the codec chunk aspect ratio."],codec_chunk_aspect_ratio_soft_constraint:[36,4,2,"p-codec_chunk_aspect_ratio_soft_constraint","Soft constraints on the codec chunk aspect ratio."],codec_chunk_elements:[36,4,2,"p-codec_chunk_elements","Hard constraints on the target number of elements for codec chunks."],codec_chunk_elements_soft_constraint:[36,4,2,"p-codec_chunk_elements_soft_constraint","Soft constraints on the target number of elements for codec chunks."],codec_chunk_shape:[36,4,2,"p-codec_chunk_shape","Soft constraints on the codec chunk shape."],codec_chunk_shape_soft_constraint:[36,4,2,"p-codec_chunk_shape_soft_constraint","Soft constraints on the codec chunk shape."],finalize:[36,4,2,"p-finalize","Validates and converts the layout into a precise chunk\nlayout."],grid_origin:[36,4,2,"p-grid_origin","Hard constraints on the origin of the chunk grid.\nCorresponds to the JSON ChunkLayout.grid_origin member."],grid_origin_soft_constraint:[36,4,2,"p-grid_origin_soft_constraint","Soft constraints on the origin of the chunk grid."],inner_order:[36,4,2,"p-inner_order","Permutation specifying the element storage order within the innermost chunks.\nCorresponds to the JSON ChunkLayout.inner_order member."],inner_order_soft_constraint:[36,4,2,"p-inner_order_soft_constraint","Specifies a preferred value for inner_order rather than a\nhard constraint."],rank:[36,4,2,"p-rank","Specifies the number of dimensions."],read_chunk:[36,4,2,"p-read_chunk","Constraints on read chunks."],read_chunk_aspect_ratio:[36,4,2,"p-read_chunk_aspect_ratio","Hard constraints on the read chunk aspect ratio."],read_chunk_aspect_ratio_soft_constraint:[36,4,2,"p-read_chunk_aspect_ratio_soft_constraint","Soft constraints on the read chunk aspect ratio."],read_chunk_elements:[36,4,2,"p-read_chunk_elements","Hard constraints on the target number of elements for read chunks."],read_chunk_elements_soft_constraint:[36,4,2,"p-read_chunk_elements_soft_constraint","Soft constraints on the target number of elements for read chunks."],read_chunk_shape:[36,4,2,"p-read_chunk_shape","Hard constraints on the read chunk shape."],read_chunk_shape_soft_constraint:[36,4,2,"p-read_chunk_shape_soft_constraint","Soft constraints on the read chunk shape."],write_chunk:[36,4,2,"p-write_chunk","Constraints on write chunks."],write_chunk_aspect_ratio:[36,4,2,"p-write_chunk_aspect_ratio","Hard constraints on the write chunk aspect ratio."],write_chunk_aspect_ratio_soft_constraint:[36,4,2,"p-write_chunk_aspect_ratio_soft_constraint","Soft constraints on the write chunk aspect ratio."],write_chunk_elements:[36,4,2,"p-write_chunk_elements","Hard constraints on the target number of elements for write chunks."],write_chunk_elements_soft_constraint:[36,4,2,"p-write_chunk_elements_soft_constraint","Soft constraints on the target number of elements for write chunks."],write_chunk_shape:[36,4,2,"p-write_chunk_shape","Hard constraints on the write chunk shape."],write_chunk_shape_soft_constraint:[36,4,2,"p-write_chunk_shape_soft_constraint","Soft constraints on the write chunk shape."]},"tensorstore.ChunkLayout.update":{chunk:[48,4,2,"p-chunk","Common constraints on write, read, and codec chunks."],chunk_aspect_ratio:[48,4,2,"p-chunk_aspect_ratio","Hard constraints on the write, read, and codec chunk aspect ratio."],chunk_aspect_ratio_soft_constraint:[48,4,2,"p-chunk_aspect_ratio_soft_constraint","Soft constraints on the write, read, and codec chunk aspect ratio."],chunk_elements:[48,4,2,"p-chunk_elements","Hard constraints on the target number of elements for write and read chunks.\nCorresponds to the JSON elements member of\nChunkLayout.chunk."],chunk_elements_soft_constraint:[48,4,2,"p-chunk_elements_soft_constraint","Soft constraints on the target number of elements for write and read chunks.\nCorresponds to the JSON\nelements_soft_constraint member of\nChunkLayout.chunk."],chunk_shape:[48,4,2,"p-chunk_shape","Hard constraints on both the write and read chunk shape."],chunk_shape_soft_constraint:[48,4,2,"p-chunk_shape_soft_constraint","Soft constraints on both the write and read chunk shape."],codec_chunk:[48,4,2,"p-codec_chunk","Constraints on codec chunks."],codec_chunk_aspect_ratio:[48,4,2,"p-codec_chunk_aspect_ratio","Soft constraints on the codec chunk aspect ratio."],codec_chunk_aspect_ratio_soft_constraint:[48,4,2,"p-codec_chunk_aspect_ratio_soft_constraint","Soft constraints on the codec chunk aspect ratio."],codec_chunk_elements:[48,4,2,"p-codec_chunk_elements","Hard constraints on the target number of elements for codec chunks."],codec_chunk_elements_soft_constraint:[48,4,2,"p-codec_chunk_elements_soft_constraint","Soft constraints on the target number of elements for codec chunks."],codec_chunk_shape:[48,4,2,"p-codec_chunk_shape","Soft constraints on the codec chunk shape."],codec_chunk_shape_soft_constraint:[48,4,2,"p-codec_chunk_shape_soft_constraint","Soft constraints on the codec chunk shape."],finalize:[48,4,2,"p-finalize","Validates and converts the layout into a precise chunk\nlayout."],grid_origin:[48,4,2,"p-grid_origin","Hard constraints on the origin of the chunk grid.\nCorresponds to the JSON ChunkLayout.grid_origin member."],grid_origin_soft_constraint:[48,4,2,"p-grid_origin_soft_constraint","Soft constraints on the origin of the chunk grid."],inner_order:[48,4,2,"p-inner_order","Permutation specifying the element storage order within the innermost chunks.\nCorresponds to the JSON ChunkLayout.inner_order member."],inner_order_soft_constraint:[48,4,2,"p-inner_order_soft_constraint","Specifies a preferred value for inner_order rather than a\nhard constraint."],rank:[48,4,2,"p-rank","Specifies the number of dimensions."],read_chunk:[48,4,2,"p-read_chunk","Constraints on read chunks."],read_chunk_aspect_ratio:[48,4,2,"p-read_chunk_aspect_ratio","Hard constraints on the read chunk aspect ratio."],read_chunk_aspect_ratio_soft_constraint:[48,4,2,"p-read_chunk_aspect_ratio_soft_constraint","Soft constraints on the read chunk aspect ratio."],read_chunk_elements:[48,4,2,"p-read_chunk_elements","Hard constraints on the target number of elements for read chunks."],read_chunk_elements_soft_constraint:[48,4,2,"p-read_chunk_elements_soft_constraint","Soft constraints on the target number of elements for read chunks."],read_chunk_shape:[48,4,2,"p-read_chunk_shape","Hard constraints on the read chunk shape."],read_chunk_shape_soft_constraint:[48,4,2,"p-read_chunk_shape_soft_constraint","Soft constraints on the read chunk shape."],write_chunk:[48,4,2,"p-write_chunk","Constraints on write chunks."],write_chunk_aspect_ratio:[48,4,2,"p-write_chunk_aspect_ratio","Hard constraints on the write chunk aspect ratio."],write_chunk_aspect_ratio_soft_constraint:[48,4,2,"p-write_chunk_aspect_ratio_soft_constraint","Soft constraints on the write chunk aspect ratio."],write_chunk_elements:[48,4,2,"p-write_chunk_elements","Hard constraints on the target number of elements for write chunks."],write_chunk_elements_soft_constraint:[48,4,2,"p-write_chunk_elements_soft_constraint","Soft constraints on the target number of elements for write chunks."],write_chunk_shape:[48,4,2,"p-write_chunk_shape","Hard constraints on the write chunk shape."],write_chunk_shape_soft_constraint:[48,4,2,"p-write_chunk_shape_soft_constraint","Soft constraints on the write chunk shape."]},"tensorstore.CodecSpec":{__init__:[52,3,1,"","Constructs from the JSON representation."],to_json:[53,3,1,"","Converts to the JSON representation."]},"tensorstore.Context":{"__init__(default)":[61,3,1,"","Constructs a default context."],"__init__(json)":[62,3,1,"","Constructs a context from its JSON representation."],"__init__(spec)":[63,3,1,"","Constructs a context from a parsed spec."],Resource:[55,2,1,"","Handle to a context resource."],Spec:[57,2,1,"","Parsed representation of a JSON Context specification."],__getitem__:[60,3,1,"","Creates or retrieves the context resource for the given key."],parent:[64,5,1,"","Parent context from which this context inherits."],spec:[65,5,1,"","Spec from which this context was constructed."]},"tensorstore.Context.Resource":{to_json:[56,3,1,"","Returns the JSON representation of the context resource."]},"tensorstore.Context.Spec":{__init__:[58,3,1,"","Creates a context specification from its JSON representation."],to_json:[59,3,1,"","Returns the JSON representation."]},"tensorstore.Context.Spec.to_json":{include_defaults:[59,4,2,"p-include_defaults","Indicates whether to include members even if they are equal to the default value."]},"tensorstore.Context.__getitem__":{key:[60,4,2,"p-key","Resource key, of the form '<resource-type>' or\n<resource-type>#<id>."]},"tensorstore.Context.__init__(json)":{json:[62,4,2,"p-json","JSON representation of the context."],parent:[62,4,2,"p-parent","Parent context from which to inherit."]},"tensorstore.Context.__init__(spec)":{parent:[63,4,2,"p-parent","Parent context from which to inherit."],spec:[63,4,2,"p-spec","Parsed context spec."]},"tensorstore.Dim":{"__contains__(dim)":[67,3,1,"","Checks if the interval contains another interval."],"__contains__(index)":[68,3,1,"","Checks if the interval contains a given index."],"__init__(exclusive_max)":[70,3,1,"","Constructs a half-open interval [inclusive_min, exclusive_max)`."],"__init__(inclusive_max)":[71,3,1,"","Constructs a closed interval [inclusive_min, inclusive_max]."],"__init__(size)":[72,3,1,"","Constructs a sized interval [inclusive_min, inclusive_min+size)."],"__init__(unbounded)":[73,3,1,"","Constructs an unbounded interval (-inf, +inf)."],__eq__:[69,3,1,"","Compares for equality with another interval."],__iter__:[74,3,1,"","Enables iteration over the indices contained in the interval."],__len__:[75,3,1,"","Size of the interval, equivalent to size."],__repr__:[76,3,1,"","Returns the string representation as a Python expression."],__str__:[77,3,1,"","Returns the string representation of the interval."],empty:[78,5,1,"","Returns True if size is zero."],exclusive_max:[79,5,1,"","Exclusive upper bound of the interval."],exclusive_min:[80,5,1,"","Exclusive lower bound of the interval."],finite:[81,5,1,"","Indicates if the interval is finite."],hull:[82,3,1,"","Hull with another Dim."],implicit_lower:[83,5,1,"","Indicates if the lower bound is implicit/resizeable."],implicit_upper:[84,5,1,"","Indicates if the upper bound is implicit/resizeable."],inclusive_max:[85,5,1,"","Inclusive upper bound of the interval."],inclusive_min:[86,5,1,"","Inclusive lower bound of the interval."],intersect:[87,3,1,"","Intersect with another Dim."],label:[88,5,1,"","Dimension label, or the empty string to indicate an unlabeled dimension."],size:[89,5,1,"","Size of the interval."]},"tensorstore.Dim.__init__(exclusive_max)":{exclusive_max:[70,4,2,"p-exclusive_max","Exclusive upper bound."],implicit_lower:[70,4,2,"p-implicit_lower","Indicates whether the lower bound is\nimplicit."],implicit_upper:[70,4,2,"p-implicit_upper","Indicates whether the upper bound is\nimplicit."],inclusive_min:[70,4,2,"p-inclusive_min","Inclusive lower bound."],label:[70,4,2,"p-label","Dimension label."]},"tensorstore.Dim.__init__(inclusive_max)":{implicit_lower:[71,4,2,"p-implicit_lower","Indicates whether the lower bound is\nimplicit."],implicit_upper:[71,4,2,"p-implicit_upper","Indicates whether the upper bound is\nimplicit."],inclusive_max:[71,4,2,"p-inclusive_max","Inclusive upper bound."],inclusive_min:[71,4,2,"p-inclusive_min","Inclusive lower bound."],label:[71,4,2,"p-label","Dimension label."]},"tensorstore.Dim.__init__(size)":{implicit_lower:[72,4,2,"p-implicit_lower","Indicates whether the lower bound is\nimplicit."],implicit_upper:[72,4,2,"p-implicit_upper","Indicates whether the upper bound is\nimplicit."],inclusive_min:[72,4,2,"p-inclusive_min","Inclusive lower bound."],label:[72,4,2,"p-label","Dimension label."],size:[72,4,2,"p-size","Size of the interval."]},"tensorstore.Dim.__init__(unbounded)":{implicit_lower:[73,4,2,"p-implicit_lower","Indicates whether the lower bound is\nimplicit."],implicit_upper:[73,4,2,"p-implicit_upper","Indicates whether the upper bound is\nimplicit."],label:[73,4,2,"p-label","Dimension label."]},"tensorstore.Dim.hull":{other:[82,4,2,"p-other","Object to hull with."]},"tensorstore.Dim.intersect":{other:[87,4,2,"p-other","Object to intersect with."]},"tensorstore.DimExpression":{__getitem__:[91,3,1,"","Applies a NumPy-style indexing operation with default index array semantics."],diagonal:[92,5,1,"","Extracts the diagonal of the selected dimensions."],label:[93,3,1,"","Sets (or changes) the labels of the selected dimensions."],oindex:[94,3,1,"","Applies a NumPy-style indexing operation with outer indexing semantics."],stride:[95,3,1,"","Strides the domains of the selected input dimensions by the specified amounts."],translate_backward_by:[96,3,1,"","Translates (shifts) the domains of the selected input dimensions backward by the\nspecified offsets, without affecting the output range."],translate_by:[97,3,1,"","Translates (shifts) the domains of the selected input dimensions by the\nspecified offsets, without affecting the output range."],translate_to:[98,3,1,"","Translates the domains of the selected input dimensions to the specified\norigins without affecting the output range."],transpose:[99,3,1,"","Transposes the selected dimensions to the specified target indices."],vindex:[100,3,1,"","Applies a NumPy-style indexing operation with vectorized indexing semantics."]},"tensorstore.DimExpression.label":{labels:[93,4,2,"p-labels","Dimension labels for each selected dimension."]},"tensorstore.DimExpression.stride":{strides:[95,4,2,"p-strides","Strides for each selected dimension."]},"tensorstore.DimExpression.translate_backward_by":{offsets:[96,4,2,"p-offsets","The offsets for each of the selected dimensions."]},"tensorstore.DimExpression.translate_by":{offsets:[97,4,2,"p-offsets","The offsets for each of the selected dimensions."]},"tensorstore.DimExpression.translate_to":{origins:[98,4,2,"p-origins","The new origins for each of the selected dimensions."]},"tensorstore.DimExpression.transpose":{target:[99,4,2,"p-target","Target dimension indices for the selected dimensions."]},"tensorstore.Future":{__new__:[102,3,1,"","Converts a FutureLike object to a Future."],add_done_callback:[103,3,1,"","Registers a callback to be invoked upon completion of the asynchronous operation."],cancel:[104,3,1,"","Requests cancellation of the asynchronous operation."],cancelled:[105,3,1,"","Queries whether the asynchronous operation has been cancelled."],done:[106,3,1,"","Queries whether the asynchronous operation has completed or been cancelled."],exception:[107,3,1,"","Blocks until asynchronous operation completes, and returns the error if any."],force:[108,3,1,"","Ensures the asynchronous operation begins executing."],remove_done_callback:[109,3,1,"","Unregisters a previously-registered callback."],result:[110,3,1,"","Blocks until the asynchronous operation completes, and returns the result."]},"tensorstore.Future.__new__":{future:[102,4,2,"p-future","Specifies the immediate or asynchronous result."],loop:[102,4,2,"p-loop","Event loop on which to run future if it is a\ncoroutine."]},"tensorstore.Future.exception":{deadline:[107,4,2,"p-deadline","Deadline in seconds since the Unix epoch."],timeout:[107,4,2,"p-timeout","Maximum number of seconds to block."]},"tensorstore.Future.result":{deadline:[110,4,2,"p-deadline","Deadline in seconds since the Unix epoch."],timeout:[110,4,2,"p-timeout","Maximum number of seconds to block."]},"tensorstore.IndexDomain":{"__getitem__(domain)":[113,3,1,"","Slices this domain by another domain."],"__getitem__(expr)":[114,3,1,"","Transforms the domain by a dimension expression."],"__getitem__(identifier)":[115,3,1,"","Returns the single dimension specified by identifier."],"__getitem__(selection)":[116,3,1,"","Returns a new domain with a subset of the dimensions."],"__getitem__(transform)":[117,3,1,"","Transforms the domain using an explicit index transform."],"__init__(components)":[118,3,1,"","Constructs an index domain from component vectors."],"__init__(dimensions)":[119,3,1,"","Constructs an index domain from a :py:class`.Dim` sequence."],"__init__(json)":[120,3,1,"","Constructs an index domain from its JSON representation."],__len__:[121,3,1,"","Returns the number of dimensions (rank)."],__repr__:[122,3,1,"","Returns the string representation."],exclusive_max:[123,5,1,"","Exclusive upper bound of the domain."],hull:[124,3,1,"","Computes the hull (minimum containing box) with another domain."],implicit_lower_bounds:[125,5,1,"","Indicates whether the lower bound of each dimension is implicit or explicit."],implicit_upper_bounds:[126,5,1,"","Indicates whether the upper bound of each dimension is implicit or explicit."],inclusive_max:[127,5,1,"","Inclusive upper bound of the domain."],inclusive_min:[128,5,1,"","Inclusive lower bound of the domain, alias of origin."],index_exp:[129,5,1,"","Equivalent NumPy-compatible index expression."],intersect:[130,3,1,"","Intersects with another domain."],labels:[131,5,1,"","Dimension labels for each dimension."],ndim:[132,5,1,"","Alias for rank."],origin:[133,5,1,"","Inclusive lower bound of the domain."],rank:[134,5,1,"","Number of dimensions in the index space."],shape:[135,5,1,"","Shape of the domain."],size:[136,5,1,"","Total number of elements in the domain."],to_json:[137,3,1,"","Returns the JSON representation."]},"tensorstore.IndexDomain.__getitem__(expr)":{expr:[114,4,2,"p-expr","Dimension expression to apply."]},"tensorstore.IndexDomain.__getitem__(identifier)":{identifier:[115,4,2,"p-identifier","Specifies a dimension by integer index or label."]},"tensorstore.IndexDomain.__getitem__(selection)":{selection:[116,4,2,"p-selection","Specifies the dimensions to include, either by index or label."]},"tensorstore.IndexDomain.__getitem__(transform)":{transform:[117,4,2,"p-transform","Index transform, transform.output_rank must equal\nself.rank."]},"tensorstore.IndexDomain.__init__(components)":{exclusive_max:[118,4,2,"p-exclusive_max","Exclusive upper bounds for each dimension."],implicit_lower_bounds:[118,4,2,"p-implicit_lower_bounds","Indicates whether each lower bound is\nimplicit or explicit."],implicit_upper_bounds:[118,4,2,"p-implicit_upper_bounds","Indicates whether each upper bound is\nimplicit or explicit."],inclusive_max:[118,4,2,"p-inclusive_max","Inclusive upper bounds for each dimension."],inclusive_min:[118,4,2,"p-inclusive_min","Inclusive lower bounds for each dimension."],labels:[118,4,2,"p-labels","Dimension labels."],rank:[118,4,2,"p-rank","Number of dimensions."],shape:[118,4,2,"p-shape","Size for each dimension."]},"tensorstore.IndexDomain.__init__(dimensions)":{dimensions:[119,4,2,"p-dimensions","Sequence of :py:class`.Dim` objects."]},"tensorstore.IndexDomain.hull":{other:[124,4,2,"p-other","Object to hull with."]},"tensorstore.IndexDomain.intersect":{other:[130,4,2,"p-other","Object to intersect with."]},"tensorstore.IndexTransform":{"__getitem__(domain)":[141,3,1,"","Slices this index transform by another domain."],"__getitem__(expr)":[142,3,1,"","Applies a dimension expression to this transform."],"__getitem__(indices)":[143,3,1,"","Applies a NumPy-style indexing operation with default index array semantics."],"__getitem__(transform)":[144,3,1,"","Composes this index transform with another index transform."],"__init__(components)":[145,3,1,"","Constructs an index transform from component vectors."],"__init__(domain)":[146,3,1,"","Constructs an index transform from a domain and output index maps."],"__init__(json)":[147,3,1,"","Constructs an index transform from its JSON representation."],T:[139,5,1,"","View with transposed domain (reversed dimension order)."],__call__:[140,3,1,"","Maps an input index vector to an output index vector."],__repr__:[148,3,1,"","Returns the string representation."],domain:[149,5,1,"","Input domain of the index transform."],implicit_lower_bounds:[150,5,1,"","Indicates whether the lower bound of each input dimension is implicit or explicit."],implicit_upper_bounds:[151,5,1,"","Indicates whether the upper bound of each input dimension is implicit or explicit."],input_exclusive_max:[152,5,1,"","Exclusive upper bound of the input domain."],input_inclusive_max:[153,5,1,"","Inclusive upper bound of the input domain."],input_inclusive_min:[154,5,1,"","Inclusive lower bound of the input domain, alias for input_origin."],input_labels:[155,5,1,"","Dimension labels for each input dimension."],input_origin:[156,5,1,"","Inclusive lower bound of the input domain."],input_rank:[157,5,1,"","Rank of the input space."],input_shape:[158,5,1,"","Shape of the input domain."],ndim:[159,5,1,"","Rank of the input space, alias for input_rank."],oindex:[160,3,1,"","Applies a NumPy-style indexing operation with outer indexing semantics."],origin:[161,5,1,"","Inclusive lower bound of the domain."],output:[162,5,1,"","Output index maps."],output_rank:[163,5,1,"","Rank of the output space."],shape:[164,5,1,"","Shape of the domain."],size:[165,5,1,"","Total number of elements in the domain."],to_json:[166,3,1,"","Returns the JSON representation of the transform."],vindex:[167,3,1,"","Applies a NumPy-style indexing operation with vectorized indexing semantics."]},"tensorstore.IndexTransform.__call__":{indices:[140,4,2,"p-indices","Input vector of length input_rank."]},"tensorstore.IndexTransform.__init__(components)":{implicit_lower_bounds:[145,4,2,"p-implicit_lower_bounds","Indicates whether each lower bound is\nimplicit or explicit."],implicit_upper_bounds:[145,4,2,"p-implicit_upper_bounds","Indicates whether each upper bound is\nimplicit or explicit."],input_exclusive_max:[145,4,2,"p-input_exclusive_max","Exclusive upper bounds for each input dimension."],input_inclusive_max:[145,4,2,"p-input_inclusive_max","Inclusive upper bounds for each input dimension."],input_inclusive_min:[145,4,2,"p-input_inclusive_min","Inclusive lower bounds for each input dimension."],input_labels:[145,4,2,"p-input_labels","Dimension labels for each input\ndimension."],input_rank:[145,4,2,"p-input_rank","Number of input dimensions."],input_shape:[145,4,2,"p-input_shape","Size for each input dimension."],output:[145,4,2,"p-output","Sequence of output index maps, or OutputIndexMaps object\nfrom an existing transform."]},"tensorstore.IndexTransform.__init__(domain)":{domain:[146,4,2,"p-domain","The domain of the index transform."],output:[146,4,2,"p-output","Sequence of output index maps, or OutputIndexMaps object\nfrom an existing transform."]},"tensorstore.KvStore":{KeyRange:[170,2,1,"","Half-open interval of byte string keys, according to lexicographical order."],ReadResult:[177,2,1,"","Specifies the result of a read operation."],Spec:[182,2,1,"","Parsed representation of a JSON key-value store specification."],TimestampedStorageGeneration:[192,2,1,"","Specifies a storage generation identifier and a timestamp."],__delitem__:[197,3,1,"","Synchronously deletes a single key."],__getitem__:[198,3,1,"","Synchronously reads the value of a single key."],__repr__:[199,3,1,"","Returns a string representation based on the  JSON representation."],__setitem__:[200,3,1,"","Synchronously writes the value of a single key."],copy:[201,3,1,"","Returns a copy of the key-value store."],delete_range:[202,3,1,"","Deletes a key range."],list:[203,3,1,"","Lists the keys in the key-value store."],open:[204,3,1,"","Opens a key-value store."],path:[205,5,1,"","Path prefix within the base key-value store."],read:[206,3,1,"","Reads the value of a single key."],spec:[207,3,1,"","Spec that may be used to re-open or re-create the key-value store."],transaction:[208,5,1,"","Transaction bound to this key-value store."],url:[209,5,1,"","URL representation of the key-value store specification."],with_transaction:[210,3,1,"","Returns a transaction-bound view of this key-value store."],write:[211,3,1,"","Writes or deletes a single key."]},"tensorstore.KvStore.KeyRange":{__eq__:[171,3,1,"","Compares with another range for equality."],__init__:[172,3,1,"","Constructs a key range from the specified half-open bounds."],copy:[173,3,1,"","Returns a copy of the range."],empty:[174,5,1,"","Indicates if the range contains no keys."],exclusive_max:[175,5,1,"","Exclusive upper bound of the range."],inclusive_min:[176,5,1,"","Inclusive lower bound of the range."]},"tensorstore.KvStore.KeyRange.__init__":{exclusive_max:[172,4,2,"p-exclusive_max","Exclusive upper bound of the range."],inclusive_min:[172,4,2,"p-inclusive_min","Inclusive lower bound of the range."]},"tensorstore.KvStore.ReadResult":{__init__:[178,3,1,"","Constructs a read result."],stamp:[179,5,1,"","Generation and timestamp associated with the value."],state:[180,5,1,"","Indicates the interpretation of value."],value:[181,5,1,"","Value associated with the key."]},"tensorstore.KvStore.Spec":{__add__:[183,3,1,"","Returns a key-value store with the suffix appended to the path."],__new__:[184,3,1,"","Constructs from the JSON representation or a URL."],__repr__:[185,3,1,"","Returns a string representation based on the  JSON representation."],__truediv__:[186,3,1,"","Returns a key-value store with an additional path component joined to the path."],copy:[187,3,1,"","Returns a copy of the key-value store spec."],path:[188,5,1,"","Path prefix within the base key-value store."],to_json:[189,3,1,"","Converts to the JSON representation."],update:[190,3,1,"","Modifies a spec."],url:[191,5,1,"","URL representation of the key-value store specification."]},"tensorstore.KvStore.Spec.update":{context:[190,4,2,"p-context","Bind any context resource specs using the specified shared resource context."],strip_context:[190,4,2,"p-strip_context","Replace any bound context resources and unbound context resource specs by\ndefault context resource specs."],unbind_context:[190,4,2,"p-unbind_context","Convert any bound context resources to context resource specs that fully capture\nthe graph of shared context resources and interdependencies."]},"tensorstore.KvStore.TimestampedStorageGeneration":{__eq__:[193,3,1,"","Compares two timestamped storage generations for equality."],__init__:[194,3,1,"","Constructs from a storage generation and time."],generation:[195,5,1,"","Identifies a specific version of a key-value store entry."],time:[196,5,1,"","Time (seconds since Unix epoch) at which generation is valid."]},"tensorstore.KvStore.__delitem__":{key:[197,4,2,"p-key","Key to delete."]},"tensorstore.KvStore.__getitem__":{key:[198,4,2,"p-key","The key to read."]},"tensorstore.KvStore.__setitem__":{key:[200,4,2,"p-key","Key to write/delete."],value:[200,4,2,"p-value","Value to store, or None to delete."]},"tensorstore.KvStore.delete_range":{range:[202,4,2,"p-range","Key range to delete."]},"tensorstore.KvStore.list":{range:[203,4,2,"p-range","If specified, restricts to the specified key range."],strip_prefix_length:[203,4,2,"p-strip_prefix_length","Strips the specified number of bytes from the start of\nthe returned keys."]},"tensorstore.KvStore.open":{context:[204,4,2,"p-context","Bind any context resource specs using the specified shared resource context."],spec:[204,4,2,"p-spec","Key-value store spec to open."],transaction:[204,4,2,"p-transaction","Transaction to use for read/write operations."]},"tensorstore.KvStore.read":{if_not_equal:[206,4,2,"p-if_not_equal","If specified, the read is aborted if the generation associated\nwith key matches if_not_equal."],key:[206,4,2,"p-key","The key to read."],staleness_bound:[206,4,2,"p-staleness_bound","Specifies a time in (fractional) seconds since the Unix\nepoch."]},"tensorstore.KvStore.spec":{retain_context:[207,4,2,"p-retain_context","Retain all bound context resources (e.g."],unbind_context:[207,4,2,"p-unbind_context","Convert any bound context resources to context resource specs that fully capture\nthe graph of shared context resources and interdependencies."]},"tensorstore.KvStore.write":{if_equal:[211,4,2,"p-if_equal","If specified, indicates a conditional write operation."],key:[211,4,2,"p-key","Key to write/delete."],value:[211,4,2,"p-value","Value to store, or None to delete."]},"tensorstore.OutputIndexMap":{"__init__(constant)":[213,3,1,"","Constructs a constant map."],"__init__(index_array)":[214,3,1,"","Constructs an index array map."],"__init__(input_dimension)":[215,3,1,"","Constructs a single input dimension map."],index_array:[216,5,1,"",""],index_range:[217,5,1,"",""],input_dimension:[218,5,1,"",""],method:[219,5,1,"",""],offset:[220,5,1,"",""],stride:[221,5,1,"",""]},"tensorstore.OutputIndexMaps":{__getitem__:[223,3,1,"",""],__len__:[224,3,1,"","Returns the output rank."],rank:[225,5,1,"","Returns the output rank."]},"tensorstore.OutputIndexMethod":{__init__:[227,3,1,"",""],__str__:[228,3,1,"","name(self: handle) -> str"],array:[229,6,1,"",""],constant:[230,6,1,"",""],name:[231,5,1,"",""],single_input_dimension:[232,6,1,"",""],value:[233,5,1,"",""]},"tensorstore.Promise":{"new":[235,3,1,"","Creates a linked promise and future pair."],set_exception:[236,3,1,"","Marks the linked future as unsuccessfully completed with the specified error."],set_result:[237,3,1,"","Marks the linked future as successfully completed with the specified result."]},"tensorstore.Schema":{"__getitem__(domain)":[241,3,1,"","Transforms the schema using an explicit index domain."],"__getitem__(expr)":[242,3,1,"","Transforms the schema using a dimension expression."],"__getitem__(indices)":[243,3,1,"","Transforms the schema using NumPy-style indexing with default index array semantics."],"__getitem__(transform)":[244,3,1,"","Transforms the schema using an explicit index transform."],"__init__(components)":[245,3,1,"","Constructs from component parts."],"__init__(json)":[246,3,1,"","Constructs from its JSON representation."],T:[239,5,1,"","View with transposed domain (reversed dimension order)."],__eq__:[240,3,1,"","Compares with another Schema for equality based on the JSON representation."],__repr__:[247,3,1,"","Returns a string representation based on the  JSON representation."],chunk_layout:[248,5,1,"","Chunk layout constraints specified by the schema."],codec:[249,5,1,"","Codec constraints specified by the schema."],copy:[250,3,1,"","Returns a copy of the schema."],dimension_units:[251,5,1,"","Physical units of each dimension of the domain."],domain:[252,5,1,"","Domain of the schema, or None if unspecified."],dtype:[253,5,1,"","Data type, or None if unspecified."],fill_value:[254,5,1,"","Fill value specified by the schema."],ndim:[255,5,1,"","Alias for rank."],oindex:[256,3,1,"","Transforms the schema using NumPy-style indexing with outer indexing semantics."],origin:[257,5,1,"","Inclusive lower bound of the domain."],rank:[258,5,1,"","Rank of the schema, or None if unspecified."],shape:[259,5,1,"","Shape of the domain."],size:[260,5,1,"","Total number of elements in the domain."],to_json:[261,3,1,"","Converts to the JSON representation."],update:[262,3,1,"","Adds additional constraints."],vindex:[263,3,1,"","Transforms the schema using NumPy-style indexing with vectorized indexing semantics."]},"tensorstore.Schema.__getitem__(domain)":{domain:[241,4,2,"p-domain","Index domain, must have dimension labels that can be\naligned to self.domain."]},"tensorstore.Schema.__getitem__(transform)":{transform:[244,4,2,"p-transform","Index transform, transform.output_rank must equal\nself.rank."]},"tensorstore.Schema.__init__(components)":{chunk_layout:[245,4,2,"p-chunk_layout","Constrains the chunk layout."],codec:[245,4,2,"p-codec","Constrains the codec."],dimension_units:[245,4,2,"p-dimension_units","Specifies the physical units of each dimension of the domain."],domain:[245,4,2,"p-domain","Constrains the domain of the TensorStore."],dtype:[245,4,2,"p-dtype","Constrains the data type of the TensorStore."],fill_value:[245,4,2,"p-fill_value","Specifies the fill value for positions that have not been written."],rank:[245,4,2,"p-rank","Constrains the rank of the TensorStore."],schema:[245,4,2,"p-schema","Additional schema constraints to merge with existing constraints."],shape:[245,4,2,"p-shape","Constrains the shape and origin of the TensorStore."]},"tensorstore.Schema.update":{chunk_layout:[262,4,2,"p-chunk_layout","Constrains the chunk layout."],codec:[262,4,2,"p-codec","Constrains the codec."],dimension_units:[262,4,2,"p-dimension_units","Specifies the physical units of each dimension of the domain."],domain:[262,4,2,"p-domain","Constrains the domain of the TensorStore."],dtype:[262,4,2,"p-dtype","Constrains the data type of the TensorStore."],fill_value:[262,4,2,"p-fill_value","Specifies the fill value for positions that have not been written."],rank:[262,4,2,"p-rank","Constrains the rank of the TensorStore."],schema:[262,4,2,"p-schema","Additional schema constraints to merge with existing constraints."],shape:[262,4,2,"p-shape","Constrains the shape and origin of the TensorStore."]},"tensorstore.Spec":{"__getitem__(domain)":[267,3,1,"","Transforms the spec using an explicit index domain."],"__getitem__(expr)":[268,3,1,"","Transforms the spec using a dimension expression."],"__getitem__(indices)":[269,3,1,"","Transforms the spec using NumPy-style indexing with default index array semantics."],"__getitem__(transform)":[270,3,1,"","Transforms the spec using an explicit index transform."],T:[265,5,1,"","View with transposed domain (reversed dimension order)."],__eq__:[266,3,1,"","Compares with another Spec for equality based on the JSON representation."],__new__:[271,3,1,"","Constructs from the JSON representation."],__repr__:[272,3,1,"","Returns a string representation based on the JSON representation."],chunk_layout:[273,5,1,"","Effective chunk layout, including any constraints implied\nby driver-specific options."],codec:[274,5,1,"","Effective codec, including any constraints implied\nby driver-specific options."],copy:[275,3,1,"","Returns a copy of the spec."],dimension_units:[276,5,1,"","Effective physical units of each dimension of the domain, including any\nconstraints implied by driver-specific options."],domain:[277,5,1,"","Effective index domain, including any constraints implied\nby driver-specific options."],dtype:[278,5,1,"","Data type, or None if unspecified."],fill_value:[279,5,1,"","Effective fill value, including any constraints implied by driver-specific\noptions."],kvstore:[280,5,1,"","Spec of the associated key-value store used as the underlying storage."],ndim:[281,5,1,"","Alias for rank."],oindex:[282,3,1,"","Transforms the spec using NumPy-style indexing with outer indexing semantics."],origin:[283,5,1,"","Inclusive lower bound of the domain."],rank:[284,5,1,"","Returns the rank of the domain, or None if unspecified."],schema:[285,5,1,"","Effective schema, including any constraints implied by driver-specific options."],shape:[286,5,1,"","Shape of the domain."],size:[287,5,1,"","Total number of elements in the domain."],to_json:[288,3,1,"","Converts to the JSON representation."],transform:[289,5,1,"","The index transform, or None if unspecified."],update:[290,3,1,"","Adds additional constraints or changes the open mode."],vindex:[291,3,1,"","Transforms the spec using NumPy-style indexing with vectorized indexing semantics."]},"tensorstore.Spec.__getitem__(domain)":{domain:[267,4,2,"p-domain","Index domain, must have dimension labels that can be\naligned to self.domain."]},"tensorstore.Spec.__getitem__(transform)":{transform:[270,4,2,"p-transform","Index transform, transform.output_rank must equal\nself.rank."]},"tensorstore.Spec.update":{chunk_layout:[290,4,2,"p-chunk_layout","Constrains the chunk layout."],codec:[290,4,2,"p-codec","Constrains the codec."],context:[290,4,2,"p-context","Bind any context resource specs using the specified shared resource context."],create:[290,4,2,"p-create","Allow creating a new TensorStore."],delete_existing:[290,4,2,"p-delete_existing","Delete any existing data before creating a new array."],dimension_units:[290,4,2,"p-dimension_units","Specifies the physical units of each dimension of the domain."],domain:[290,4,2,"p-domain","Constrains the domain of the TensorStore."],dtype:[290,4,2,"p-dtype","Constrains the data type of the TensorStore."],fill_value:[290,4,2,"p-fill_value","Specifies the fill value for positions that have not been written."],kvstore:[290,4,2,"p-kvstore","Sets the associated key-value store used as the underlying storage."],open:[290,4,2,"p-open","Allow opening an existing TensorStore."],rank:[290,4,2,"p-rank","Constrains the rank of the TensorStore."],schema:[290,4,2,"p-schema","Additional schema constraints to merge with existing constraints."],shape:[290,4,2,"p-shape","Constrains the shape and origin of the TensorStore."],strip_context:[290,4,2,"p-strip_context","Replace any bound context resources and unbound context resource specs by\ndefault context resource specs."],unbind_context:[290,4,2,"p-unbind_context","Convert any bound context resources to context resource specs that fully capture\nthe graph of shared context resources and interdependencies."]},"tensorstore.TensorStore":{"__getitem__(domain)":[295,3,1,"","Computes a virtual view using an explicit index domain."],"__getitem__(expr)":[296,3,1,"","Computes a virtual view using a dimension expression."],"__getitem__(indices)":[297,3,1,"","Computes a virtual view using NumPy-style indexing with default index array semantics."],"__getitem__(transform)":[298,3,1,"","Computes a virtual view using an explicit index transform."],"__setitem__(domain)":[299,3,1,"","Synchronously writes using an explicit index domain."],"__setitem__(expr)":[300,3,1,"","Synchronously writes using a dimension expression."],"__setitem__(indices)":[301,3,1,"","Synchronously writes using NumPy-style indexing with default index array semantics."],"__setitem__(transform)":[302,3,1,"","Synchronously writes using an explicit index transform."],T:[293,5,1,"","View with transposed domain (reversed dimension order)."],__array__:[294,3,1,"","Automatic conversion to numpy.ndarray for interoperability with NumPy."],astype:[303,3,1,"","Returns a read/write view as the specified data type."],chunk_layout:[304,5,1,"","Chunk layout of the TensorStore."],codec:[305,5,1,"","Data codec spec."],dimension_units:[306,5,1,"","Physical units of each dimension of the domain."],domain:[307,5,1,"","Domain of the array."],dtype:[308,5,1,"","Data type of the array."],fill_value:[309,5,1,"","Fill value for positions not yet written."],kvstore:[310,5,1,"","Associated key-value store used as the underlying storage."],mode:[311,5,1,"","Read/write mode."],ndim:[312,5,1,"","Alias for rank."],oindex:[313,3,1,"","Computes a virtual view using NumPy-style indexing with outer indexing semantics."],origin:[315,5,1,"","Inclusive lower bound of the domain."],rank:[316,5,1,"","Number of dimensions in the domain."],read:[317,3,1,"","Reads the data within the current domain."],readable:[318,5,1,"","Indicates if reading is supported."],resolve:[319,3,1,"","Obtains updated bounds, subject to the cache policy."],schema:[320,5,1,"","Schema of this TensorStore."],shape:[321,5,1,"","Shape of the domain."],size:[322,5,1,"","Total number of elements in the domain."],spec:[323,3,1,"","Spec that may be used to re-open or re-create the TensorStore."],transaction:[324,5,1,"","Associated transaction used for read/write operations."],vindex:[325,3,1,"","Computes a virtual view using NumPy-style indexing with vectorized indexing semantics."],with_transaction:[327,3,1,"","Returns a transaction-bound view of this TensorStore."],writable:[328,5,1,"","Indicates if writing is supported."],write:[329,3,1,"","Writes to the current domain."]},"tensorstore.TensorStore.__getitem__(domain)":{domain:[295,4,2,"p-domain","Index domain, must have dimension labels that can be\naligned to self.domain."]},"tensorstore.TensorStore.__getitem__(transform)":{transform:[298,4,2,"p-transform","Index transform, transform.output_rank must equal\nself.rank."]},"tensorstore.TensorStore.__setitem__(domain)":{source:[299,4,2,"p-source","Source array, broadcast-compatible with\nself.domain[transform] and with a data type convertible to\nself.dtype."],transform:[299,4,2,"p-transform","Index transform, transform.output_rank must equal\nself.rank."]},"tensorstore.TensorStore.__setitem__(indices)":{indices:[301,4,2,"p-indices","NumPy-style indexing terms."],source:[301,4,2,"p-source","Source array, broadcast-compatible with\nself[indices].domain and with a data type convertible to\nself.dtype."]},"tensorstore.TensorStore.__setitem__(transform)":{source:[302,4,2,"p-source","Source array, broadcast-compatible with\nself.domain[transform] and with a data type convertible to\nself.dtype."],transform:[302,4,2,"p-transform","Index transform, transform.output_rank must equal\nself.rank."]},"tensorstore.TensorStore.oindex":{__setitem__:[314,3,1,"","Synchronously writes using NumPy-style indexing with outer indexing semantics."]},"tensorstore.TensorStore.oindex.__setitem__":{indices:[314,4,2,"p-indices","NumPy-style indexing terms."],source:[314,4,2,"p-source","Source array, broadcast-compatible with\nself.oindex[indices].domain and with a data type convertible to\nself.dtype."]},"tensorstore.TensorStore.read":{order:[317,4,2,"p-order","Contiguous layout order of the returned array:"]},"tensorstore.TensorStore.spec":{create:[323,4,2,"p-create","Allow creating a new TensorStore."],delete_existing:[323,4,2,"p-delete_existing","Delete any existing data before creating a new array."],minimal_spec:[323,4,2,"p-minimal_spec","Indicates whether to include in the returned Spec the\nmetadata necessary to re-create the TensorStore."],open:[323,4,2,"p-open","Allow opening an existing TensorStore."],retain_context:[323,4,2,"p-retain_context","Retain all bound context resources (e.g."],unbind_context:[323,4,2,"p-unbind_context","Convert any bound context resources to context resource specs that fully capture\nthe graph of shared context resources and interdependencies."]},"tensorstore.TensorStore.vindex":{__setitem__:[326,3,1,"","Synchronously writes using NumPy-style indexing with vectorized indexing semantics."]},"tensorstore.TensorStore.vindex.__setitem__":{indices:[326,4,2,"p-indices","NumPy-style indexing terms."],source:[326,4,2,"p-source","Source array, broadcast-compatible with\nself.vindex[indices].domain and with a data type convertible to\nself.dtype."]},"tensorstore.TensorStore.write":{source:[329,4,2,"p-source","Source array, broadcast-compatible with\nself.domain and with a data type convertible to\nself.dtype."]},"tensorstore.Transaction":{__init__:[331,3,1,"","Creates a new transaction."],abort:[332,3,1,"","Aborts the transaction."],aborted:[333,5,1,"","Indicates whether the transaction has been aborted."],atomic:[334,5,1,"","Indicates whether the transaction is atomic."],commit_async:[335,3,1,"","Asynchronously commits the transaction."],commit_started:[336,5,1,"","Indicates whether the commit of the transaction has already started."],commit_sync:[337,3,1,"","Synchronously commits the transaction."],future:[338,5,1,"","Commit result future."],open:[339,5,1,"","Indicates whether the transaction is still open."]},"tensorstore.Unit":{"__init__(components)":[342,3,1,"","Constructs a unit from a multiplier and base unit."],"__init__(json)":[343,3,1,"","Constructs a unit from its JSON representation."],"__init__(multiplier)":[344,3,1,"","Constructs a dimension-less quantity of the specified value."],"__init__(pair)":[345,3,1,"","Constructs a unit from a multiplier and base unit pair."],"__init__(unit)":[346,3,1,"","Constructs a unit from a string."],__eq__:[341,3,1,"","Compares two units for equality."],__mul__:[347,3,1,"","Multiplies this unit by the specified multiplier."],__truediv__:[348,3,1,"","Divides this unit by the specified divisor."],base_unit:[349,5,1,"","Base unit from which this unit is derived."],multiplier:[350,5,1,"","Multiplier for the base_unit."],to_json:[351,3,1,"","Converts to the JSON representation."]},"tensorstore.VirtualChunkedReadParameters":{if_not_equal:[353,5,1,"","Cached generation, read request can be skipped if no newer data is available."],staleness_bound:[354,5,1,"","Read may be fulfilled with cached data no older than the specified bound."]},"tensorstore.VirtualChunkedWriteParameters":{if_equal:[356,5,1,"","If non-empty, writeback should be conditioned on the existing data matching the specified generation."]},"tensorstore.WriteFutures":{add_done_callback:[358,3,1,"",""],cancel:[359,3,1,"",""],cancelled:[360,3,1,"",""],commit:[361,5,1,"",""],copy:[362,5,1,"",""],done:[363,3,1,"",""],exception:[364,3,1,"",""],remove_done_callback:[365,3,1,"",""],result:[366,3,1,"",""]},"tensorstore.array":{array:[367,4,2,"p-array","Source array."],context:[367,4,2,"p-context","Context to use."],dtype:[367,4,2,"p-dtype","Data type to which array will be converted."]},"tensorstore.d":{__class_getitem__:[374,3,1,"","Constructs from a sequence of dimension indices, ranges, and/or labels."]},"tensorstore.dtype":{"__init__(dtype)":[379,3,1,"","Construct from an existing TensorStore or NumPy data type."],"__init__(name)":[380,3,1,"","Construct by name."],__call__:[378,3,1,"","Construct a scalar instance of this data type"],name:[381,5,1,"",""],numpy_dtype:[382,5,1,"",""],to_json:[383,3,1,"",""],type:[384,5,1,"",""]},"tensorstore.open":{chunk_layout:[395,4,2,"p-chunk_layout","Constrains the chunk layout."],codec:[395,4,2,"p-codec","Constrains the codec."],context:[395,4,2,"p-context","Shared resource context."],create:[395,4,2,"p-create","Allow creating a new TensorStore."],delete_existing:[395,4,2,"p-delete_existing","Delete any existing data before creating a new array."],dimension_units:[395,4,2,"p-dimension_units","Specifies the physical units of each dimension of the domain."],domain:[395,4,2,"p-domain","Constrains the domain of the TensorStore."],dtype:[395,4,2,"p-dtype","Constrains the data type of the TensorStore."],fill_value:[395,4,2,"p-fill_value","Specifies the fill value for positions that have not been written."],kvstore:[395,4,2,"p-kvstore","Sets the associated key-value store used as the underlying storage."],open:[395,4,2,"p-open","Allow opening an existing TensorStore."],rank:[395,4,2,"p-rank","Constrains the rank of the TensorStore."],read:[395,4,2,"p-read","Allow read access."],schema:[395,4,2,"p-schema","Additional schema constraints to merge with existing constraints."],shape:[395,4,2,"p-shape","Constrains the shape and origin of the TensorStore."],spec:[395,4,2,"p-spec","TensorStore Spec to open."],transaction:[395,4,2,"p-transaction","Transaction to use for opening/creating, and for subsequent operations."],write:[395,4,2,"p-write","Allow write access."]},"tensorstore.virtual_chunked":{chunk_layout:[402,4,2,"p-chunk_layout","Constrains the chunk layout."],context:[402,4,2,"p-context","Shared resource context."],dimension_units:[402,4,2,"p-dimension_units","Specifies the physical units of each dimension of the domain."],domain:[402,4,2,"p-domain","Constrains the domain of the TensorStore."],dtype:[402,4,2,"p-dtype","Constrains the data type of the TensorStore."],loop:[402,4,2,"p-loop","Event loop on which to execute read_function and/or\nwrite_function if they are\nasync functions."],rank:[402,4,2,"p-rank","Constrains the rank of the TensorStore."],read_function:[402,4,2,"p-read_function","Callback that handles chunk read requests."],schema:[402,4,2,"p-schema","Additional schema constraints to merge with existing constraints."],shape:[402,4,2,"p-shape","Constrains the shape and origin of the TensorStore."],transaction:[402,4,2,"p-transaction","Transaction to use for opening/creating, and for subsequent operations."],write_function:[402,4,2,"p-write_function","Callback that handles chunk write requests."]},ChunkLayout:{chunk:[405,1,2,"json-ChunkLayout.chunk","Combined constraints on write/read/codec chunks."],codec_chunk:[405,1,2,"json-ChunkLayout.codec_chunk","Constraints on the chunk grid used by the codec, if applicable."],grid_origin:[405,1,2,"json-ChunkLayout.grid_origin","Specifies hard constraints on the origin of the chunk grid."],grid_origin_soft_constraint:[405,1,2,"json-ChunkLayout.grid_origin_soft_constraint","Specifies preferred values for the origin of the chunk grid rather than\nhard constraints."],inner_order:[405,1,2,"json-ChunkLayout.inner_order","Permutation specifying the element storage order within the innermost\nchunks."],inner_order_soft_constraint:[405,1,2,"json-ChunkLayout.inner_order_soft_constraint","Specifies a preferred value for inner_order rather than a\nhard constraint.  If inner_order is also specified, it\ntakes precedence."],read_chunk:[405,1,2,"json-ChunkLayout.read_chunk","Constraints on the chunk grid over which reads may be efficiently\npartitioned."],write_chunk:[405,1,2,"json-ChunkLayout.write_chunk","Constraints on the chunk grid over which writes may be efficiently\npartitioned."]},Codec:{driver:[405,1,2,"json-Codec.driver","Driver identifier"]},Context:{"&lt;resource-type&gt;":[0,1,2,"json-Context.<resource-type>",null],"&lt;resource-type&gt;#&lt;id&gt;":[0,1,2,"json-Context.<resource-type>#<id>",null],cache_pool:[0,0,1,"json-Context.cache_pool",""],data_copy_concurrency:[0,0,1,"json-Context.data_copy_concurrency",""],file_io_concurrency:[0,0,1,"json-Context.file_io_concurrency",""],gcs_request_concurrency:[16,0,1,"json-Context.gcs_request_concurrency",""],gcs_request_retries:[16,0,1,"json-Context.gcs_request_retries",""],gcs_user_project:[16,0,1,"json-Context.gcs_user_project",""],memory_key_value_store:[18,0,1,"json-Context.memory_key_value_store",""]},DownsampleMethod:{max:[3,1,2,"json-DownsampleMethod.max",""],mean:[3,1,2,"json-DownsampleMethod.mean",""],median:[3,1,2,"json-DownsampleMethod.median",""],min:[3,1,2,"json-DownsampleMethod.min",""],mode:[3,1,2,"json-DownsampleMethod.mode",""],stride:[3,1,2,"json-DownsampleMethod.stride",""]},IndexDomain:{exclusive_max:[13,1,2,"json-IndexDomain.exclusive_max","Exclusive upper bounds of the domain."],inclusive_max:[13,1,2,"json-IndexDomain.inclusive_max","Inclusive upper bounds of the domain."],inclusive_min:[13,1,2,"json-IndexDomain.inclusive_min","Inclusive lower bounds of the domain."],labels:[13,1,2,"json-IndexDomain.labels","Dimension labels for each dimension."],rank:[13,1,2,"json-IndexDomain.rank","Number of dimensions."],shape:[13,1,2,"json-IndexDomain.shape","Extent of each dimension of the domain."]},IndexTransform:{input_exclusive_max:[13,1,2,"json-IndexTransform.input_exclusive_max","Exclusive upper bounds of the input domain."],input_inclusive_max:[13,1,2,"json-IndexTransform.input_inclusive_max","Inclusive upper bounds of the input domain."],input_inclusive_min:[13,1,2,"json-IndexTransform.input_inclusive_min","Inclusive lower bounds of the input domain."],input_labels:[13,1,2,"json-IndexTransform.input_labels","Dimension labels for each input domain dimension."],input_rank:[13,1,2,"json-IndexTransform.input_rank","Number of input dimensions."],input_shape:[13,1,2,"json-IndexTransform.input_shape","Extent of each dimension of the input domain."],output:[13,1,2,"json-IndexTransform.output","Specifies the output index map for each output dimension."]},KeyValueStoreBackedChunkDriver:{cache_pool:[6,1,2,"json-KeyValueStoreBackedChunkDriver.cache_pool",""],context:[6,1,2,"json-KeyValueStoreBackedChunkDriver.context","Specifies context resources that augment/override the parent context."],create:[6,1,2,"json-KeyValueStoreBackedChunkDriver.create",""],data_copy_concurrency:[6,1,2,"json-KeyValueStoreBackedChunkDriver.data_copy_concurrency",""],delete_existing:[6,1,2,"json-KeyValueStoreBackedChunkDriver.delete_existing",""],driver:[6,1,2,"json-KeyValueStoreBackedChunkDriver.driver","Driver identifier"],dtype:[6,1,2,"json-KeyValueStoreBackedChunkDriver.dtype","Specifies the data type."],kvstore:[6,1,2,"json-KeyValueStoreBackedChunkDriver.kvstore",""],open:[6,1,2,"json-KeyValueStoreBackedChunkDriver.open",""],path:[6,1,2,"json-KeyValueStoreBackedChunkDriver.path","Additional path within the KvStore specified by\nkvstore."],rank:[6,1,2,"json-KeyValueStoreBackedChunkDriver.rank","Specifies the rank of the TensorStore."],recheck_cached_data:[6,1,2,"json-KeyValueStoreBackedChunkDriver.recheck_cached_data",""],recheck_cached_metadata:[6,1,2,"json-KeyValueStoreBackedChunkDriver.recheck_cached_metadata",""],schema:[6,1,2,"json-KeyValueStoreBackedChunkDriver.schema","Specifies constraints on the schema."],transform:[6,1,2,"json-KeyValueStoreBackedChunkDriver.transform","Specifies a transform."]},KvStore:{context:[17,1,2,"json-KvStore.context",""],driver:[17,1,2,"json-KvStore.driver","Key-value store driver identifier"],path:[17,1,2,"json-KvStore.path","Key prefix within the key-value store."]},OutputIndexMap:{index_array:[13,1,2,"json-OutputIndexMap.index_array","If present, indicates that this output dimension uses an index\narray map, with the index array specified as a nested list of rank\nequal to the input_rank."],index_array_bounds:[13,1,2,"json-OutputIndexMap.index_array_bounds",""],input_dimension:[13,1,2,"json-OutputIndexMap.input_dimension","If present, indicates that this output dimension uses a single\ninput dimension map with the specified input dimension.  Must not\nbe specified in conjunction with index_array."],offset:[13,1,2,"json-OutputIndexMap.offset","Specifies an offset for this output dimension.  If neither\ninput_dimension nor index_array is\nspecified, this specifies the constant value to which this output\ndimension maps."],stride:[13,1,2,"json-OutputIndexMap.stride","Multiplier for the input index specified by\ninput_dimension or the index array value specified by\nindex_array."]},Schema:{chunk_layout:[405,1,2,"json-Schema.chunk_layout","Data storage layout constraints."],codec:[405,1,2,"json-Schema.codec",""],dimension_units:[405,1,2,"json-Schema.dimension_units","Physical units of each dimension."],domain:[405,1,2,"json-Schema.domain","Domain of the TensorStore, including bounds and optional dimension labels."],dtype:[405,1,2,"json-Schema.dtype","Specifies the data type of the TensorStore."],fill_value:[405,1,2,"json-Schema.fill_value","Fill value to use for missing data."],rank:[405,1,2,"json-Schema.rank","Number of dimensions."]},TensorStore:{context:[406,1,2,"json-TensorStore.context","Specifies context resources that augment/override the parent context."],driver:[406,1,2,"json-TensorStore.driver","Driver identifier"],dtype:[406,1,2,"json-TensorStore.dtype","Specifies the data type."],rank:[406,1,2,"json-TensorStore.rank","Specifies the rank of the TensorStore."],schema:[406,1,2,"json-TensorStore.schema","Specifies constraints on the schema."],transform:[406,1,2,"json-TensorStore.transform","Specifies a transform."]},dtype:{"byte":[406,1,2,"json-dtype.byte","Single byte."],"char":[406,1,2,"json-dtype.char","Single byte, interpreted as an ASCII character."],bfloat16:[406,1,2,"json-dtype.bfloat16","bfloat16 floating-point format number."],bool:[406,1,2,"json-dtype.bool","Boolean value (0 or 1)."],complex128:[406,1,2,"json-dtype.complex128","Complex number, where the real and imaginary components are each\nrepresented by a float64."],complex64:[406,1,2,"json-dtype.complex64","Complex number, where the real and imaginary components are each\nrepresented by a float32."],float16:[406,1,2,"json-dtype.float16","IEEE 754 binary16\nhalf-precision floating-point number."],float32:[406,1,2,"json-dtype.float32","IEEE 754 binary32\nsingle-precision floating-point number."],float64:[406,1,2,"json-dtype.float64","IEEE 754 binary64\ndouble-precision floating-point number."],int16:[406,1,2,"json-dtype.int16","16-bit signed two's-complement integer."],int32:[406,1,2,"json-dtype.int32","32-bit signed two's-complement integer."],int64:[406,1,2,"json-dtype.int64","64-bit signed two's-complement integer."],int8:[406,1,2,"json-dtype.int8","8-bit signed two's-complement integer."],json:[406,1,2,"json-dtype.json","JSON value."],string:[406,1,2,"json-dtype.string","Byte string."],uint16:[406,1,2,"json-dtype.uint16","16-bit unsigned integer."],uint32:[406,1,2,"json-dtype.uint32","32-bit unsigned integer."],uint64:[406,1,2,"json-dtype.uint64","64-bit unsigned integer."],uint8:[406,1,2,"json-dtype.uint8","8-bit unsigned integer."],ustring:[406,1,2,"json-dtype.ustring","Unicode string (represented in memory as UTF-8)."]},tensorstore:{"downsample(spec)":[375,7,1,"","Returns a virtual downsampled view view of a Spec."],"downsample(store)":[376,7,1,"","Returns a virtual downsampled view of a TensorStore."],ChunkLayout:[20,2,1,"","Describes the storage layout of a tensorstore.TensorStore."],CodecSpec:[51,2,1,"","Specifies driver-specific encoding/decoding parameters."],Context:[54,2,1,"","Manages shared TensorStore context resources, such as caches and credentials."],Dim:[66,2,1,"","1-d index interval with optionally-implicit bounds and dimension label."],DimExpression:[90,2,1,"","Specifies an advanced indexing operation."],Future:[101,2,1,"","Handle for consuming the result of an asynchronous operation."],FutureLike:[111,2,1,"","Abstract base class for types representing an asynchronous result."],IndexDomain:[112,2,1,"","Domain (including bounds and optional dimension labels) of an N-dimensional index space."],IndexTransform:[138,2,1,"","Represents a transform from an input index space to an output space."],Indexable:[168,2,1,"","Abstract base class for types that support TensorStore indexing operations."],KvStore:[169,2,1,"","Key-value store that maps an ordered set of byte string keys to byte string values."],OutputIndexMap:[212,2,1,"","Represents an output index map for an index transform."],OutputIndexMaps:[222,2,1,"","View of the output index maps for an index transform."],OutputIndexMethod:[226,2,1,"","Indicates the output index method of an OutputIndexMap."],Promise:[234,2,1,"","Handle for producing the result of an asynchronous operation."],Schema:[238,2,1,"","Driver-independent options for defining a TensorStore schema."],Spec:[264,2,1,"","Specification for opening or creating a TensorStore."],TensorStore:[292,2,1,"","Asynchronous multi-dimensional array handle."],Transaction:[330,2,1,"","Transactions are used to stage a group of modifications (e.g. writes to\ntensorstore.TensorStore objects) in memory, and then either commit the\ngroup all at once or abort it."],Unit:[340,2,1,"","Specifies a physical quantity/unit."],VirtualChunkedReadParameters:[352,2,1,"","Options passed to read callbacks used with virtual_chunked."],VirtualChunkedWriteParameters:[355,2,1,"","Options passed to write callbacks used with virtual_chunked."],WriteFutures:[357,2,1,"","Handle for consuming the result of an asynchronous write operation."],array:[367,7,1,"","Returns a TensorStore that reads/writes from an in-memory array."],bfloat16:[368,8,1,"","bfloat16 floating-point data type."],bool:[369,8,1,"","Boolean data type (0 or 1).  Corresponds to the python:bool type and numpy.bool_."],cast:[370,7,1,"","Returns a read/write view as the specified data type."],complex128:[371,8,1,"","Complex number based on float64.  Corresponds to numpy.complex128."],complex64:[372,8,1,"","Complex number based on float32.  Corresponds to numpy.complex64."],d:[373,2,1,"","Specifies a dimension selection, for starting a dimension expression."],dtype:[377,2,1,"","TensorStore data type representation."],float16:[385,8,1,"","IEEE 754 binary16 half-precision floating-point data type.  Correspond to numpy.float16."],float32:[386,8,1,"","IEEE 754 binary32 single-precision floating-point data type.  Corresponds to numpy.float32."],float64:[387,8,1,"","IEEE 754 binary64 double-precision floating-point data type.  Corresponds to numpy.float64."],inf:[388,8,1,"","Special constant equal to 2^{62}-1 that indicates an unbounded index domain."],int16:[389,8,1,"","16-bit signed two's-complement integer data type.  Corresponds to numpy.int16."],int32:[390,8,1,"","32-bit signed two's-complement integer data type.  Corresponds to numpy.int32."],int64:[391,8,1,"","32-bit signed two's-complement integer data type.  Corresponds to numpy.int64."],int8:[392,8,1,"","8-bit signed two's-complement integer data type.  Corresponds to numpy.int8."],json:[393,8,1,"","JSON data type.  Corresponds to an arbitrary Python JSON value."],newaxis:[394,8,1,"","Alias for None used in indexing expressions to specify a new singleton dimension."],open:[395,7,1,"","Opens or creates a TensorStore from a Spec."],string:[396,8,1,"","Variable-length byte string data type.  Corresponds to the Python python:bytes type."],uint16:[397,8,1,"","16-bit unsigned integer.  Corresponds to numpy.uint16."],uint32:[398,8,1,"","32-bit unsigned integer.  Corresponds to numpy.uint32."],uint64:[399,8,1,"","64-bit unsigned integer data type.  Corresponds to numpy.uint64."],uint8:[400,8,1,"","8-bit unsigned integer.  Corresponds to numpy.uint8."],ustring:[401,8,1,"","Variable-length Unicode string data type.  Corresponds to the Python python:str type."],virtual_chunked:[402,7,1,"","Creates a TensorStore where the content is read/written chunk-wise by an arbitrary function."]}},objnames:{"0":["json","schema","JSON type"],"1":["json","subschema","JSON member"],"2":["py","class","Python class"],"3":["py","method","Python method"],"4":["py","parameter","Python parameter"],"5":["py","property","Python property"],"6":["py","attribute","Python attribute"],"7":["py","function","Python function"],"8":["py","data","Python data"],"9":["std","envvar","environment variable"]},objtypes:{"0":"json:schema","1":"json:subschema","2":"py:class","3":"py:method","4":"py:parameter","5":"py:property","6":"py:attribute","7":"py:function","8":"py:data","9":"std:envvar"},terms:{"0":[0,1,2,3,4,5,6,7,8,9,10,13,14,19,36,41,43,44,47,48,72,76,82,86,91,92,93,94,95,96,97,98,99,100,101,113,114,115,116,117,118,119,124,129,140,141,142,143,144,145,146,147,149,160,166,167,203,212,213,214,215,226,230,241,242,243,244,245,246,248,252,256,258,261,263,267,268,269,270,277,282,285,288,289,290,291,292,295,296,297,298,299,300,301,302,303,304,305,307,313,314,317,320,323,325,326,329,330,351,369,370,374,394,395,402,403,404,405,406],"03":14,"0x":404,"0x8":[395,404],"1":[0,1,3,8,9,10,13,14,16,19,36,41,43,44,47,48,66,67,68,74,79,80,82,83,84,85,86,87,91,92,93,94,95,96,97,98,99,100,101,113,114,115,116,117,123,124,127,128,129,130,131,133,135,136,139,140,141,142,143,144,145,146,147,152,153,154,155,156,160,163,166,167,214,215,226,232,239,241,242,243,244,245,246,248,251,256,258,261,263,265,269,270,276,285,288,289,292,293,295,296,297,298,300,301,302,303,304,305,306,312,313,314,316,320,323,325,326,329,330,340,344,346,369,370,374,388,394,395,402,403,404,405,406],"10":[10,13,14,15,64,65,66,67,68,69,70,71,72,77,79,80,81,85,86,91,96,97,98,113,120,129,141,166,242,243,256,263,268,269,282,291,292,294,296,297,299,300,301,313,314,317,325,326,329,395,403],"100":[4,8,9,10,13,46,47,50,121,132,134,241,242,243,244,252,256,263,273,281,284,285,288,289,290,305,306,309,310,320,402,404],"1000":[8,9,10,241,242,243,244,256,263,277,285,292,304,395,404],"10000":9,"1000000":47,"10000000":[0,56,60,64,65,395],"100000000":[0,402,404],"1000000000":9,"100_000_000":404,"100kb":8,"100mb":[402,404],"100x100x1":404,"101":402,"102":[8,10,304,395,402,404],"1020":9,"103":402,"104":402,"1049":292,"105":[46,50,288,289,402],"106":402,"11":[10,14,71,79,91,114,147,214,215,403],"1113":9,"1132030694":404,"1161117856":404,"1194100437":404,"12":[10,13,91,96,97,114,317,403],"1264":9,"128":[8,10],"13":[10,14,97,114,166,215],"14":[10,14,98,117],"1408314276":404,"1414":395,"15":[9,72,98,395,403,404],"15000":404,"15100":404,"159":[8,9,10],"16":[14,19,97,389,397,406],"17":[14,96,120,147],"18":97,"1nm":[9,405],"2":[1,3,7,8,9,10,13,14,19,43,44,47,66,74,91,92,93,94,95,96,97,98,99,100,101,113,114,115,116,117,118,123,124,125,126,127,128,129,130,131,133,135,136,140,141,142,143,145,146,147,150,151,152,153,154,155,156,160,166,167,214,215,226,229,241,242,243,244,245,246,248,250,256,258,261,263,270,281,284,285,289,292,297,298,300,301,302,303,304,312,313,314,316,323,325,326,329,330,347,348,370,374,388,394,395,402,403,404,405],"20":[9,13,81,91,96,97,98,243,256,263,269,282,291,294,297,313,325],"200":[8,9,10,46,47,50,121,132,134,241,242,243,244,252,256,263,273,276,281,284,285,288,289,290,306,310],"2000":[8,9,10,241,242,243,244,256,263,277,285,304,395],"20000":[292,404],"2000000":[8,9,10],"2019":14,"2030":9,"2048":9,"206":[46,50],"207":[46,50],"21":[14,403],"23":97,"25":98,"28":97,"29":14,"3":[1,3,4,5,8,9,10,13,14,43,44,66,74,82,87,89,91,92,93,94,95,96,97,98,99,100,101,102,113,114,115,116,117,118,121,123,124,125,126,127,128,129,130,131,132,133,134,135,136,141,142,143,144,145,146,147,149,150,151,152,153,154,155,156,157,158,159,160,163,166,167,214,240,241,242,243,244,245,246,250,251,253,255,256,258,261,262,263,269,270,282,285,291,297,298,300,302,303,312,313,316,325,326,330,341,342,343,344,345,347,348,349,350,351,370,374,394,402,403,404],"30":[9,91,307],"300":[8,9,10,46,50,121,132,134,241,242,243,244,252,256,263,273,276,285,290],"3000":[8,9,10,241,242,243,244,256,263,277,285,304,395],"300000":346,"30037":14,"3040":9,"307":[46,50],"32":[1,2,3,6,8,9,10,13,16,19,390,391,398,405,406],"34432":[9,395,404],"34452":9,"357":403,"37":14,"39552":[9,395,404],"39582":9,"3e5":346,"3nm":[251,341,351],"4":[0,1,3,8,9,10,13,67,74,80,85,91,94,96,97,98,99,100,113,115,116,117,123,124,125,126,127,128,129,130,131,133,135,136,141,145,146,147,149,150,151,152,153,154,155,156,157,158,159,163,166,244,251,270,298,301,302,312,316,326,330,346,370,402,403,404,405],"40":[8,9],"40000":9,"40nm":9,"41408":[395,404],"42":[7,10,102,240,254,279,292,299,309,320,329,330,395,402],"43":330,"44":330,"4443":16,"45":330,"46":14,"4611686018427387903":[19,85,86,388],"4611686018427387904":[79,80],"486000":405,"4_4_40":9,"4nm":[9,251,346,405],"5":[1,8,10,13,14,46,50,67,68,69,70,71,72,74,76,77,79,80,81,82,83,84,85,86,87,89,91,94,95,96,97,98,99,100,113,114,115,116,117,118,119,123,124,125,126,127,128,129,130,131,133,135,136,141,142,144,146,147,149,150,151,152,153,154,155,156,157,158,159,163,213,214,215,234,236,237,241,242,243,244,247,256,263,267,268,269,270,282,288,289,291,292,294,295,296,297,298,299,300,301,302,305,306,312,313,314,316,317,320,323,325,326,329,330,342,343,344,345,348,350,370,394,395,402,403,404,405],"50":[307,402],"500":[8,9,10],"50000":9,"5000000":[62,64,65],"512":9,"51508":9,"51548":9,"5813054053":404,"5e":405,"5nm":[306,347,349,350],"6":[1,3,8,9,10,13,14,46,50,68,74,91,94,95,96,97,98,100,113,114,115,116,117,119,123,124,125,126,129,130,141,143,146,150,151,152,160,167,241,242,243,267,268,269,292,295,296,297,298,299,300,301,302,312,314,316,326,329,330,395,402,403,404,405],"60":[136,267,268,295,296,299,300,325,405],"62":[13,19,66,388],"62662f87cdd9":14,"632":9,"64":[8,9,10,13,19,395,399,404,406],"6901":7,"7":[13,14,46,50,89,91,96,113,114,117,120,127,129,141,143,145,146,147,153,160,166,167,214,215,256,263,282,291,313,325,347,403],"70":[267,268,269,270,282,291,294,295,296,297,298,299,300,301,302,307,308,313,314,317,323,325,326,329],"707":395,"75":[4,9],"754":[19,385,386,387,406],"77":16,"79":[8,9,10],"7nm":348,"8":[0,9,13,14,19,91,95,96,97,113,114,117,120,123,129,141,143,144,145,147,152,160,166,167,241,256,263,267,282,291,292,295,299,301,306,313,314,317,325,326,329,392,395,400,403,404,406],"80":[14,267,268,269,270,282,291,294,295,296,297,298,299,300,301,302,307,308,313,314,317,323,325,326,329,404],"81":9,"82":404,"83":404,"8_8_8":9,"8nm":306,"9":[3,8,9,10,13,14,69,91,113,117,129,141,215,241,242,267,268,295,296,299,300,301,395,403,404,405],"90":405,"9223372036854775807":89,"9223372036854775808":405,"99":404,"9m":405,"abstract":[12,19,111,138,168],"boolean":[6,8,9,10,18,19,94,160,256,282,313,314,369,406],"break":10,"byte":[0,8,10,19,169,170,177,181,192,195,198,203,352,353,355,356,396,406],"case":[3,10,11,13,14,16,95,96,97,98,113,129,138,141,172,175,206,298,403,405],"char":406,"class":[19,21,51,55,57,66,90,101,111,112,119,138,168,170,177,182,192,212,222,226,234,238,264,292,330,340,352,355,357,373,377,403],"default":[0,4,5,6,7,8,9,10,11,13,14,16,54,59,61,62,63,70,71,72,90,91,102,118,138,143,145,169,190,204,207,238,243,264,269,290,292,297,301,323,373,395,402,403,405],"do":[1,2,3,4,5,6,7,8,9,10,13,403,406],"export":14,"final":[9,36,48],"float":[19,21,23,25,26,34,36,48,101,107,110,192,194,196,206,340,342,344,345,347,348,350,352,354,357,364,366,368,385,386,387,402,405,406],"function":[3,9,13,19,112,402,404],"import":404,"int":[19,20,21,23,27,28,29,30,31,32,34,36,39,40,41,42,43,44,48,66,68,70,71,72,75,79,80,85,86,89,90,95,96,97,98,101,109,112,115,118,121,123,127,128,132,133,134,135,136,138,140,145,152,153,154,156,157,158,159,161,163,164,165,203,212,213,214,215,218,220,221,222,223,224,225,226,227,233,238,245,255,257,258,259,260,262,264,281,283,284,286,287,290,292,312,315,316,321,322,357,365,373,375,376,388,395,402,403],"new":[0,1,2,3,4,5,6,7,12,13,19,62,63,91,92,93,95,96,97,98,105,112,116,117,169,190,207,211,234,235,236,237,241,242,243,244,245,248,251,256,262,263,267,268,269,270,282,290,291,305,320,323,330,331,394,402,403,404,405,406],"null":[0,9,10,396,401,405],"public":[16,404],"return":[3,6,7,8,9,10,13,19,55,56,57,59,60,61,62,63,66,76,77,78,91,93,94,95,96,97,98,99,100,101,102,107,110,112,115,116,117,121,122,137,138,140,148,166,169,170,173,182,183,185,186,187,198,199,201,202,203,206,210,211,222,224,225,238,241,242,243,244,247,248,250,256,263,264,267,268,269,270,272,275,282,284,291,292,294,295,296,297,298,303,310,311,317,323,327,329,335,337,367,370,375,376,395,402,405],"static":[169,204,234,235],"transient":[16,18],"true":[6,7,8,9,10,18,61,66,67,68,69,70,71,72,73,76,78,81,83,84,91,105,125,126,150,151,174,189,190,207,234,236,237,290,292,294,295,296,297,298,299,300,301,302,304,305,306,307,308,309,310,313,314,317,320,323,325,326,329,330,341,395,403,404],"while":[3,8,9,10,13,14,36,41,48,197,200,294,340,396,401,402,403,404,405],A:[0,8,9,10,15,91,99,206,234,245,251,262,290,306,317,340,373,395,402,403,405],As:[8,10,13,91,115,172,175,368,403],At:[13,118,145,403],By:[10,13,14,169,204,323,395,402],For:[3,7,8,9,10,12,13,14,16,46,50,95,114,138,294,329,357,402,405],If:[0,1,2,3,4,5,6,7,8,9,10,11,13,14,16,17,18,36,41,42,46,48,50,74,79,80,85,86,89,92,93,95,96,97,98,99,101,102,104,107,110,113,116,118,129,141,145,146,190,197,198,200,202,203,206,211,241,242,243,244,245,256,262,263,267,268,269,270,282,290,291,310,323,329,330,346,355,356,395,402,403,405,406],In:[3,10,11,13,16,17,18,69,129,172,176,298,330,340,357,403,404,405],It:[3,4,5,6,7,8,9,10,13,14,18,91,113,141,290,340,395,403,405],No:[8,10],On:[10,11,14,16,113,141],One:[0,3,6,8,10,406],The:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,36,46,48,50,60,66,82,87,92,93,95,96,97,98,101,107,110,111,112,113,124,129,130,138,141,144,146,169,183,190,197,198,200,202,206,207,210,211,240,241,245,251,262,264,266,267,289,290,295,306,307,309,323,327,329,330,339,340,357,395,396,401,402,403,405,406],There:[14,393,396,401,404,406],To:[3,6,8,9,10,12,14,16,61,183,204,290,297,323,395,402,403],With:[6,7,8,9,10],_:9,__add__:[182,183],__array__:[292,294,317],__call__:[138,140,377,378],__contains__:[66,67,68],__delitem__:[169,197,198,200,206,211],__eq__:[20,21,22,35,66,69,170,171,192,193,238,240,264,266,340,341],__getitem__:[54,60,90,91,94,100,112,113,114,115,116,117,138,141,142,143,144,160,167,169,197,198,200,206,222,223,238,241,242,243,244,256,263,264,267,268,269,270,282,291,292,295,296,297,298,300,313,325,373],__index__:403,__iter__:[66,74],__len__:[66,75,112,121,222,224],__mul__:[340,347],__repr__:[66,76,112,122,138,148,169,182,185,199,238,247,264,272],__setitem__:[169,197,198,200,206,211,292,299,300,301,302,314,326],__str__:[66,77,226,228],__truediv__:[182,183,186,340,348],_arrai:13,_bit:9,_dimens:13,_origin:13,_rank:13,_shape:13,a1:13,a2:13,aa:202,abc:[15,183,186,187,189,190,201,204,207,280,310],abort:[19,206,330,332,333,335,337,338,339],abov:[13,79,85,89,91,403],abstracteventloop:[102,402],access:[7,8,9,10,12,13,15,16,17,41,42,248,357,395,403,404],accomplish:329,accord:[8,9,10,13,14,113,141,169,170,172,176],account:[16,46,50,69,405],achiev:[8,10],acid:12,acknowledg:329,actual:[129,169,197,200,202,211,245,262,290,297,329,395,403,405],ad:[14,92,93,94,95,96,97,98,99,100,167,263,291,325,326],adapt:1,add:[14,20,21,34,48,91,238,262,264,290,403],add_done_callback:[101,103,108,357,358],addit:[3,6,7,8,9,10,11,13,14,16,17,20,21,34,48,69,90,91,182,186,238,245,262,264,290,330,339,340,357,395,402,403,405],addition:[13,14,66,190,204,251,290,330,402,403],address:11,advanc:[12,19,90,403],advantag:[12,329],advis:9,affect:[14,90,96,97,98,114,117,248,329,373,402,405],after:[6,7,8,9,10,14,206,245,262,290,329,346,357,395,402,403,405],ag:206,against:405,alia:[19,20,21,29,43,112,128,132,138,150,151,152,153,154,155,156,158,159,238,255,264,281,292,312,394],align:[14,113,141,241,267,295,299,326,329,405],all:[0,3,6,8,9,10,11,12,13,17,18,19,36,46,48,50,91,95,96,97,98,99,118,138,145,203,207,245,262,290,298,317,323,329,330,395,402,403,405,406],all_proxi:11,allow:[0,10,13,14,15,16,91,290,301,302,323,329,330,395,405],allus:16,along:[9,245,251,262,290,306,395,402,405],alreadi:[6,8,9,10,13,14,104,190,204,245,262,290,330,332,335,336,395,402],also:[1,2,3,6,8,9,10,12,13,14,15,36,48,66,69,90,91,95,96,97,98,169,204,245,262,290,301,310,329,330,357,368,395,402,403,404,405,406],altern:[11,329,403],alwai:[3,6,7,8,9,10,91,95,299,300,301,302,314,326,403,405],among:3,amount:[90,95,203,373],amplif:405,an:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,16,19,46,50,66,73,88,90,91,92,95,96,97,101,102,104,111,112,113,114,117,118,119,120,129,138,140,141,145,146,147,169,172,175,176,182,186,195,197,198,200,203,204,206,211,212,214,222,226,234,238,241,244,245,251,262,264,267,270,290,292,294,295,298,299,301,302,314,323,326,329,330,337,340,357,367,368,373,377,379,388,393,402,403,404,405,406],analog:12,ancestor:7,ani:[1,2,3,4,5,6,7,8,9,10,11,13,16,19,20,21,24,33,36,37,46,47,48,50,51,52,53,54,55,56,57,58,59,62,91,94,98,100,101,107,112,113,116,120,129,137,138,141,147,160,166,167,169,182,183,184,189,190,197,198,200,202,204,206,207,211,234,235,238,246,256,261,263,264,266,271,273,274,276,277,279,282,285,288,290,291,297,299,301,302,307,313,314,317,323,325,326,329,330,339,340,343,351,395,402,403,404,405,406],anoth:[0,66,67,69,82,87,112,113,124,130,138,141,144,170,171,238,240,264,266,402,403],api:[1,11,12,16],append:[182,183,197,198,200,206,211],appl:14,appli:[0,1,2,3,6,7,8,9,10,11,13,16,36,48,90,91,94,100,112,114,138,142,143,160,167,243,256,263,269,282,291,296,307,313,314,373,403,405,406],applic:[14,16,305,309,402,405],application_default_credenti:16,appropri:[16,402],aqacaamabaafaayaaaagqqaameeaaebbaabqqqaaye:10,ar:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,16,19,23,34,36,46,48,50,59,69,91,92,94,99,100,112,113,114,117,141,160,167,168,169,203,204,206,245,251,256,262,263,266,272,273,274,276,277,279,282,285,290,291,301,313,314,325,326,329,330,340,368,395,396,401,402,403,405,406],arbitrari:[8,13,19,393,402,403],archiv:14,aren:14,arg0:[222,223,377,378],arg:403,argument:403,arithmet:3,arr:129,arrai:[2,3,4,5,6,7,12,13,17,19,90,94,100,101,114,117,129,138,143,145,147,160,167,212,214,226,229,238,243,254,256,263,264,269,272,279,282,290,291,292,294,297,298,299,300,301,302,303,307,308,309,312,313,314,316,317,323,325,326,329,330,367,368,370,373,395,402,404,405,406],arrang:329,array_lik:[19,91,212,214,216,238,245,254,262,264,279,290,292,294,299,300,301,302,309,314,317,326,329,367,395,402,403],ascii:406,aspect:[21,23,25,26,34,36,48,405],aspect_ratio:[8,9,10,21,23,25,34,36,48,405],aspect_ratio_soft_constraint:[21,23,26,34,36,48,405],assert:[64,102,240,266,388],assign:[8,9,13,299,300,301,302,314,326,402,403,404],associ:[66,102,177,179,181,198,206,211,264,280,290,292,310,324,335,395],assum:[6,7,8,9,10,13,405],astyp:[292,303],async:[102,330,402,404],asynchron:[12,101,102,103,104,105,106,107,108,110,111,234,292,299,300,301,302,314,317,326,329,330,335,357,404],asyncio:[101,102,104,329,402,404],atom:[7,12,18,330,331,334,402],attempt:[7,16,402,403],attribut:[7,8,403],augment:[1,2,3,4,5,6,7,8,9,10,15,16,17,18,406],auth:16,authent:[0,11],author:[11,16],automat:[1,2,3,4,5,6,7,8,9,10,12,13,14,16,108,292,294,330,395,405,406],avail:[0,11,14,352,353,368],averag:3,avoid:[9,10,102,113,141,403],await:[101,102,169,199,201,202,204,205,206,207,209,210,211,292,294,295,296,297,298,304,305,306,307,308,309,310,313,317,320,323,325,329,330,370,395,402,403,404],awar:[10,403],ax:[8,289,295,296],b1:10,b:[7,14,69,99,113,141,144,169,174,178,187,195,197,198,200,201,202,203,204,206,210,211,240,250,266,275,403],back:[1,4,5,8,9,10,12,15,17,330,404],backward:[6,7,8,9,10,90,96,373],bandwidth:12,base:[1,2,3,4,5,6,7,8,9,10,13,15,16,19,111,168,169,182,185,188,199,205,238,240,247,264,266,272,303,340,342,345,349,370,371,372,375,376,403,405,406],base_unit:[340,342,344,346,349,350,405],basic:403,bazel:14,bazel_cach:14,bazel_tool:14,bazelisk:14,bazelisk_hom:14,bazelrc:14,bdist_wheel:14,bear:9,becaus:[7,9,329,402,403],becom:[107,110,202,329,338],been:[10,13,101,105,106,245,262,280,290,307,329,330,332,333,335,338,339,395,402],befor:[6,8,9,10,206,290,323,395],begin:[91,101,108,403],behav:114,behavior:[11,13,14,18,91,113,141,206,317,329,403],being:[6,7,8,9,10,14,206,330,402],below:[13,80,86,89],best:[8,9,10],better:[294,402],between:[13,395,402],bfloat16:[10,19,368,406],big:[8,10,406],bill:16,binari:14,binary16:[19,385,406],binary32:[19,386,406],binary64:[19,387,406],bind:[14,190,204,207,290,323,402],bit:[8,9,10,13,19,389,390,391,392,397,398,399,400,406],block:[3,8,9,10,15,102,107,110,197,198,200,294,299,300,301,302,314,317,326,329,330,402,405],blocksiz:[8,10,292,295,296,297,298,305,313,320,323,325,330,395,404],blosc:[8,10,14,292,295,296,297,298,305,313,320,323,325,395,405],blosclz:[8,10],bool:[3,10,19,20,21,22,33,35,36,48,51,53,55,56,57,59,66,67,68,69,70,71,72,73,78,81,83,84,91,101,104,105,106,112,118,125,126,138,145,150,151,169,170,171,174,182,189,190,192,193,207,238,240,261,264,266,288,290,292,318,319,323,328,330,331,333,334,336,339,340,341,357,359,360,363,369,395,403,406],bool_:[19,369],boringssl:14,both:[6,8,9,10,13,36,48,113,141,245,262,290,395,402,405],bound:[3,6,8,9,10,13,19,66,69,70,71,72,73,79,80,82,83,84,85,86,87,91,92,94,95,98,100,112,113,118,123,124,125,126,127,128,129,130,133,138,141,143,145,147,150,151,152,153,154,156,160,161,167,169,170,172,175,176,190,204,206,207,208,210,238,245,257,262,264,266,272,283,290,292,307,310,315,319,323,327,352,354,395,402,403,405],boundari:405,box:[112,124],broadcast:[10,91,100,167,241,245,262,263,267,290,291,295,299,301,302,309,314,325,326,329,395,403,405],broader:402,brotli:14,bsd:11,bucket:[2,3,4,5,7,9,10,16,191,205,209,395,404],buffer:[3,10,402],bug:14,build:12,build_def:14,build_doc:14,build_ext:14,built:[11,14,368,403],bundl:[11,14],bz2:10,bzip2:[8,10,14],bzl:14,c16:10,c8:10,c:[1,12,15,36,41,48,91,99,202,273,285,292,297,298,313,317,323,325,395,403,405],c_rehash:11,cach:[0,6,7,8,9,10,12,14,19,54,206,207,292,317,319,323,329,352,353,354,395,404],cache_pool:[0,4,5,6,7,8,9,10,56,60,62,64,65,272,292,295,296,297,298,313,323,325,329,395,402,404],cacherevalidationbound:[6,7,8,9,10],cafil:16,call:[61,91,101,102,105,108,116,197,198,200,206,236,244,248,297,317,329,332,335,402,403],callabl:[101,103,109,357,358,365,402],callback:[19,103,109,352,355,357,358,365,402],can:[11,12,13,14,16,129,203,241,245,251,262,267,290,295,329,330,352,353,395,402,403,404,405],cancel:[101,104,105,106,329,357,359,360],cancellederror:[104,105],cannot:[90,91,244,330],canon:405,capabl:[10,403],capath:16,captur:[190,207,290,323],care:9,cartesian:112,cast:[6,19,303,370,406],caus:[10,403],cc:202,cd:14,cdot:13,cert:[11,16],certain:[13,17],certif:14,chain:[91,403],chang:[13,14,90,93,206,264,290,330,373],channel:[9,395,404],charact:[14,406],characterist:395,check:[6,8,9,10,66,67,68,335,403],child:[64,65],choic:9,choos:405,chosen:[3,8,9,10,395],chunk:[12,19,21,22,23,25,26,27,28,31,32,34,35,36,38,41,45,46,48,49,50,238,245,248,262,264,273,285,290,292,297,298,304,313,323,325,329,395,402],chunk_aspect_ratio:[8,9,10,36,48,395],chunk_aspect_ratio_soft_constraint:[36,48],chunk_el:[8,10,36,48,395],chunk_elements_soft_constraint:[36,48],chunk_layout:[1,2,3,4,5,6,7,8,9,10,238,241,242,243,244,245,246,248,256,258,261,262,263,264,273,285,290,292,304,320,395,402,405,406],chunk_shap:[8,10,36,48,395],chunk_shape_soft_constraint:[36,48],chunk_siz:[9,395,404],chunklayout:[8,9,10,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,238,241,242,243,244,245,248,256,258,261,262,263,264,273,290,292,304,395,402,405],chunkss:405,circumst:6,cl:14,clang:14,clear:[36,48],clevel:[8,10,292,295,296,297,298,305,313,320,323,325,395,405],clone:14,close:[13,66,71],cloud:[12,16,17,329,404],cloudpickl:402,cloudsdk_config:16,cmake:14,cname:[8,10,292,295,296,297,298,305,313,320,323,325,395,405],coalesc:[329,330],code:14,codec:[20,21,36,38,48,238,245,249,262,264,274,285,290,292,305,320,395],codec_chunk:[8,9,10,20,36,38,48,405],codec_chunk_aspect_ratio:[36,48],codec_chunk_aspect_ratio_soft_constraint:[36,48],codec_chunk_el:[36,48],codec_chunk_elements_soft_constraint:[36,48],codec_chunk_shap:[36,48],codec_chunk_shape_soft_constraint:[36,48],codecspec:[9,19,51,52,53,238,245,249,262,264,274,290,292,305,395],colexicograph:[8,9,36,41,48,317,405],column:[36,41,48,317,405],com:[11,14],com_facebook_zstd:14,com_google_boringssl:14,com_google_brotli:14,com_google_snappi:14,com_google_tensorstor:14,combin:[1,2,3,4,5,6,7,8,9,10,340,395,403,405,406],comma:[11,14],command:[11,14],commit:[19,197,200,202,206,211,317,329,330,335,336,337,338,339,357,361,402],commit_async:[210,329,330,332,335,337],commit_start:[330,336],commit_sync:[169,301,330,335,337],common:[3,6,11,17,36,48,138,403],compar:[20,21,22,35,66,69,170,171,192,193,238,240,264,266,340,341],comparison:[240,245,262,266,290,395],compat:[0,6,7,8,9,10,11,13,14,112,129,245,262,290,299,301,302,309,314,326,329,395,403,404,405],compil:14,complement:[19,389,390,391,392,406],complet:[13,101,103,104,106,107,110,197,198,200,202,206,211,234,236,237,299,300,301,302,314,317,326,329,357,403,404],complex128:[10,19,371,406],complex64:[10,19,372,406],complex:[3,19,371,372,406],compon:[6,7,8,9,10,20,36,112,118,138,145,182,186,238,245,406],compos:[2,12,13,117,138,144,244,270],composit:[13,403],compress:[5,10,295,296,330,395,404,405],compressed_segment:[9,395,404],compressed_segmentation_block_s:[9,395,404],compression_level:5,compressor:[8,249,274,279,292,297,298,305,313,320,323,325,395,405],comput:[3,13,16,112,124,197,198,200,241,267,292,295,296,297,298,313,325,402,403],concaten:11,concis:17,concurr:[0,7,12,15,16,17,101,207,323,329],condit:[16,113,141,206,211,355,356],config:16,configur:[0,12,16],confus:403,conjunct:[13,290,323,395,405],connect:[11,12,16],consecut:[91,403],consequ:[114,117,190,207,290,323],consid:[8,329,405],consist:[6,7,8,9,10,12,91,129,206,403],constant:[1,13,19,212,213,226,230,388,403],constrain:[8,9,12,13,245,262,290,395,402,403,405],constraint:[1,2,3,4,5,6,7,13,20,21,23,26,28,31,32,34,36,39,40,41,42,46,48,50,238,245,248,249,251,262,264,273,274,276,277,279,285,290,340,395,402,405,406],construct:[20,21,23,24,36,37,51,52,54,61,62,63,65,66,70,71,72,73,112,118,119,120,138,145,146,147,170,172,177,178,182,184,192,194,212,213,214,215,238,245,246,264,271,340,342,343,344,345,346,373,374,377,378,379,380],constructor:61,consum:[19,91,101,203,357,403],contain:[3,7,11,13,14,66,67,68,74,91,95,112,124,170,174,346,402,403,404,405],content:[15,19,402],context:[1,2,3,4,5,6,7,8,9,10,12,15,16,17,18,19,54,55,56,57,58,59,60,61,62,63,64,65,91,101,189,190,199,201,204,207,266,272,290,292,294,295,296,297,298,303,310,313,323,325,329,330,367,370,395,402,403,404,406],context_a:266,context_b:266,contextresourc:[0,4,5,6,7,8,9,10,15,16,18],contigu:[1,66,317],continu:[197,198,200],contrast:403,contribut:9,control:329,conveni:[4,5,6,7,8,9,10,16,298],convers:[2,292,294,404],convert:[2,8,20,21,33,36,47,48,51,53,101,102,116,182,189,190,207,238,245,261,262,264,288,290,299,301,302,314,323,326,329,340,351,367,395,403],coordin:[91,403],copi:[0,13,14,169,170,173,182,187,201,238,240,248,250,264,266,275,329,357,362,403],core:[0,12,403],coroutin:[102,111,402],correctli:13,correspond:[8,9,10,13,16,17,18,19,23,34,36,48,82,87,91,92,101,102,124,129,130,234,245,251,262,290,306,357,368,369,371,372,385,386,387,389,390,391,392,393,395,396,397,398,399,400,401,402,403,405,406],cost:13,count:129,cpu:0,crash:329,creat:[1,2,3,4,5,6,7,12,14,19,54,57,58,60,169,190,204,207,234,235,251,264,290,292,294,295,296,297,298,299,300,301,302,304,305,306,307,308,309,310,313,314,317,320,323,325,326,329,330,331,402,404,405,406],credenti:[0,16,19,54,404],crt:[11,16],curl:[14,16],current:[0,10,13,14,101,197,198,200,206,292,294,317,329,330,402,404],custom:18,d:[19,66,91,92,93,94,95,96,97,98,99,100,113,114,139,140,141,142,239,242,265,268,288,289,293,296,300,373,374,388,403,404],dask:403,data:[0,1,2,3,6,7,12,17,18,183,184,185,186,187,188,199,201,206,238,245,253,262,264,278,290,297,299,301,302,303,305,308,309,314,317,323,326,329,352,353,354,355,356,367,368,369,370,377,378,379,385,386,387,389,390,391,392,393,395,396,399,401,402,403,405,406],data_copy_concurr:[0,4,5,6,7,8,9,10,91,101,272,292,295,296,297,298,303,313,323,325,370,395,402,403,404],data_encod:[9,395,404],data_typ:9,dataabc:183,databas:12,dataset:[8,15,16,18,189,292,294,295,296,297,298,299,300,301,302,307,308,312,313,314,316,317,323,325,326,329,330],dataset_3d:404,dataset_futur:404,datatyp:[8,278,295,296,330,395,404],date:14,datetim:10,deadlin:[107,110,364,366],deadlock:[102,402],decod:[0,12,19,51,405],decrypt:11,def:[102,402],defer:403,defin:[0,4,5,6,7,8,9,10,13,15,16,18,19,91,112,238,368,402,403,405],del:197,delet:[6,8,9,10,169,197,200,202,211,290,323,395],delete_exist:[6,8,9,10,290,323,330,395,404],delete_rang:[169,202],demonstr:404,denot:403,depend:[11,16,91,317,329,403,406],deprec:[10,403],deriv:[340,349],describ:[13,17,19,20,21],desir:251,detail:[11,12],determin:[6,8,9,13,113,141,169,395,405],determinist:3,develop:16,deviat:[340,405],dexpr:403,diagon:[90,92,373,403],did:[107,110],differ:[3,13,17,94,100,101,160,167,206,245,256,262,263,282,290,291,313,314,320,325,326,395,396,401,402],dim:[19,46,50,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,112,113,115,119,141,145,166,212,214,217,388],dimens:[3,10,12,13,19,20,21,23,30,34,36,44,46,48,50,66,70,71,72,73,88,90,92,93,94,95,96,97,98,99,100,112,114,115,116,118,119,121,125,126,129,131,134,138,139,142,145,150,151,155,167,212,215,238,239,241,242,245,251,262,263,264,265,267,268,276,281,284,288,289,290,291,292,293,295,296,300,306,316,325,326,330,340,344,373,374,394,395,402,404],dimension:[3,12,13,19,91,112,292,403],dimension_separ:[10,292,297,298,313,323,325,395],dimension_unit:[8,9,238,245,251,262,264,276,290,292,306,395,402,405],dimensionless:[8,340,405],dimexpress:[19,90,91,92,93,94,95,96,97,98,99,100,112,114,138,142,238,242,264,268,292,296,300,373,403],dimselectionlik:[90,99,112,116,373,374],direct:91,directli:[0,1,2,3,6,7,8,9,10,13,14,15,16,129,138,183,273,274,276,277,279,285,299,300,301,302,314,326,340,402,403,405,406],directori:[11,14,15,16,17,18],disabl:[10,11],discrep:[113,141],disjoint:329,dist:14,distribut:[11,14],divid:[340,348,403],divisor:[340,348],do_read:402,do_writ:402,doc:14,document:[11,17,405,406],doe:[6,8,9,10,11,13,14,15,61,91,93,95,96,97,98,129,138,273,274,276,277,279,280,285,290,297,310,323,329,340,368,395,403,405],domain:[3,12,19,90,91,92,93,94,95,96,97,98,99,100,101,112,113,114,115,116,117,118,119,120,121,123,124,125,126,127,128,129,130,131,132,133,134,135,136,138,139,141,142,143,144,145,146,147,149,150,151,152,153,154,155,156,158,160,161,164,165,167,238,239,241,242,243,244,245,251,252,256,257,259,260,262,263,264,265,267,270,276,277,283,284,285,286,287,289,290,291,292,293,294,295,296,298,299,300,301,302,306,307,314,315,316,317,320,321,322,325,326,329,373,388,394,395,402,403,404,405],domin:403,don:14,done:[12,14,16,95,101,102,106,234,236,237,245,262,290,357,363,395],dot:10,doubl:[19,340,387,405,406],download:14,downsampl:[6,19,375,376,406],downsample_factor:[3,19,375,376],downsample_method:3,downsamplemethod:[3,375,376],driver:[0,12,19,51,91,101,169,183,184,185,186,187,188,189,190,191,197,198,199,200,201,202,203,204,205,206,207,209,210,211,238,249,251,264,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,284,285,288,289,290,291,292,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,313,314,317,320,323,325,326,329,330,340,370,395,403,404,405,406],drop:[13,329],dtype:[1,2,3,4,5,6,7,8,9,10,19,91,101,238,240,245,246,247,250,253,258,261,262,264,275,277,278,279,285,290,292,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,312,313,314,316,317,320,323,325,326,329,330,367,368,369,370,371,372,377,378,379,380,381,382,383,384,385,386,387,389,390,391,392,393,395,396,397,398,399,400,401,402,403,404,405,406],due:[9,15,206],dummi:[91,403],duplic:[93,403],durabl:[12,197,200,202,211,329,357],dynam:11,e:[8,9,10,11,13,14,16,19,36,41,48,89,91,95,96,97,98,113,117,141,206,207,248,317,323,330,402,403,405],each:[0,3,6,7,8,9,10,11,13,23,34,61,93,95,96,97,98,112,118,125,126,129,131,138,145,150,151,155,238,245,248,251,262,264,276,290,292,294,306,395,402,403,405,406],earlier:14,effect:[13,91,113,141,190,207,264,273,274,276,277,279,285,290,323,332,335,403],effici:[3,9,12,13,20,45,46,49,50,329,330,405,406],effort:14,either:[6,8,9,10,13,16,19,66,113,116,141,299,300,301,302,314,326,329,330,338,373,403],element:[2,3,9,20,21,23,27,28,34,36,41,42,47,48,91,112,136,138,165,238,260,264,272,287,292,322,403,405],elements_soft_constraint:[21,23,28,34,36,48,405],empti:[7,8,13,66,78,82,87,88,113,141,170,172,174,175,176,195,211,245,262,290,340,355,356,395,402,403,405],enabl:[6,8,9,10,12,16,66,74,138,329,402],encod:[0,4,8,10,12,14,19,51,395,404,405,406],end:[16,17,18,99,129,403],endian:[8,9,10,406],engin:16,enhanc:403,ensur:[14,101,108,183,251,329,330,403],entir:[7,9,10,13,113,141,294,329,346,403,405,406],entri:[192,195],environ:[14,16],epoch:[6,107,110,192,196,206],equal:[0,1,8,9,10,13,19,20,21,22,35,41,42,59,66,69,79,80,85,86,89,91,92,117,170,171,192,193,238,240,241,242,244,245,262,264,266,267,268,270,280,290,295,298,299,302,305,309,310,340,341,388,395,402,403,405],equival:[3,8,10,36,48,66,75,91,92,95,96,97,99,112,117,129,139,161,164,165,206,239,245,257,259,260,262,265,283,286,287,290,293,294,298,315,316,321,322,323,329,337,344,395,402,403,405],error:[7,8,9,10,13,16,101,102,107,110,113,141,197,198,200,206,234,236,245,262,290,337,395,402,403],escap:14,etc:[3,11,14,16,320],even:[3,7,12,59,197,200,403],evenli:405,event:[102,402],everi:[6,7,8,9,10,12,13,92,402,405],evict:0,exactli:[3,8,9,10,91,402,403],exampl:[14,184,204,330,402,404],except:[8,9,10,95,101,102,105,107,108,197,198,200,234,236,245,262,266,290,330,357,364,395,402,403,405],excess:9,exclud:17,exclus:[13,66,70,79,80,112,118,123,138,145,152,170,172,175,403],exclusive_max:[8,9,10,13,66,67,68,69,70,71,74,76,77,79,80,81,82,83,84,85,87,89,112,113,114,115,116,117,118,120,123,124,125,126,129,130,141,145,146,152,166,170,172,175,241,242,243,256,263,267,285,290,295,299,320,403],exclusive_min:[66,80,86],execut:[0,14,101,108,402],exist:[1,2,3,4,5,6,7,8,9,10,14,91,95,113,141,145,146,197,198,200,202,204,206,211,245,251,262,290,299,301,302,314,323,326,329,355,356,377,379,402,403,405,406],exit:330,expect:[11,14,111,251,403],explicit:[6,13,66,112,117,118,125,126,138,145,150,151,238,241,244,245,262,264,267,270,290,292,295,298,299,302,329,395,402,403,405],explicitli:[8,9,10,108,403,405],expos:7,expr:[95,112,114,138,142,238,242,244,264,268,270,292,296,298,300,302,403],express:[12,19,66,76,90,91,93,94,95,96,97,98,99,100,112,114,129,138,142,238,242,264,268,292,296,300,373,394],extend:[1,2,3,4,5,6,7,8,9,10,13,15,16,18],extens:[10,14,91,368],extent:[10,13,136,197,200,202,211,405],extern:[190,206,207,290,323,330],extract:[90,92,373],f2:10,f4:[10,279,395],f8:10,f:[10,101,292,317,329,395,402],facil:11,factor:3,fail:[1,2,3,4,5,6,7,8,9,10,16,206,330,402,403,406],fake:16,fals:[6,8,9,10,18,21,33,51,53,55,56,57,59,67,68,70,71,72,73,81,83,84,89,91,102,105,125,126,150,151,174,182,189,190,207,234,236,237,238,261,264,288,290,292,319,323,330,331,403,405],faster:14,fastest:[8,10,14],fc44652a42b3:14,fetch:14,few:403,fewer:[0,403],field:[10,82,87],file:[7,8,9,10,11,12,14,16,17,18,183,184,185,186,187,188,189,199,201,329,330,404],file_io_concurr:[0,15,64,65,189,199,201],filesystem:[0,12,15,17,404],fill:[12,99,238,245,254,262,264,279,290,292,309,395,404,405],fill_valu:[10,238,240,245,254,262,264,279,290,292,297,298,309,313,320,323,325,395,405],filter:[10,249,292,297,298,305,313,320,323,325,395,405],find:[11,14],fine:[299,300,301,302,314,326],finit:[13,66,73,74,81,89,129,245,262,290,395,402,405],first:[9,13,14,91,92,100,167,263,291,325,326,403,405],fix:[329,396,401],fix_resizable_bound:[292,319],flag:[14,82,87,124,130],flatten:403,float16:[10,19,385,406],float32:[8,9,10,19,279,304,370,372,386,395,406],float64:[8,10,19,371,387,406],fly:3,flyeem:404,flyem:395,follow:[3,8,9,10,11,13,14,16,111,113,141,245,262,290,340,395,402,403,405,406],forc:[101,108],form:[13,60,298,403],format:[8,9,10,11,12,395,405,406],fortran:[8,9,36,41,48,317,405],forward:357,found:198,fraction:206,framework:54,free:402,frequent:3,fresh:[6,7,8,9,10],from:[0,1,2,3,6,7,8,9,10,12,13,15,16,19,20,21,24,36,37,48,51,52,54,57,58,62,63,64,65,91,92,99,112,115,118,119,120,129,138,145,146,147,170,172,182,184,192,194,203,204,206,238,245,246,248,264,271,294,329,330,340,342,343,345,346,349,367,373,374,377,379,395,403,404,405],fsync:329,fulfil:[352,354],full:[7,10,13,18,91,323,403,405],fulli:[10,12,13,138,190,207,290,323,329],further:405,futur:[14,19,101,102,103,104,105,106,107,108,109,110,111,169,202,203,204,206,211,234,235,236,237,292,317,319,329,330,335,338,357,358,361,362,365,395,404],futurelik:[19,101,102,111,402],g:[10,11,16,19,91,95,96,97,98,207,248,323,330,402,403],gc:[2,3,4,5,7,9,10,17,18,191,205,209,329,395,404],gcc:14,gce:16,gcloud:16,gcs_request_concurr:[16,395,404],gcs_request_retri:[16,395,404],gcs_user_project:[16,395,404],gener:[14,91,169,177,179,192,193,194,195,196,206,211,298,340,352,353,355,356,402,403,405],get_running_loop:[102,402],get_valu:102,git:14,github:14,given:[0,3,15,54,60,66,68,91,95,96,97,98,403,405],global:[0,16,402],good:9,googl:[12,14,16,329,404],google_application_credenti:[11,16],googleapi:11,grain:[299,300,301,302,314,326],granular:[9,405],graph:[190,207,290,323],grid:[8,9,10,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,38,39,40,45,48,49,329,405],grid_origin:[8,9,10,20,36,39,40,46,48,50,241,242,243,244,245,246,248,256,258,261,263,285,304,320,405],grid_origin_soft_constraint:[20,36,40,46,48,50,405],grid_soft_constraint:[23,34],group:[9,19,330],gs:[16,17,191,209,404],gsutil:16,guarante:[7,12,197,200,202,206,211,329,330,357,368],guid:12,gzip:[8,9,10,395,404,405],ha:[8,9,10,13,16,91,98,99,101,104,105,106,190,202,207,245,262,280,290,309,323,329,330,332,333,335,336,338,339,357,395,402,403],half:[0,19,66,70,169,170,172,385,406],handl:[16,19,54,55,60,101,226,228,234,292,357,402],hard:[8,9,10,13,20,21,23,31,34,36,39,41,42,46,48,50,405],hash:[9,395,404],have:[8,9,10,13,14,16,66,93,113,141,190,207,241,245,262,267,290,295,307,323,330,368,395,403,404,405],header:[8,10],hemibrain:395,here:8,hierarch:405,high:12,higher:[8,10,206],hit:404,hold:357,hostnam:11,how:[11,16,405],howev:[3,10,14,16,91,101,138,402],http:[14,16],http_archiv:14,http_proxi:11,https_proxi:11,hull:[66,82,112,124],i1:10,i2:10,i4:[10,395],i8:10,i:[0,8,9,10,12,13,16,36,41,46,48,50,89,91,95,99,113,117,141,197,198,200,206,214,215,273,274,276,277,279,285,317,329,330,403,404,405],id:[0,9,10,16,60,292,297,298,305,313,320,323,325,395,405],ident:[8,9,13,117,145,146,207,266,323,395,404],identifi:[0,6,8,10,13,14,17,112,113,115,141,169,192,195,402,403,405,406],ieee:[19,385,386,387,406],iexpr:403,if_equ:[211,355,356],if_not_equ:[206,352,353,402],ignor:[1,2,3,4,5,6,7,8,9,10,46,50,405,406],ijg:9,imag:[4,5,9],imaginari:406,immedi:[13,102,111,403],immut:[112,340,402,403],implement:[7,10,12,14,206],impli:[264,273,274,276,277,279,285],implicit:[8,9,10,13,19,66,70,71,72,73,82,83,84,87,91,92,112,113,118,124,125,126,130,138,141,145,150,151,245,262,290,395,402,403,405],implicit_low:[66,69,70,71,72,73,83],implicit_lower_bound:[112,118,125,138,145,150,166,403],implicit_upp:[66,69,70,71,72,73,76,84],implicit_upper_bound:[112,118,126,138,145,151,166],implicitli:[8,9,10,13,403,404],impos:[13,340,405],improv:[329,330],includ:[8,9,10,11,12,14,18,19,59,112,116,264,273,274,276,277,279,285,299,301,302,314,317,323,326,329,403,405],include_default:[21,33,51,53,55,56,57,59,182,189,238,261,264,288],inclus:[13,66,70,71,72,85,86,112,118,127,128,133,138,145,153,154,156,161,170,172,176,238,257,264,283,292,315,403],inclusive_max:[13,66,69,71,79,80,84,85,86,89,112,118,127,153,388],inclusive_min:[8,9,10,13,66,67,68,69,70,71,72,74,76,77,79,80,81,82,83,84,85,86,87,89,112,113,114,115,116,117,118,120,123,124,125,126,127,128,129,130,131,133,135,136,141,145,146,154,166,170,172,176,241,242,243,256,263,267,285,290,295,299,320,388],incompat:[46,50,245,262,290,395,402],inconsist:7,increment:[14,245,251,262,290,306,395,402,405],indefinit:402,independ:[9,13,19,238,395,405],index:[3,9,12,20,44,66,68,90,92,93,94,95,96,97,98,99,100,113,114,115,116,117,118,119,120,129,134,140,141,142,143,144,145,146,147,149,160,162,167,168,212,214,222,226,241,243,244,245,251,256,262,263,267,269,270,277,282,289,290,291,295,297,298,299,301,302,306,313,314,325,326,373,388,394,395,402,405],index_arrai:[13,147,166,212,214,216,244,269,270,282,291,297,298,302,313,325],index_array_bound:[13,147],index_exp:[112,129,402],index_rang:[145,166,212,214,217],indexdomain:[8,9,10,13,19,20,46,50,66,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,141,146,149,238,241,242,243,244,245,252,256,262,263,264,267,277,290,292,295,296,299,300,307,395,402,403,405],indexerror:[91,93,95,96,97,98,244,403],indexinterv:13,indextransform:[1,2,3,4,5,6,7,8,9,10,13,19,91,92,93,94,95,96,97,98,99,100,112,114,117,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,212,213,214,215,222,226,238,243,244,256,263,264,267,268,269,270,282,289,291,292,295,296,298,302,394,403,406],indic:[3,8,9,10,13,19,59,66,70,71,72,73,74,81,83,84,88,90,91,94,95,99,100,112,113,118,125,126,129,138,140,141,143,145,150,151,160,167,170,172,174,175,176,177,180,195,206,211,226,238,243,244,245,251,256,262,263,264,269,270,272,282,290,291,292,297,298,301,302,306,313,314,318,323,325,326,328,329,330,333,334,336,339,340,357,373,374,388,395,402,403,405],indicaet:8,indirectli:[138,405],individu:[7,9,403,405],ineffici:9,inf:[13,19,46,50,66,70,71,73,77,79,80,85,86,91,92,93,94,98,100,117,118,120,142,143,144,145,147,160,167,178,194,206,388,394,402,403],infinit:[13,66,129,245,262,290,395,402,405],info:9,inform:[11,14,16,395],infti:13,inherit:[54,62,63,64],init:0,initi:[1,14,402,403],inlin:403,inner:[10,41,42,66,67],inner_ord:[8,9,10,20,36,41,42,43,44,47,48,241,242,243,244,245,246,248,256,261,263,285,304,320,395,405],inner_order_soft_constraint:[20,36,41,42,48,405],innermost:[20,36,41,48,405],input:[1,2,3,6,8,9,10,13,19,90,91,92,93,94,95,96,97,98,99,100,116,138,140,141,142,143,144,145,146,147,149,150,151,152,153,154,155,156,157,158,159,160,167,212,215,245,262,289,290,373,394,395,402,403,406],input_dimens:[13,117,144,145,146,147,166,212,215,218,269,288,297,325,403,404],input_exclusive_max:[13,91,101,138,141,145,147,150,151,152,166,267,268,269,270,282,288,290,291,292,295,296,297,298,303,313,323,325,370,395,403,404],input_inclusive_max:[13,95,138,145,153],input_inclusive_min:[13,91,95,96,97,101,138,141,145,147,150,151,152,153,154,155,156,166,267,268,269,270,282,288,290,291,292,295,296,297,298,303,313,323,325,370,395,403,404],input_label:[13,91,92,94,95,96,97,98,99,100,138,141,145,147,149,155,157,159,163,166,267,268,295,296,395,403,404],input_origin:[138,154,156],input_rank:[13,91,117,138,140,141,142,144,145,150,151,157,159,213,215,244,270,298,394,403],input_shap:[13,92,96,97,98,99,138,145,149,150,151,152,153,154,155,156,157,158,159,163,166,214,244,267,268,269,270,282,291,298,302,403],insert:403,instal:[12,16],instanc:[0,61,104,377,378],instead:[6,7,8,9,10,11,14,101,129,138,183,206,298,329,395,402,403],instruct:12,int16:[8,9,10,19,389,406],int32:[1,2,8,9,10,19,91,240,312,316,390,395,403,406],int64:[8,10,19,391,406],int8:[8,9,10,19,392,406],integ:[0,1,2,3,6,8,9,10,13,16,19,66,94,114,115,117,160,256,282,313,314,389,390,391,392,397,398,399,400,405,406],integr:403,intend:[14,16,17,18],interdepend:[190,207,290,323],interfac:[12,169,234,299,300,301,302,314,326,357],interleav:403,intermedi:403,intern:[8,9,206],interoper:[292,294,368,404],interpret:[129,177,180,340,403,405,406],interrupt:[107,110],intersect:[66,87,92,112,130],interv:[3,13,19,46,50,66,67,68,69,70,71,72,73,74,75,77,79,80,81,85,86,89,169,170],introduc:12,introspect:60,invoc:[14,403],invok:[14,101,103],involv:[13,403],ip:11,irrespect:[95,206],isol:[12,330],isomorph:[190,207,290,323],issu:329,iter:[66,74],its:[13,15,54,57,58,62,112,120,138,147,206,238,246,340,343,403,405],itself:[7,329,357,403],j:[13,113,141],janelia:395,jax:[10,368],join:[6,7,8,9,10,182,186],jointli:329,jpeg:[6,9,14,406],jpeg_qual:9,json:[0,1,2,3,4,5,6,8,10,11,12,13,15,16,17,18,19,20,21,24,33,36,37,38,39,40,41,42,45,47,48,49,51,52,53,54,55,56,57,58,59,62,112,120,137,138,147,166,169,182,184,185,189,199,204,238,240,246,247,261,264,266,271,272,288,340,343,351,393,395,405],json_point:7,just:[13,403,404],k:[99,113,141],keep:329,kei:[7,8,9,10,12,19,54,60,169,170,172,174,177,181,182,183,186,187,188,191,192,195,197,198,200,201,202,203,204,205,206,207,208,209,210,211,264,280,290,292,310,329,330,395,404,405],kept:[9,14],key_encod:10,keyboard:[107,110],keyboardinterrupt:[107,110],keyerror:[197,198,200,206],keyrang:[169,170,171,172,173,174,175,176,202,203],keyvaluestorebackedchunkdriv:[6,8,9,10,406],keyword:101,kvstore:[2,3,4,5,6,7,8,9,10,15,16,17,18,19,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,264,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,284,285,288,289,290,291,292,294,295,296,297,298,299,300,301,302,304,305,306,307,308,309,310,313,314,317,320,323,325,326,329,330,395,402,404],kvstoreurl:[6,7,8,9,10,15,16,17,18],label:[8,9,10,12,13,19,66,69,70,71,72,73,76,77,82,87,88,90,91,92,93,99,112,114,115,116,118,119,120,124,130,131,138,142,145,155,241,242,243,244,245,252,256,262,263,267,290,295,296,299,300,307,373,374,395,402,403,405],lambda:101,larg:[12,203,294],larger:[13,404],largest:9,last:[13,91,105,115,116,197,198,200,206,236,244,403],latenc:[12,329],later:[14,15],latest:14,latter:10,layer:[7,8,9,10,329,405],layout:[12,19,20,21,35,36,43,44,46,47,48,50,238,245,248,262,264,273,290,292,304,317,395,402],lead:[10,13,102,346,405],least:[0,8,13,113,141,403],leav:[8,95,96,97,402],left:[9,13,113,141,395,402],legaci:403,len:121,length:[3,8,10,13,19,140,396,401,403,405],leq:13,less:[13,245,251,262,290,306,340,344,395,402,403,405],level:[2,5,8,10,12,206,404,405],lexicograph:[3,36,41,48,169,170,172,176,317,405],libcurl:11,libjpeg:14,libpng:14,librari:[10,12,129,138,403],lightweight:403,like:[11,12,16,114,117,251,395,403],likewis:403,limit:[0,12,13,16,17,64,65,357,402],link:[11,14,234,235,236,237],linux:[11,14],list:[8,11,13,14,74,115,169,202,203,206,375,376,403],liter:403,littl:[9,10,406],load:14,local:[0,11,12,15,16,17],localhost:16,locat:[11,16,320,395],lock:15,logic:[13,112,329,406],login:16,longer:357,loop:[102,402],lost:7,low:[9,13],lower:[3,13,66,70,71,72,73,80,83,86,92,95,98,112,118,125,128,129,133,138,145,150,154,156,161,170,172,176,238,257,264,283,292,315,403,405],lowest:3,lru:0,lz4:[8,10,14,292,295,296,297,298,305,313,320,323,325,395,405],lz4hc:[8,10],m1:13,m2:13,m:[13,14,405],mac:11,machin:[12,15,16],maco:14,made:[206,330,402],mai:[0,3,7,8,9,10,11,13,14,15,16,17,18,66,95,96,97,98,99,102,111,112,116,118,145,169,197,198,200,204,206,207,210,234,251,292,294,299,301,302,305,314,317,320,323,326,327,329,335,339,340,352,354,373,395,402,403,405,406],main:[107,110],major:[36,41,48,317,405],make:[11,14,405],manag:[19,54,330],mani:[11,13,16,91,138,403],manipul:18,manual:[13,14],map:[0,13,19,91,92,93,94,95,96,97,98,99,100,114,117,138,140,141,142,143,144,145,146,147,160,162,167,169,212,213,214,215,222,289,394,403],mark:[13,66,104,234,236,237,403],match:[0,1,2,3,4,5,6,7,8,9,10,13,18,82,87,93,95,96,97,98,113,141,203,206,211,245,262,290,355,356,395,402,403,405,406],mathrm:[9,13],mathtt:13,max:3,max_retri:16,maximum:[0,3,16,107,110],mayb:14,mean:[3,6,7,8,9,10,403],meaning:89,mechan:[4,5,6,7,8,9,10,12,169,357,403],median:3,member:[0,1,2,3,4,5,6,7,8,9,10,13,15,16,17,18,36,38,39,40,41,42,45,48,49,59,405,406],memori:[0,1,6,8,9,10,12,13,17,19,169,190,197,198,200,202,203,204,206,207,210,211,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,284,285,288,289,290,291,292,294,295,296,297,298,299,300,301,302,304,305,306,307,308,309,310,313,314,317,320,323,325,326,329,330,367,395,402,404,406],memory_key_value_stor:[18,190,207,272,292,295,296,297,298,310,313,323,325,395],mere:[297,329,357],merg:[23,34,245,262,290,395,402,405],metadata:[6,8,9,10,16,251,273,274,276,277,278,279,281,284,285,288,289,292,295,296,297,298,313,323,325,330,395,404],metadata_kei:10,metdata:8,method:[3,8,10,16,19,212,219,226,298,375,376,403,404],microsoft:14,middl:404,million:[8,9,10],min:[3,13],mind:329,minim:[395,403],minimal_spec:323,minimum:[3,112,124],minishard:9,minishard_bit:[9,395,404],minishard_index_encod:[9,395,404],mismatch:13,miss:[169,177,178,180,206,211,405],mix:403,mode:[3,14,91,94,100,264,290,292,311,323,330,395],model:10,modif:[19,330],modifi:[7,13,112,182,190,248,329],modul:[14,402],more:[4,5,6,7,8,9,10,11,13,14,17,91,116,298,329,402,403,406],most:[3,9,10,11,13,16,17,91,105,116,118,145,169,197,198,200,206,236,244,298,329,403,405],ms:11,msvc:14,much:14,multi:[12,18,19,292],multipl:[0,3,9,10,12,13,14,15,16,18,251,299,300,301,302,314,326,329,330,395,402,403],multipli:[8,9,13,340,342,344,345,346,347,350,405],multiscal:9,multiscale_metadata:[9,395,404],murmurhash3_x86_128:9,must:[0,1,2,3,4,5,6,7,8,9,10,11,13,14,16,36,48,61,82,87,91,99,108,117,206,241,244,245,262,267,270,290,295,298,299,302,323,329,395,402,403,405,406],my:[2,3,4,5,7,9,10,16,191,205,209],n5:[6,12,266,271,272,275,276,278,280,281,284,288,289,290,295,296,299,300,306,307,310,330,395,405],n:[13,19,91,112,403],name:[8,9,10,14,226,228,231,377,380,381,402,403],nanomet:9,nasm:14,nativ:[8,10,12],ndarrai:[292,294,402,403,404],ndim:[20,21,29,43,112,132,138,159,238,255,264,281,292,312],nearest:3,necessari:[11,13,113,141,323,406],necessarili:[91,403,405],need:[13,14,91,138,340,403,405],neg:[99,115,129,403,405],neither:[6,7,8,9,10,13,323,395,402],neq:13,nest:[1,13,190,204,290],nesteddirectorystor:10,net_zlib:14,network:[12,15,16],neuroglanc:[9,12,395,404,405],neuroglancer_multiscale_volum:9,neuroglancer_precomput:[6,251,395,404,405],neuroglancer_uint64_sharded_v1:[9,395,404],never:[6,317,329,403],newaxi:[19,91,92,394,403],newer:[352,353],newli:92,nghttp2:14,nm:[8,9,251,276,306,341,342,343,345,346,347,348,349,351,405],no_proxi:11,non:[3,6,7,8,9,10,13,14,16,82,87,91,99,113,141,169,204,245,262,290,330,355,356,357,395,402,403,405],none:[13,16,19,20,21,23,25,26,27,28,29,30,31,32,34,36,39,40,41,42,46,47,48,50,54,61,62,63,66,70,71,72,73,90,91,95,96,97,98,101,102,103,107,108,109,110,112,118,129,138,145,146,169,182,190,197,200,202,203,204,206,207,208,210,211,212,216,217,218,221,234,236,237,238,241,242,243,244,245,249,251,252,253,254,255,256,258,262,263,264,267,268,269,270,274,276,277,278,279,280,281,282,284,289,290,291,292,294,297,298,305,306,309,310,313,320,323,324,325,327,330,332,335,337,338,357,358,361,362,364,365,366,367,373,394,395,402,403],nonzero:[91,403],nor:[6,8,9,10,13,323,395,402],normal:[4,5,6,7,8,9,10,11,13,14,113,141,245,262,290,329,330,395,403],note:[3,8,9,11,13,14,91,245,262,290,395,402],now:329,np:[129,294,402,404],num_channel:[9,395,404],number:[0,3,4,5,6,8,9,13,14,16,19,20,21,23,27,28,30,34,36,44,48,93,95,96,97,98,107,110,112,118,121,129,134,136,138,145,165,203,238,260,264,287,292,316,322,340,346,371,372,403,405,406],numer:[3,13,340,403,405],numpi:[10,13,19,90,91,94,95,100,112,129,138,143,160,167,238,243,244,256,263,264,269,270,282,291,292,294,297,301,313,314,325,326,368,369,371,372,373,377,379,385,386,387,389,390,391,392,393,396,397,398,399,400,401,404],numpy_dtyp:[377,382],numpyindexingspec:[90,91,94,100,138,143,160,167,238,243,256,263,264,269,282,291,292,297,301,313,314,325,326,373],o:[0,12,197,198,200,273,274,276,277,279,285,317,403,404],oauth2:11,obj:[143,403],object:[0,1,2,3,4,5,6,7,8,9,10,13,15,16,17,18,19,82,87,101,102,107,110,112,119,124,129,130,145,146,191,205,209,234,236,237,248,294,329,330,340,357,364,366,377,378,384,403,404,405,406],object_:[393,396,401],observ:[330,402],obtain:[8,10,91,112,248,292,319,403,404],occupi:406,occur:[13,101,197,198,200,403],odd:3,offer:3,offici:10,offset:[3,13,20,46,50,90,96,97,117,144,145,146,147,163,166,212,213,214,215,220,288,373,403,404,405],often:[16,329],oindex:[90,94,138,143,160,238,243,244,256,263,264,269,270,282,291,292,297,298,301,302,313,314,325,326,373],older:[6,7,8,9,10,206,352,354],omit:[395,403],onc:[13,19,116,211,329,330,339,357,402],one:[8,10,11,13,16,91,92,113,118,141,145,245,262,290,298,395,402,403,405],ones:8,onli:[0,3,6,7,8,9,10,11,13,14,15,36,46,48,50,91,92,101,118,145,211,245,262,273,274,276,277,279,285,290,311,317,329,330,357,395,402,403,404,405],onto:403,op1:403,open:[1,2,3,4,5,6,7,8,9,10,12,19,66,70,101,169,170,172,190,197,198,199,200,201,202,203,204,205,206,207,209,210,211,251,264,290,292,294,295,296,297,298,299,300,301,302,304,305,306,307,308,309,310,313,314,317,320,323,325,326,329,330,339,402,403,404,405,406],openssl:11,oper:[0,6,7,8,9,10,11,12,13,14,15,19,91,93,94,95,96,97,98,99,100,101,103,104,105,106,107,108,110,114,117,138,143,160,167,168,169,177,197,200,202,204,206,210,211,234,243,256,263,269,282,291,292,297,299,300,301,302,314,324,326,327,329,339,357,395,402,403],opn:403,opt:14,optim:[10,14],optimist:12,option:[0,1,2,3,4,5,6,7,8,9,10,11,13,14,15,16,17,18,19,66,112,238,245,262,264,273,274,276,277,279,285,290,352,355,395,402,405,406],order:[8,9,13,14,16,19,20,36,41,42,48,91,99,138,139,169,170,172,176,203,238,239,264,265,273,285,292,293,297,298,313,317,323,325,329,395,403,405,406],org:14,org_blosc_cblosc:14,org_lz4:14,org_nghttp2:14,org_sourceware_bzip2:14,org_tukaani_xz:14,origin:[3,8,9,10,13,20,36,39,40,48,90,95,96,97,98,112,128,133,138,156,161,190,207,238,245,257,262,264,283,290,292,315,323,373,395,402,403,405],orthogon:[94,160,256,282,313,314,403],os:11,other:[3,8,9,10,13,14,20,21,22,23,34,35,46,50,61,66,68,69,82,87,91,112,113,118,124,130,138,170,171,192,193,197,198,200,238,240,264,266,298,340,341,402,403,405],otherwis:[1,2,3,6,8,9,10,13,14,16,70,71,72,102,113,118,141,145,337,405,406],out:[13,91,92,93,94,95,96,97,98,99,100,141,142,143,144,145,146,147,160,167,289,394,403],outer:[90,94,138,160,238,256,264,282,292,313,314,373],output:[14,19,90,91,92,93,94,95,96,97,98,99,100,114,117,138,140,141,142,143,144,145,146,147,160,162,163,166,167,212,213,214,215,222,224,225,226,244,245,262,269,270,282,288,289,290,291,297,298,302,313,325,373,394,395,402,403,404],output_rank:[117,138,140,163,244,270,298,299,302],output_user_root:14,outputindexmap:[13,19,117,138,144,145,146,162,163,166,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,244,270,298,302],outputindexmethod:[19,212,219,222,226,227,228,229,230,231,232,233],outsid:[330,403],over:[3,11,13,66,74,117,145,146,329,403,405],overlap:7,overrid:[0,1,2,3,4,5,6,7,8,9,10,14,15,16,17,18,290,323,395,406],overridden:[8,14,190,204,290,395],own:16,pack:10,pai:16,pair:[18,234,235,340,345],paramet:[8,9,10,16,17,19,23,34,36,48,51,59,60,62,63,70,71,72,73,82,87,93,95,96,97,98,99,102,107,110,114,115,116,117,118,119,124,130,140,145,146,172,190,197,198,200,202,203,204,206,207,211,241,244,245,262,267,270,290,295,298,299,301,302,314,317,323,326,329,367,395,402,405,406],parent:[0,1,2,3,4,5,6,7,8,9,10,15,16,17,18,54,62,63,64,65,406],pars:[54,57,63,169,182,346,405],part:[14,20,36,238,245,251,373],partial:[6,8,9,10,13,395],particular:[0,12],particularli:[89,402],partit:[294,405],pass:[14,19,352,355],path:[4,5,6,7,8,9,10,11,12,14,15,16,17,18,169,182,183,184,185,186,187,188,189,190,191,197,198,199,200,201,202,204,205,206,207,209,211,280,310,330,395,404],pattern:101,pem:11,pend:0,pep:403,per:[8,9,10,13,21,23,27,28,34,405],perfect:403,perfectli:[329,403],perform:[2,3,9,12,13,90,197,200,202,204,210,211,273,274,276,277,279,285,299,300,301,302,314,317,326,327,395,402,403,404,405],permiss:16,permit:[6,7,8,9,10,13,90,91,99,114,117,245,262,290,395,402,403],permut:[13,20,36,41,42,48,405],persist:[10,330],physic:[8,19,238,245,251,262,264,276,290,292,306,340,395,402,405],pick:9,pip:14,place:[9,11,91],plain:90,platform:[10,14],plu:403,pm:13,png:[6,14,406],point:[19,329,330,340,368,385,386,387,405,406],pointer:7,polici:[292,319],pool:[0,207,323,395,402],portion:[346,405],posit:[3,13,245,262,290,292,309,395,403,404],posix:[14,15],possibl:[8,9,13,14,320,402],potenti:403,power:403,pre:14,prebuilt:14,preced:[11,36,48,245,262,290,395,402,405],precis:[19,36,48,329,340,385,386,387,393,396,401,405,406],precomput:[9,12,405],predecessor:403,prefer:[36,48,405],prefix:[16,17,18,169,182,188,205,403],prepar:11,presenc:7,present:[3,8,13],preserv:402,preset:8,preshift_bit:[9,395,404],prevent:14,previou:403,previous:[4,5,6,7,8,9,10,15,16,18,101,109,204,395,402],primarili:[60,66,114,117],print:[11,70,71,72,73,77,101,249,251,252,253,254,258,278,281,284,289,402],prior:[6,7,8,9,10,14,93,95,96,97,98,402,403],problem:[10,16],process:[7,12,15,294],produc:[19,101,107,110,234,403],product:[112,136],progress:14,project:[14,16],project_id:16,promis:[19,101,105,234,235,236,237],propag:[82,87,124,130],properti:[3,8,9,10,12,17,150,151,152,153,154,155,156,158,248,330,395,402,405,406],propos:403,protocol:[15,403],provid:[7,8,9,10,11,12,14,15,16,101,329,330,357,403],purpos:[18,114,402,403],py:[14,112,119,143],python3:14,python:[1,10,12,19,66,76,301,302,393,396,401,403],qualiti:[4,9],quaniti:[340,405],quantiti:[19,245,251,262,290,306,340,344,395,402,405],queri:[12,101,105,106],queued_for_writeback_bytes_limit:0,quit:3,r:[174,311],rais:[46,50,74,93,95,96,97,98,101,107,110,116,129,197,198,200,203,206,241,242,243,244,245,256,262,263,267,268,269,270,282,290,291,330,337,395,402],rang:[4,13,66,90,96,97,98,99,169,170,171,172,173,174,175,176,202,203,214,215,329,373,374,403],rank:[1,2,3,4,5,6,7,8,9,10,13,20,21,23,29,30,34,36,41,43,44,46,48,50,91,92,93,94,95,96,97,98,99,100,112,113,114,117,118,121,125,126,129,132,134,138,141,142,143,144,145,146,147,157,159,160,163,167,222,224,225,238,240,241,242,243,244,245,246,247,250,251,253,255,256,258,261,262,263,264,270,281,284,285,289,290,292,298,299,302,312,316,320,394,395,402,403,405,406],rare:[10,403],rate:405,rather:[36,41,42,48,91,403,405],ratio:[21,23,25,26,34,36,48,405],raw:[8,330],re:[14,169,190,207,290,292,323,402],reach:0,read:[2,3,6,7,8,10,12,13,19,20,21,36,45,46,48,169,177,178,198,204,206,210,211,292,294,297,298,299,300,301,302,303,311,314,317,318,324,326,327,329,330,352,353,354,357,367,370,395,402,403,405],read_chunk:[8,9,10,20,36,45,46,47,48,285,304,320,405],read_chunk_aspect_ratio:[36,48],read_chunk_aspect_ratio_soft_constraint:[36,48],read_chunk_el:[9,36,47,48],read_chunk_elements_soft_constraint:[36,48],read_chunk_shap:[9,36,46,48,402],read_chunk_shape_soft_constraint:[36,48],read_chunk_templ:[20,46,50],read_context:402,read_funct:402,read_futur:404,read_param:402,readabl:[292,318],reader:[15,330],readi:[107,110,202,329,338],readm:14,readresult:[169,177,178,179,180,181,204,206,211],real:[245,262,290,395,402,406],rebuild:14,receiv:[13,16,107,110],recent:[0,91,105,116,197,198,200,206,236,244,403],recheck:[6,7,8,9,10],recheck_cached_data:[6,7,8,9,10,404],recheck_cached_metadata:[6,8,9,10],recommend:[9,14,299,300,301,302,314,326,340,403,405],recomput:402,record:[197,200,202,211],rectangular:[3,9,13],recurs:405,reduc:[14,298],refer:[0,4,5,6,7,8,9,10,11,12,14,15,16,17,18,91,190,207,290,323,329,403,405,406],reflect:[206,297,307,317,329,357],regardless:[6,7,8,9,10,403],region:[3,9,13,403,404],regist:[10,101,103,109],regular:[20,21,329,330,403,405],rel:[9,99,202,403,405],relat:[14,16,396,401],relationship:13,reli:406,relianc:15,remain:[8,10,13,91,98,190,204,290,339,346,403,405],remot:[0,11,12],remov:92,remove_done_callback:[101,109,357,365],reorder:99,replac:[190,290,403],repo:14,repositori:14,repres:[8,9,10,13,18,19,66,111,138,212,234,317,329,340,403,405,406],represent:[13,15,16,17,18,19,20,21,24,33,37,47,51,52,53,54,55,56,57,58,59,62,76,77,120,122,137,147,148,166,184,185,189,191,199,209,240,246,247,261,266,271,272,288,340,343,351,377,403,405,406],request:[16,101,104,206,352,353,402],requestor:16,requir:[1,2,3,4,5,6,7,8,9,10,15,16,17,18,118,145,317,395,404,405,406],reserv:13,resiz:[8,9,10,13,66,83,84],resolut:[8,9,276,395,404,405],resolv:[102,111,203,206,211,292,319,403],resourc:[0,1,2,3,4,5,6,7,8,9,10,12,15,16,17,18,19,54,55,56,60,61,190,204,207,266,272,290,323,395,402,406],respect:[3,9,23,34,66,92,95,329,403],restrict:203,result:[8,9,10,12,13,14,19,91,92,93,100,101,102,107,108,110,111,113,141,144,167,169,177,178,190,197,198,200,203,206,207,234,236,237,241,263,267,290,291,294,295,297,299,300,301,302,314,317,323,325,326,329,330,337,338,357,366,402,403,404,405],retain:[23,34,99,207,323,403,405],retain_context:[169,207,323],retri:16,retriev:[16,54,60,404],revalid:[6,7,8,9,10],revers:[99,138,139,238,239,264,265,292,293],rewrit:9,rfc:7,right:[13,16,113,141],rightarrow:13,roll:330,root:15,round:[3,9,13,403],row:[36,41,48,317,405],rs1:15,rtf:14,rule:[13,14],run:[16,102,107,110,402],runtim:[11,16],rw:311,s:[8,11,14,19,389,390,391,392,403,406],safe:[12,15,16,329],same:[0,7,8,9,10,13,14,18,61,93,95,96,97,98,190,207,290,305,310,320,323,329,330,357,402,403,404,405],satisfi:[9,317,403],satur:12,save:11,scalar:[91,95,96,97,98,299,301,302,314,326,329,368,377,378,403],scale:[9,251],scale_index:[9,395,404],scale_metadata:[9,395,404],schema:[1,2,3,4,5,6,7,12,13,19,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,285,290,292,320,395,402,406],scheme:[15,16,17,18],script:14,sdist:14,sdk:16,se_curl:[11,14],second:[6,13,107,110,192,196,206],section:[11,12,16],secur:[11,16],segment:[395,404,405],sel:403,select:[1,2,3,4,5,6,7,19,82,87,90,91,92,93,95,96,97,98,99,112,116,124,130,251,373,374,406],self:[22,33,34,35,46,47,48,50,53,56,59,60,67,68,69,74,75,76,77,79,80,82,85,86,87,89,91,93,94,95,96,97,98,99,100,103,104,105,106,107,108,109,110,113,114,115,116,117,121,122,124,130,137,139,140,141,142,143,144,148,160,161,164,165,166,167,171,173,183,185,186,187,189,190,193,197,198,199,200,201,202,203,206,207,210,211,223,224,226,228,236,237,239,240,241,242,243,244,247,250,256,257,259,260,261,262,263,265,266,267,268,269,270,272,275,282,283,286,287,288,290,291,293,294,295,296,297,298,299,300,301,302,303,309,313,314,315,316,317,319,321,322,323,325,326,327,329,332,335,337,341,347,348,351,358,359,360,363,364,365,366,378,383],semant:[15,90,91,94,100,138,143,160,167,238,243,256,263,264,269,282,291,292,297,301,313,314,325,326,373,403],separ:[0,6,7,8,10,11,14,16,183,197,198,200,206,211,294,329,403,406],sequenc:[23,34,36,48,90,91,93,95,96,97,98,113,116,118,119,138,140,141,145,146,245,262,290,373,374,395,402,403],serial:13,serv:[9,113,141,251,402,405],server:[11,16],servic:16,set:[3,9,11,14,16,18,19,36,48,90,93,95,169,206,245,262,290,323,373,395,402,403],set_except:[234,236],set_result:[234,237],setup:[12,14],sever:[14,101],sha256:14,shape:[13,20,21,23,25,26,31,32,34,36,46,48,50,112,118,121,123,124,125,126,127,128,129,130,131,132,133,134,135,136,138,145,158,164,238,241,242,243,244,245,252,256,259,262,263,264,277,285,286,290,292,294,295,296,297,298,299,300,301,302,304,305,306,307,308,309,310,313,314,317,320,321,323,325,326,329,395,402,403,405],shape_soft_constraint:[21,23,32,34,36,47,48,405],shard:[395,404,405],shard_bit:[9,395,404],shard_data_encod:9,shardingspec:9,share:[0,12,15,16,19,54,61,190,204,207,290,323,395,402],shift:[90,96,97,373],shlex:14,shortcut:403,shorthand:[301,302],should:[6,7,8,9,10,11,14,16,17,18,102,329,355,356,402,405],show:14,shuffl:[8,10,292,295,296,297,298,305,313,320,323,325,395,405],sign:[13,19,389,390,391,392,406],signal:234,signific:329,silent:403,similar:[13,94,95,100,160,167,256,263,282,291,313,314,325,326,403],simpler:3,simplest:14,simpli:[92,102,136,357,402,403],simultan:14,sinc:[6,13,91,107,110,129,192,196,206,402,403,404],singl:[7,8,9,10,11,13,19,91,99,112,115,169,197,198,200,203,206,211,212,215,245,251,262,272,290,306,340,386,395,402,403,404,405,406],single_input_dimens:[13,226,232],singleton:[19,92,394],size:[0,8,9,10,13,14,23,34,66,72,75,76,78,82,87,89,112,118,136,138,145,165,238,260,264,287,292,322,329,395,402,404,405],skip:[14,323,352,353,403],slice:[91,95,112,113,129,138,141,403,404],slower:[8,10],slowest:[8,10],small:[1,9],smallest:[3,9,10],snappi:[8,10,14],so:[14,404],soft:[0,1,2,3,4,5,6,7,8,9,10,20,21,23,26,28,32,34,36,40,41,42,46,48,50,405,406],sole:91,some:[8,13,330,340,405],sourc:[13,14,292,299,300,301,302,314,326,329,357,367],space:[14,19,20,44,91,92,93,94,95,96,97,98,99,100,112,134,138,141,142,143,144,145,146,147,157,159,160,163,167,245,262,289,290,394,395,402,403,405],spec:[12,54,57,58,59,61,62,63,65,91,168,169,182,183,184,185,186,187,188,189,190,191,204,205,207,240,241,253,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,305,323,375,395],special:[0,9,13,14,16,19,79,80,85,86,91,172,175,388,403,405],specif:[0,1,2,3,4,5,6,7,8,10,14,15,16,17,18,19,51,54,57,58,169,182,190,191,192,195,207,209,264,273,274,276,277,279,285,290,323,340,395,405,406],specifi:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,23,34,36,41,42,46,48,50,51,66,70,71,72,90,91,95,96,97,98,99,100,102,107,110,112,113,115,116,118,129,141,145,146,167,169,170,172,177,190,192,197,200,202,203,204,206,207,211,234,236,237,238,245,248,249,251,254,262,263,273,274,276,277,279,280,285,290,291,292,303,317,323,325,326,329,340,344,347,348,352,354,355,356,370,373,394,395,402,403,405,406],split:14,squar:403,ssl:[11,14,16],sslkeylogfil:11,stack:14,stage:[19,330],staleness_bound:[206,352,354],stamp:[169,177,178,179,204,206,211],standard:[10,14],start:[3,14,19,91,99,101,115,203,330,336,339,373,402,403],startup:14,state:[169,177,178,180,204,206,211],stderr:11,step:[13,91,329,403],still:[7,9,10,13,114,117,330,339,402,403],stop:[91,403],storag:[4,5,7,8,9,10,12,16,19,20,36,41,42,48,169,192,193,194,211,264,280,290,292,310,320,329,330,357,395,405],store:[7,8,9,10,11,13,17,19,169,182,183,186,187,188,191,192,195,197,198,200,201,202,203,204,205,206,207,208,209,210,211,251,264,280,290,292,303,304,305,306,309,310,320,329,330,340,370,395,402,404,405],str:[19,54,60,66,70,71,72,73,76,77,88,90,93,112,115,118,122,131,138,145,148,155,169,170,172,175,176,178,182,183,185,186,188,191,192,194,197,198,199,200,205,206,209,211,226,228,231,238,245,247,262,264,272,290,292,311,340,342,345,346,349,373,377,380,381,383,395,401,402,403],strictli:[113,141],stride:[3,13,90,95,145,147,166,212,214,215,221,373,403],string:[0,3,6,7,8,9,10,12,13,15,16,17,18,19,76,77,88,122,148,170,172,175,176,185,195,199,247,272,303,340,346,396,401,405,406],strip:[203,346,405],strip_context:[190,290,323],strip_prefix:14,strip_prefix_length:203,strong:12,studio:14,style:[16,17,18,90,91,94,95,100,129,138,143,160,167,238,243,244,256,263,264,269,270,282,291,292,297,301,313,314,325,326,373],sub:[7,14,404],subarrai:10,subdivid:405,subject:[292,319,357],subscript:[299,300,301,302,314,326,403,404],subsequ:[91,329,357,395,402,403],subset:[13,14,101,112,116,403],subtyp:[6,8,10,17,405,406],succe:13,success:[110,198,335,337],successfulli:[107,234,237,329,338,357],suffic:13,suffici:403,suffix:[182,183],suitabl:[1,2,3,4,5,6,7,8,9,10,14,395,405,406],sum:403,suppli:404,support:[0,2,3,6,7,8,9,12,13,14,15,16,17,18,90,101,129,168,169,197,200,202,211,251,292,301,318,328,330,368,403,404,405,406],surviv:329,synchron:[101,197,198,200,292,294,299,300,301,302,314,317,326,329,330,337,402,404],syntax:[0,7,15,16,18,299,300,301,302,314,326,340,403,405],system:[11,14,16,17,329],t:[14,111,138,139,190,204,238,239,264,265,290,292,293,402],tabl:[13,18],take:[9,11,12,36,48,245,262,290,395,402,403,405],taken:[9,46,50,69,405],target:[13,21,23,27,28,34,36,48,90,99,373,405],temporari:[9,14],tensoprstor:11,tensorflow:[10,368],tensorstor:[0,1,2,3,4,5,6,7,11,13,14,16,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,396,397,398,399,400,401,402,403,404,405,406],tensorstore_bazel_build_opt:14,tensorstore_bazel_compilation_mod:14,tensorstore_bazel_startup_opt:14,tensorstore_bazelisk:14,tensorstore_ca_bundl:11,tensorstore_ca_path:11,tensorstore_curl_verbos:11,tensorstore_gcs_http_url:[11,16],tensorstore_prebuilt_dir:14,tensorstore_system_lib:[11,14],term:[91,94,100,160,167,256,263,282,291,301,313,314,325,326,403],termin:[396,401],test:[18,101],th:[91,113,141,403],than:[0,6,7,8,9,10,13,14,36,41,42,48,91,116,206,352,354,402,403,405],thei:[8,18,59,114,117,396,401,402,403],them:329,therefor:[9,11],thi:[0,1,3,6,7,8,9,10,11,13,14,15,16,17,36,48,54,60,61,64,65,89,94,100,101,108,112,113,117,129,136,138,139,141,142,144,160,161,164,165,167,169,197,198,200,202,203,206,208,210,211,239,245,248,256,257,259,260,262,263,265,270,273,274,276,277,279,282,283,285,286,287,290,291,292,293,294,297,298,301,302,305,310,313,314,315,316,320,321,322,325,326,327,329,330,340,344,347,348,349,357,377,378,395,402,403,404,405],third:405,those:[101,298],though:[114,117,402],thread:[0,101,102,107,110,197,198,200,294,317,402],three:[9,13,113,141,405],through:[12,13,16,17,138],throughput:12,tie:3,time:[6,7,8,9,10,13,192,194,196,206,402,405],timedelta:10,timeout:[101,107,110,357,364,366],timeouterror:[107,110],timestamp:[169,177,179,192,193,402],timestampedstoragegener:[169,177,178,179,192,193,194,195,196,204,206,211,402],tl:14,tmp:[14,15,183,184,185,186,187,188,189,199,201,330,404],to_json:[20,21,33,47,51,53,55,56,57,59,64,112,137,138,166,182,189,238,261,264,288,340,351,377,383],togeth:10,tool:14,top:[2,404,405],total:[0,112,136,138,165,238,260,264,287,292,322],total_bytes_limit:[0,6,8,9,10,56,60,62,64,65,402,404],toward:403,traceback:[91,105,116,197,198,200,206,236,244,403],track:329,traffic:11,trail:[346,405],transact:[12,18,19,197,200,202,203,204,206,208,210,211,299,300,301,302,310,314,317,324,326,327,330,331,332,333,334,335,336,337,338,339,357,395],transform:[1,2,3,4,5,6,7,8,9,10,12,19,91,92,93,94,95,96,97,98,99,100,101,112,114,117,138,140,141,142,143,144,145,146,147,149,150,151,152,153,154,155,156,157,158,159,160,163,166,167,212,213,214,215,222,238,241,242,243,244,245,256,262,263,264,267,268,269,270,282,288,289,290,291,292,295,296,297,298,299,300,302,303,307,313,323,325,370,394,395,402,404,406],translat:[3,8,10,13,90,96,97,98,373,403],translate_backward_bi:[90,96,373],translate_bi:[90,91,93,97,114,140,142,288,289,373],translate_to:[90,98,373],transpos:[90,92,99,138,139,238,239,264,265,292,293,373,403],treat:[102,206,403,405],tree:14,trip:13,truncat:403,trust:11,ts:[8,9,10,43,44,46,47,50,56,60,61,62,64,65,66,67,68,69,70,71,72,73,74,76,77,79,80,81,82,83,84,85,86,87,88,89,91,92,93,94,95,96,97,98,99,100,101,102,105,113,114,115,116,117,118,119,120,121,123,124,125,126,127,128,129,130,131,132,133,134,135,136,139,140,141,142,143,144,145,146,147,149,150,151,152,153,154,155,156,157,158,159,160,163,166,167,169,174,183,184,185,186,187,188,189,190,191,197,198,199,200,201,202,203,204,205,206,207,209,210,211,213,214,215,234,236,237,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,258,261,262,263,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,284,285,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,312,313,314,316,317,320,323,325,326,329,330,341,342,343,344,345,346,347,348,349,350,351,370,374,388,394,395,402,403,404],tupl:[20,21,25,26,31,32,39,40,41,42,112,123,125,126,127,128,129,131,133,135,138,140,150,151,152,153,154,155,156,158,161,164,234,235,238,245,251,257,259,262,264,276,283,286,290,292,306,315,321,340,345,395,402,403],turbo:14,tutori:12,two:[7,13,19,20,21,22,35,192,193,329,330,340,341,357,389,390,391,392,403,405,406],txn:[169,210,301,329,330],type:[0,1,2,3,6,7,12,60,101,111,138,168,238,245,253,262,264,278,290,295,296,299,301,302,303,308,309,314,326,329,330,340,367,368,369,370,377,378,379,384,385,386,387,389,390,391,392,393,395,396,399,401,402,403,404,405,406],u1:10,u2:[10,277,285],u4:[292,297,298,313,323,325],u8:10,u:[349,350],udunits2:[340,405],uint16:[8,9,10,19,275,285,330,397,406],uint32:[8,9,10,19,101,292,294,295,296,297,298,299,300,301,302,303,305,306,307,308,309,310,313,314,317,320,323,325,326,329,370,398,402,404,406],uint64:[8,9,10,19,395,399,404,406],uint8:[4,5,8,9,10,19,245,246,247,250,253,258,261,262,275,278,400,406],um:276,unbind_context:[182,190,207,290,323],unbound:[13,19,46,50,66,73,79,80,85,86,89,118,145,190,290,388],unchang:[95,96,97,98,190,204,290,403],unchunk:9,uncommit:[317,329,330],uncondition:[100,167,263,291,325,326,403],unconstrain:[251,395],under:[2,6,10,15,403],underli:[4,5,6,7,8,9,10,12,13,17,138,264,280,290,292,310,329,330,357,395,405],unequ:403,unicod:[19,401,406],uniform:[3,12,405],uniqu:[13,61,402],unit:[19,238,245,251,262,264,276,290,292,306,340,341,342,343,344,345,346,347,348,349,350,351,395,402],unix:[6,16,17,18,107,110,192,196,206],unknown:[13,245,251,262,290,305,306,309,395,402,405],unlabel:[8,13,66,88,118,145,405],unless:[9,16,340,403,405],unlik:[91,101,403],unmatch:13,unmodifi:402,unpickl:402,unregist:[101,109],unshar:[395,402],unshard:405,unsign:[19,397,398,399,400,406],unspecifi:[3,8,9,10,13,21,30,36,46,48,50,177,178,180,195,203,206,238,252,253,258,264,278,284,289,402,403,405],unsuccessfulli:[104,110,234,236],until:[101,107,110,197,198,200,202,211,330,339,357,402,403],unus:[4,5],up:[9,14,16,405],updat:[9,20,21,34,48,182,190,238,240,248,249,250,251,252,254,258,262,264,266,272,275,290,292,319,323],upon:[101,103,403],upper:[8,10,13,66,70,71,72,73,79,84,85,92,112,118,123,126,127,129,138,145,151,152,153,170,172,175,403],url:[12,14,15,16,17,18,169,182,184,191,204,209],us:[0,1,3,6,7,8,9,10,11,12,13,14,15,16,18,19,20,38,60,61,66,90,91,95,96,97,98,101,102,108,111,112,114,117,129,138,169,183,190,204,206,207,210,234,238,241,242,243,244,256,263,264,267,268,269,270,280,282,290,291,292,295,296,297,298,299,300,301,302,305,310,313,314,317,320,323,324,325,326,327,329,330,335,339,340,346,352,355,357,367,373,393,394,395,396,401,402,403,404,405],usag:330,user:15,usezlib:[8,405],ustr:[19,401,406],usual:[172,176,403],utf:406,util:14,v1:[13,395,404],v2:13,v3:13,v4:13,valid:[0,8,13,36,48,91,95,192,196,206,403,405],valu:[0,1,3,6,7,11,12,13,19,36,48,59,66,69,79,80,85,86,89,91,95,101,111,116,169,177,178,179,180,181,182,183,186,187,188,190,191,192,195,197,198,200,201,202,203,204,205,206,207,208,209,210,211,226,227,233,238,245,251,254,262,264,279,280,290,292,306,309,310,323,329,340,344,393,395,402,403,404,405,406],valueerror:[46,50,74,116,129,203,241,242,243,244,256,263,267,268,269,270,282,291],variabl:[14,16,19,396,401],varieti:17,varlength:8,vector:[13,90,91,100,112,118,138,140,145,167,238,263,264,291,292,325,326,373],verbos:[11,403],veri:[9,114,117],verifi:16,version:[3,11,14,192,195,402,403],via:[1,3,8,9,10,12,41,42,403],view:[2,3,12,138,139,169,210,222,238,239,264,265,292,293,295,296,297,298,303,313,325,327,370,375,376,402,403,404],vindex:[90,91,100,138,143,167,238,243,244,256,263,264,269,270,282,291,292,297,298,301,302,313,314,325,326,373],virtual:[2,3,12,14,138,292,295,296,297,298,313,325,375,376,402],virtual_chunk:[19,352,355,402],virtualchunkedreadparamet:[19,352,353,354,402],virtualchunkedwriteparamet:[19,355,356,402],visibl:330,visual:14,volum:9,voxel:[9,405],voxel_offset:[9,395,404],vv:14,w:[13,311],wa:[6,11,54,65,107,110,204,206,248,335,395,402,404],wai:[0,8,9,10,12,14,402,405],wait:[101,329,402,404],well:[9,10,91,368,395],were:403,what:6,wheel:14,when:[0,1,2,3,4,5,6,7,13,14,91,102,108,202,206,251,299,300,301,302,314,317,326,329,338,357,402,403,405,406],where:[0,3,9,11,13,19,91,94,100,111,113,129,141,143,145,147,160,167,245,262,290,395,402,403,405,406],wherebi:403,whether:[59,70,71,72,73,91,101,105,106,112,118,125,126,138,145,150,151,323,330,333,334,336,339,403],which:[0,2,3,6,7,8,9,10,11,12,13,14,16,18,46,50,54,62,63,64,65,66,95,96,97,98,102,112,138,192,196,206,248,298,329,335,340,349,357,367,373,402,403,404,405],whitespac:[346,405],wide:15,window:[11,14,15],wireshark:11,wise:[2,8,10,19,402],wish:402,with_transact:[169,204,210,292,301,327,329,330,395,402],within:[0,3,6,7,8,9,10,13,16,17,18,20,36,41,48,107,110,169,182,188,203,205,206,292,317,402,403,405],without:[8,13,16,90,96,97,98,183,197,198,200,204,206,211,329,330,373,395,402,403,404,405],won:[190,204,290],work:[14,16],workspac:14,worst:[8,9],would:[93,129],writabl:[292,328],write:[2,6,7,8,10,12,13,16,19,20,21,36,48,49,50,169,197,200,202,204,206,210,211,292,298,299,300,301,302,303,311,314,317,324,326,327,328,329,330,355,357,367,370,395,402,403,405],write_chunk:[8,9,10,20,36,47,48,49,50,285,304,320,405],write_chunk_aspect_ratio:[36,48],write_chunk_aspect_ratio_soft_constraint:[36,48],write_chunk_el:[9,36,48],write_chunk_elements_soft_constraint:[36,48],write_chunk_shap:[9,36,48,50],write_chunk_shape_soft_constraint:[36,47,48],write_chunk_templ:[20,46,50],write_context:402,write_funct:402,write_futur:404,writeback:[0,12,329,355,356],writefutur:[19,101,292,329,357,358,359,360,361,362,363,364,365,366],written:[10,14,19,245,262,290,292,309,329,395,402,404],x:[8,9,10,13,14,66,70,71,72,73,76,77,82,87,88,91,92,93,94,95,96,97,98,99,100,102,113,114,115,116,120,124,130,131,141,142,144,147,149,155,157,159,163,166,174,204,241,242,243,244,252,256,263,267,268,289,295,296,299,300,307,374,395,403,404],xcode:14,xre:9,xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx:14,xyz:9,xz:[8,14],y:[8,9,10,13,91,92,93,94,95,96,97,98,99,100,113,114,115,116,119,120,124,130,131,141,142,147,149,155,157,159,163,166,174,204,241,242,243,244,252,256,263,267,268,289,295,296,299,300,307,395,403,404],yet:[292,309,317],you:[6,8,9,10,11,14,16,61,329,395,402,404],your:14,yre:9,yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyi:14,z:[8,9,13,91,93,94,95,96,97,98,99,100,113,114,115,116,120,131,141,147,149,155,157,159,163,166,241,242,243,244,252,256,263,267,268,295,296,299,300,395,403,404],zarr:[2,3,6,12,249,267,268,269,270,273,274,277,279,282,285,291,292,294,297,298,301,302,304,305,308,309,313,314,317,320,323,325,326,329,395,403,405],zarr_format:[10,292,297,298,313,323,325,395],zarrai:10,zero:[6,8,9,10,13,66,78,91,92,118,145,245,262,290,395,402,403,405],zlib:[8,10,14],zre:9,zstd:[8,10,14]},titles:["Context framework","<code class=\"docutils literal notranslate\"><span class=\"pre\">array</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">cast</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">downsample</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">jpeg</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">png</span></code> Driver","Drivers","<code class=\"docutils literal notranslate\"><span class=\"pre\">json</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">n5</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">neuroglancer_precomputed</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">zarr</span></code> Driver","Environment variables","TensorStore","Index space","Building and Installing","<code class=\"docutils literal notranslate\"><span class=\"pre\">file</span></code> Key-Value Store driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">gcs</span></code> Key-Value Store driver","Key-Value Storage Layer","<code class=\"docutils literal notranslate\"><span class=\"pre\">memory</span></code> Key-Value Store driver","API reference","tensorstore.ChunkLayout","tensorstore.ChunkLayout.Grid","tensorstore.ChunkLayout.Grid.__eq__","tensorstore.ChunkLayout.Grid.__init__(components)","tensorstore.ChunkLayout.Grid.__init__(json)","tensorstore.ChunkLayout.Grid.aspect_ratio","tensorstore.ChunkLayout.Grid.aspect_ratio_soft_constraint","tensorstore.ChunkLayout.Grid.elements","tensorstore.ChunkLayout.Grid.elements_soft_constraint","tensorstore.ChunkLayout.Grid.ndim","tensorstore.ChunkLayout.Grid.rank","tensorstore.ChunkLayout.Grid.shape","tensorstore.ChunkLayout.Grid.shape_soft_constraint","tensorstore.ChunkLayout.Grid.to_json","tensorstore.ChunkLayout.Grid.update","tensorstore.ChunkLayout.__eq__","tensorstore.ChunkLayout.__init__(components)","tensorstore.ChunkLayout.__init__(json)","tensorstore.ChunkLayout.codec_chunk","tensorstore.ChunkLayout.grid_origin","tensorstore.ChunkLayout.grid_origin_soft_constraint","tensorstore.ChunkLayout.inner_order","tensorstore.ChunkLayout.inner_order_soft_constraint","tensorstore.ChunkLayout.ndim","tensorstore.ChunkLayout.rank","tensorstore.ChunkLayout.read_chunk","tensorstore.ChunkLayout.read_chunk_template","tensorstore.ChunkLayout.to_json","tensorstore.ChunkLayout.update","tensorstore.ChunkLayout.write_chunk","tensorstore.ChunkLayout.write_chunk_template","tensorstore.CodecSpec","tensorstore.CodecSpec.__init__","tensorstore.CodecSpec.to_json","tensorstore.Context","tensorstore.Context.Resource","tensorstore.Context.Resource.to_json","tensorstore.Context.Spec","tensorstore.Context.Spec.__init__","tensorstore.Context.Spec.to_json","tensorstore.Context.__getitem__","tensorstore.Context.__init__(default)","tensorstore.Context.__init__(json)","tensorstore.Context.__init__(spec)","tensorstore.Context.parent","tensorstore.Context.spec","tensorstore.Dim","tensorstore.Dim.__contains__(dim)","tensorstore.Dim.__contains__(index)","tensorstore.Dim.__eq__","tensorstore.Dim.__init__(exclusive_max)","tensorstore.Dim.__init__(inclusive_max)","tensorstore.Dim.__init__(size)","tensorstore.Dim.__init__(unbounded)","tensorstore.Dim.__iter__","tensorstore.Dim.__len__","tensorstore.Dim.__repr__","tensorstore.Dim.__str__","tensorstore.Dim.empty","tensorstore.Dim.exclusive_max","tensorstore.Dim.exclusive_min","tensorstore.Dim.finite","tensorstore.Dim.hull","tensorstore.Dim.implicit_lower","tensorstore.Dim.implicit_upper","tensorstore.Dim.inclusive_max","tensorstore.Dim.inclusive_min","tensorstore.Dim.intersect","tensorstore.Dim.label","tensorstore.Dim.size","tensorstore.DimExpression","tensorstore.DimExpression.__getitem__","tensorstore.DimExpression.diagonal","tensorstore.DimExpression.label","tensorstore.DimExpression.oindex","tensorstore.DimExpression.stride","tensorstore.DimExpression.translate_backward_by","tensorstore.DimExpression.translate_by","tensorstore.DimExpression.translate_to","tensorstore.DimExpression.transpose","tensorstore.DimExpression.vindex","tensorstore.Future","tensorstore.Future.__new__","tensorstore.Future.add_done_callback","tensorstore.Future.cancel","tensorstore.Future.cancelled","tensorstore.Future.done","tensorstore.Future.exception","tensorstore.Future.force","tensorstore.Future.remove_done_callback","tensorstore.Future.result","tensorstore.FutureLike","tensorstore.IndexDomain","tensorstore.IndexDomain.__getitem__(domain)","tensorstore.IndexDomain.__getitem__(expr)","tensorstore.IndexDomain.__getitem__(identifier)","tensorstore.IndexDomain.__getitem__(selection)","tensorstore.IndexDomain.__getitem__(transform)","tensorstore.IndexDomain.__init__(components)","tensorstore.IndexDomain.__init__(dimensions)","tensorstore.IndexDomain.__init__(json)","tensorstore.IndexDomain.__len__","tensorstore.IndexDomain.__repr__","tensorstore.IndexDomain.exclusive_max","tensorstore.IndexDomain.hull","tensorstore.IndexDomain.implicit_lower_bounds","tensorstore.IndexDomain.implicit_upper_bounds","tensorstore.IndexDomain.inclusive_max","tensorstore.IndexDomain.inclusive_min","tensorstore.IndexDomain.index_exp","tensorstore.IndexDomain.intersect","tensorstore.IndexDomain.labels","tensorstore.IndexDomain.ndim","tensorstore.IndexDomain.origin","tensorstore.IndexDomain.rank","tensorstore.IndexDomain.shape","tensorstore.IndexDomain.size","tensorstore.IndexDomain.to_json","tensorstore.IndexTransform","tensorstore.IndexTransform.T","tensorstore.IndexTransform.__call__","tensorstore.IndexTransform.__getitem__(domain)","tensorstore.IndexTransform.__getitem__(expr)","tensorstore.IndexTransform.__getitem__(indices)","tensorstore.IndexTransform.__getitem__(transform)","tensorstore.IndexTransform.__init__(components)","tensorstore.IndexTransform.__init__(domain)","tensorstore.IndexTransform.__init__(json)","tensorstore.IndexTransform.__repr__","tensorstore.IndexTransform.domain","tensorstore.IndexTransform.implicit_lower_bounds","tensorstore.IndexTransform.implicit_upper_bounds","tensorstore.IndexTransform.input_exclusive_max","tensorstore.IndexTransform.input_inclusive_max","tensorstore.IndexTransform.input_inclusive_min","tensorstore.IndexTransform.input_labels","tensorstore.IndexTransform.input_origin","tensorstore.IndexTransform.input_rank","tensorstore.IndexTransform.input_shape","tensorstore.IndexTransform.ndim","tensorstore.IndexTransform.oindex","tensorstore.IndexTransform.origin","tensorstore.IndexTransform.output","tensorstore.IndexTransform.output_rank","tensorstore.IndexTransform.shape","tensorstore.IndexTransform.size","tensorstore.IndexTransform.to_json","tensorstore.IndexTransform.vindex","tensorstore.Indexable","tensorstore.KvStore","tensorstore.KvStore.KeyRange","tensorstore.KvStore.KeyRange.__eq__","tensorstore.KvStore.KeyRange.__init__","tensorstore.KvStore.KeyRange.copy","tensorstore.KvStore.KeyRange.empty","tensorstore.KvStore.KeyRange.exclusive_max","tensorstore.KvStore.KeyRange.inclusive_min","tensorstore.KvStore.ReadResult","tensorstore.KvStore.ReadResult.__init__","tensorstore.KvStore.ReadResult.stamp","tensorstore.KvStore.ReadResult.state","tensorstore.KvStore.ReadResult.value","tensorstore.KvStore.Spec","tensorstore.KvStore.Spec.__add__","tensorstore.KvStore.Spec.__new__","tensorstore.KvStore.Spec.__repr__","tensorstore.KvStore.Spec.__truediv__","tensorstore.KvStore.Spec.copy","tensorstore.KvStore.Spec.path","tensorstore.KvStore.Spec.to_json","tensorstore.KvStore.Spec.update","tensorstore.KvStore.Spec.url","tensorstore.KvStore.TimestampedStorageGeneration","tensorstore.KvStore.TimestampedStorageGeneration.__eq__","tensorstore.KvStore.TimestampedStorageGeneration.__init__","tensorstore.KvStore.TimestampedStorageGeneration.generation","tensorstore.KvStore.TimestampedStorageGeneration.time","tensorstore.KvStore.__delitem__","tensorstore.KvStore.__getitem__","tensorstore.KvStore.__repr__","tensorstore.KvStore.__setitem__","tensorstore.KvStore.copy","tensorstore.KvStore.delete_range","tensorstore.KvStore.list","tensorstore.KvStore.open","tensorstore.KvStore.path","tensorstore.KvStore.read","tensorstore.KvStore.spec","tensorstore.KvStore.transaction","tensorstore.KvStore.url","tensorstore.KvStore.with_transaction","tensorstore.KvStore.write","tensorstore.OutputIndexMap","tensorstore.OutputIndexMap.__init__(constant)","tensorstore.OutputIndexMap.__init__(index_array)","tensorstore.OutputIndexMap.__init__(input_dimension)","tensorstore.OutputIndexMap.index_array","tensorstore.OutputIndexMap.index_range","tensorstore.OutputIndexMap.input_dimension","tensorstore.OutputIndexMap.method","tensorstore.OutputIndexMap.offset","tensorstore.OutputIndexMap.stride","tensorstore.OutputIndexMaps","tensorstore.OutputIndexMaps.__getitem__","tensorstore.OutputIndexMaps.__len__","tensorstore.OutputIndexMaps.rank","tensorstore.OutputIndexMethod","tensorstore.OutputIndexMethod.__init__","tensorstore.OutputIndexMethod.__str__","tensorstore.OutputIndexMethod.array","tensorstore.OutputIndexMethod.constant","tensorstore.OutputIndexMethod.name","tensorstore.OutputIndexMethod.single_input_dimension","tensorstore.OutputIndexMethod.value","tensorstore.Promise","tensorstore.Promise.new","tensorstore.Promise.set_exception","tensorstore.Promise.set_result","tensorstore.Schema","tensorstore.Schema.T","tensorstore.Schema.__eq__","tensorstore.Schema.__getitem__(domain)","tensorstore.Schema.__getitem__(expr)","tensorstore.Schema.__getitem__(indices)","tensorstore.Schema.__getitem__(transform)","tensorstore.Schema.__init__(components)","tensorstore.Schema.__init__(json)","tensorstore.Schema.__repr__","tensorstore.Schema.chunk_layout","tensorstore.Schema.codec","tensorstore.Schema.copy","tensorstore.Schema.dimension_units","tensorstore.Schema.domain","tensorstore.Schema.dtype","tensorstore.Schema.fill_value","tensorstore.Schema.ndim","tensorstore.Schema.oindex","tensorstore.Schema.origin","tensorstore.Schema.rank","tensorstore.Schema.shape","tensorstore.Schema.size","tensorstore.Schema.to_json","tensorstore.Schema.update","tensorstore.Schema.vindex","tensorstore.Spec","tensorstore.Spec.T","tensorstore.Spec.__eq__","tensorstore.Spec.__getitem__(domain)","tensorstore.Spec.__getitem__(expr)","tensorstore.Spec.__getitem__(indices)","tensorstore.Spec.__getitem__(transform)","tensorstore.Spec.__new__","tensorstore.Spec.__repr__","tensorstore.Spec.chunk_layout","tensorstore.Spec.codec","tensorstore.Spec.copy","tensorstore.Spec.dimension_units","tensorstore.Spec.domain","tensorstore.Spec.dtype","tensorstore.Spec.fill_value","tensorstore.Spec.kvstore","tensorstore.Spec.ndim","tensorstore.Spec.oindex","tensorstore.Spec.origin","tensorstore.Spec.rank","tensorstore.Spec.schema","tensorstore.Spec.shape","tensorstore.Spec.size","tensorstore.Spec.to_json","tensorstore.Spec.transform","tensorstore.Spec.update","tensorstore.Spec.vindex","tensorstore.TensorStore","tensorstore.TensorStore.T","tensorstore.TensorStore.__array__","tensorstore.TensorStore.__getitem__(domain)","tensorstore.TensorStore.__getitem__(expr)","tensorstore.TensorStore.__getitem__(indices)","tensorstore.TensorStore.__getitem__(transform)","tensorstore.TensorStore.__setitem__(domain)","tensorstore.TensorStore.__setitem__(expr)","tensorstore.TensorStore.__setitem__(indices)","tensorstore.TensorStore.__setitem__(transform)","tensorstore.TensorStore.astype","tensorstore.TensorStore.chunk_layout","tensorstore.TensorStore.codec","tensorstore.TensorStore.dimension_units","tensorstore.TensorStore.domain","tensorstore.TensorStore.dtype","tensorstore.TensorStore.fill_value","tensorstore.TensorStore.kvstore","tensorstore.TensorStore.mode","tensorstore.TensorStore.ndim","tensorstore.TensorStore.oindex","tensorstore.TensorStore.oindex.__setitem__","tensorstore.TensorStore.origin","tensorstore.TensorStore.rank","tensorstore.TensorStore.read","tensorstore.TensorStore.readable","tensorstore.TensorStore.resolve","tensorstore.TensorStore.schema","tensorstore.TensorStore.shape","tensorstore.TensorStore.size","tensorstore.TensorStore.spec","tensorstore.TensorStore.transaction","tensorstore.TensorStore.vindex","tensorstore.TensorStore.vindex.__setitem__","tensorstore.TensorStore.with_transaction","tensorstore.TensorStore.writable","tensorstore.TensorStore.write","tensorstore.Transaction","tensorstore.Transaction.__init__","tensorstore.Transaction.abort","tensorstore.Transaction.aborted","tensorstore.Transaction.atomic","tensorstore.Transaction.commit_async","tensorstore.Transaction.commit_started","tensorstore.Transaction.commit_sync","tensorstore.Transaction.future","tensorstore.Transaction.open","tensorstore.Unit","tensorstore.Unit.__eq__","tensorstore.Unit.__init__(components)","tensorstore.Unit.__init__(json)","tensorstore.Unit.__init__(multiplier)","tensorstore.Unit.__init__(pair)","tensorstore.Unit.__init__(unit)","tensorstore.Unit.__mul__","tensorstore.Unit.__truediv__","tensorstore.Unit.base_unit","tensorstore.Unit.multiplier","tensorstore.Unit.to_json","tensorstore.VirtualChunkedReadParameters","tensorstore.VirtualChunkedReadParameters.if_not_equal","tensorstore.VirtualChunkedReadParameters.staleness_bound","tensorstore.VirtualChunkedWriteParameters","tensorstore.VirtualChunkedWriteParameters.if_equal","tensorstore.WriteFutures","tensorstore.WriteFutures.add_done_callback","tensorstore.WriteFutures.cancel","tensorstore.WriteFutures.cancelled","tensorstore.WriteFutures.commit","tensorstore.WriteFutures.copy","tensorstore.WriteFutures.done","tensorstore.WriteFutures.exception","tensorstore.WriteFutures.remove_done_callback","tensorstore.WriteFutures.result","tensorstore.array","tensorstore.bfloat16","tensorstore.bool","tensorstore.cast","tensorstore.complex128","tensorstore.complex64","tensorstore.d","tensorstore.d.__class_getitem__","tensorstore.downsample(spec)","tensorstore.downsample(store)","tensorstore.dtype","tensorstore.dtype.__call__","tensorstore.dtype.__init__(dtype)","tensorstore.dtype.__init__(name)","tensorstore.dtype.name","tensorstore.dtype.numpy_dtype","tensorstore.dtype.to_json","tensorstore.dtype.type","tensorstore.float16","tensorstore.float32","tensorstore.float64","tensorstore.inf","tensorstore.int16","tensorstore.int32","tensorstore.int64","tensorstore.int8","tensorstore.json","tensorstore.newaxis","tensorstore.open","tensorstore.string","tensorstore.uint16","tensorstore.uint32","tensorstore.uint64","tensorstore.uint8","tensorstore.ustring","tensorstore.virtual_chunked","Indexing","Tutorial","Schema","JSON Spec"],titleterms:{"boolean":[91,403],"class":[20,54,169,405],"new":[8,9,10,395],"public":[21,51,66,101,177,212,222,226,234,352,355,357,377],accessor:[20,54,55,57,66,101,112,138,169,170,182,192,238,264,292,330,340],ad:[91,403],align:13,all:[113,141],an:395,api:[14,19],arithmet:340,arrai:[1,8,9,10,91,403],aspect:[8,10],asynchron:19,authent:16,block:101,broadcast:13,build:14,c:[10,14],ca:[11,16],cach:402,callback:101,cast:2,certif:[11,16],checkout:14,chunk:[6,8,9,10,20,405],cloud:11,codec:[8,9,10,405],compar:403,comparison:[20,21,170,192,238,264,340],compress:[8,9],compressor:10,concept:12,configur:11,constraint:[8,9,10],construct:403,constructor:[20,21,51,54,57,66,101,112,138,169,170,177,182,192,212,226,234,238,264,330,340,373,377],context:0,core:19,creat:[8,9,10,395],credenti:11,data:[8,9,10,19,292],dataset:404,debug:11,depend:14,develop:14,differ:403,dimens:[8,9,91,113,141,403,405],document:14,domain:[8,9,10,13],downsampl:3,driver:[1,2,3,4,5,6,7,8,9,10,15,16,17,18],element:[8,10],ellipsi:[91,403],encod:9,environ:11,error:91,exampl:[0,1,2,3,4,5,6,7,8,9,10,13,15,16,18,43,44,46,47,50,56,60,61,62,64,65,66,67,68,70,71,72,73,74,79,80,81,82,83,84,85,86,87,88,89,91,92,93,94,95,96,97,98,100,102,105,113,114,115,116,117,118,119,120,121,123,124,125,126,127,128,129,130,131,132,133,134,135,136,140,141,142,143,144,145,146,147,149,150,151,152,153,154,155,156,157,158,159,160,163,166,167,169,174,183,185,186,187,188,189,190,191,197,198,199,200,201,202,203,205,206,207,209,210,211,213,214,215,236,237,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,258,261,262,263,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,284,285,288,289,290,291,292,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,312,316,317,320,323,329,341,342,343,344,345,346,347,348,349,350,351,370,374,388,394,395,405],exist:395,explicit:[8,9,10],express:403,file:[6,15],fill:[8,9,10],flyem:404,fortran:10,framework:0,from:14,fulli:[113,141],gc:16,geometr:112,get:12,googl:11,hemibrain:404,highlight:12,http:11,i:[169,292],index:[13,19,91,112,138,238,264,292,403],instal:14,integ:[91,403],interfac:101,interv:[91,403],ipython:14,janelia:404,jpeg:4,json:[7,9,406],kei:[15,16,17,18],label:[113,141],layer:17,layout:[8,9,10,405],librari:14,limit:[8,9,10,15],local:[14,404],map:[8,9,10],member:[21,51,66,101,177,212,222,226,234,352,355,357,377],memori:18,method:13,mix:[113,141],mode:403,mutat:[182,238,264],n5:[8,404],neuroglancer_precomput:9,non:329,numpi:403,o:[169,292],oindex:403,open:395,oper:[20,21,66,90,112,170,182,192,238,264,330,340,373],order:10,outer:403,output:13,packag:14,parti:14,pickl:402,png:5,proxi:11,publish:14,pypi:14,python:14,ratio:[8,10],raw:9,read:[9,404],refer:19,represent:[66,112,138,169,182,226,238,264],request:11,requir:14,run:14,scalar:10,schema:[8,9,10,405],segment:9,select:[8,9,10,403],semant:329,separ:9,sequenc:112,setter:20,shape:[8,9,10],shard:9,shell:14,singl:6,singleton:[91,403],space:13,spec:[19,406],specif:9,start:12,storag:[6,11,17],store:[15,16,18],string:[66,112,138,169,182,226,238,264],structur:10,style:403,support:[10,19,402],synchron:169,templat:20,tensorstor:[8,9,10,12,395],test:[14,16],third:14,tl:[11,16],transact:[169,292,329,402],transform:[13,403],tutori:404,type:[8,9,10,19,292],unconstrain:[8,9,10],unit:[8,9,405],unlabel:[113,141],unshard:9,valu:[8,9,10,15,16,17,18],variabl:11,vector:403,view:19,vindex:403,virtual:19,when:[8,9,10],without:14,write:[9,404],zarr:10}})