Search.setIndex({docurls:["context.html","driver/array/index.html","driver/cast/index.html","driver/downsample/index.html","driver/index.html","driver/json/index.html","driver/n5/index.html","driver/neuroglancer_precomputed/index.html","driver/zarr/index.html","environment.html","index.html","index_space.html","installation.html","kvstore/file/index.html","kvstore/gcs/index.html","kvstore/index.html","kvstore/memory/index.html","python/api/index.html","python/api/tensorstore.ChunkLayout.html","python/api/tensorstore.ChunkLayout.Grid.html","python/api/tensorstore.ChunkLayout.Grid.__eq__.html","python/api/tensorstore.ChunkLayout.Grid.__init__-components.html","python/api/tensorstore.ChunkLayout.Grid.__init__-json.html","python/api/tensorstore.ChunkLayout.Grid.aspect_ratio.html","python/api/tensorstore.ChunkLayout.Grid.aspect_ratio_soft_constraint.html","python/api/tensorstore.ChunkLayout.Grid.elements.html","python/api/tensorstore.ChunkLayout.Grid.elements_soft_constraint.html","python/api/tensorstore.ChunkLayout.Grid.ndim.html","python/api/tensorstore.ChunkLayout.Grid.rank.html","python/api/tensorstore.ChunkLayout.Grid.shape.html","python/api/tensorstore.ChunkLayout.Grid.shape_soft_constraint.html","python/api/tensorstore.ChunkLayout.Grid.to_json.html","python/api/tensorstore.ChunkLayout.Grid.update.html","python/api/tensorstore.ChunkLayout.__eq__.html","python/api/tensorstore.ChunkLayout.__init__-components.html","python/api/tensorstore.ChunkLayout.__init__-json.html","python/api/tensorstore.ChunkLayout.codec_chunk.html","python/api/tensorstore.ChunkLayout.grid_origin.html","python/api/tensorstore.ChunkLayout.grid_origin_soft_constraint.html","python/api/tensorstore.ChunkLayout.inner_order.html","python/api/tensorstore.ChunkLayout.inner_order_soft_constraint.html","python/api/tensorstore.ChunkLayout.ndim.html","python/api/tensorstore.ChunkLayout.rank.html","python/api/tensorstore.ChunkLayout.read_chunk.html","python/api/tensorstore.ChunkLayout.read_chunk_template.html","python/api/tensorstore.ChunkLayout.to_json.html","python/api/tensorstore.ChunkLayout.update.html","python/api/tensorstore.ChunkLayout.write_chunk.html","python/api/tensorstore.ChunkLayout.write_chunk_template.html","python/api/tensorstore.CodecSpec.html","python/api/tensorstore.CodecSpec.__init__.html","python/api/tensorstore.CodecSpec.to_json.html","python/api/tensorstore.Context.html","python/api/tensorstore.Context.Resource.html","python/api/tensorstore.Context.Resource.to_json.html","python/api/tensorstore.Context.Spec.html","python/api/tensorstore.Context.Spec.__init__.html","python/api/tensorstore.Context.Spec.to_json.html","python/api/tensorstore.Context.__getitem__.html","python/api/tensorstore.Context.__init__-default.html","python/api/tensorstore.Context.__init__-json.html","python/api/tensorstore.Context.__init__-spec.html","python/api/tensorstore.Context.parent.html","python/api/tensorstore.Context.spec.html","python/api/tensorstore.Dim.html","python/api/tensorstore.Dim.__contains__-dim.html","python/api/tensorstore.Dim.__contains__-index.html","python/api/tensorstore.Dim.__eq__.html","python/api/tensorstore.Dim.__init__-exclusive_max.html","python/api/tensorstore.Dim.__init__-inclusive_max.html","python/api/tensorstore.Dim.__init__-size.html","python/api/tensorstore.Dim.__init__-unbounded.html","python/api/tensorstore.Dim.__iter__.html","python/api/tensorstore.Dim.__len__.html","python/api/tensorstore.Dim.__repr__.html","python/api/tensorstore.Dim.__str__.html","python/api/tensorstore.Dim.empty.html","python/api/tensorstore.Dim.exclusive_max.html","python/api/tensorstore.Dim.exclusive_min.html","python/api/tensorstore.Dim.finite.html","python/api/tensorstore.Dim.hull.html","python/api/tensorstore.Dim.implicit_lower.html","python/api/tensorstore.Dim.implicit_upper.html","python/api/tensorstore.Dim.inclusive_max.html","python/api/tensorstore.Dim.inclusive_min.html","python/api/tensorstore.Dim.intersect.html","python/api/tensorstore.Dim.label.html","python/api/tensorstore.Dim.size.html","python/api/tensorstore.DimExpression.html","python/api/tensorstore.DimExpression.__getitem__.html","python/api/tensorstore.DimExpression.diagonal.html","python/api/tensorstore.DimExpression.label.html","python/api/tensorstore.DimExpression.oindex.html","python/api/tensorstore.DimExpression.stride.html","python/api/tensorstore.DimExpression.translate_backward_by.html","python/api/tensorstore.DimExpression.translate_by.html","python/api/tensorstore.DimExpression.translate_to.html","python/api/tensorstore.DimExpression.transpose.html","python/api/tensorstore.DimExpression.vindex.html","python/api/tensorstore.Future.html","python/api/tensorstore.Future.__new__.html","python/api/tensorstore.Future.add_done_callback.html","python/api/tensorstore.Future.cancel.html","python/api/tensorstore.Future.cancelled.html","python/api/tensorstore.Future.done.html","python/api/tensorstore.Future.exception.html","python/api/tensorstore.Future.force.html","python/api/tensorstore.Future.remove_done_callback.html","python/api/tensorstore.Future.result.html","python/api/tensorstore.FutureLike.html","python/api/tensorstore.IndexDomain.html","python/api/tensorstore.IndexDomain.__getitem__-domain.html","python/api/tensorstore.IndexDomain.__getitem__-expr.html","python/api/tensorstore.IndexDomain.__getitem__-identifier.html","python/api/tensorstore.IndexDomain.__getitem__-selection.html","python/api/tensorstore.IndexDomain.__getitem__-transform.html","python/api/tensorstore.IndexDomain.__init__-components.html","python/api/tensorstore.IndexDomain.__init__-dimensions.html","python/api/tensorstore.IndexDomain.__init__-json.html","python/api/tensorstore.IndexDomain.__len__.html","python/api/tensorstore.IndexDomain.__repr__.html","python/api/tensorstore.IndexDomain.exclusive_max.html","python/api/tensorstore.IndexDomain.hull.html","python/api/tensorstore.IndexDomain.implicit_lower_bounds.html","python/api/tensorstore.IndexDomain.implicit_upper_bounds.html","python/api/tensorstore.IndexDomain.inclusive_max.html","python/api/tensorstore.IndexDomain.inclusive_min.html","python/api/tensorstore.IndexDomain.index_exp.html","python/api/tensorstore.IndexDomain.intersect.html","python/api/tensorstore.IndexDomain.labels.html","python/api/tensorstore.IndexDomain.ndim.html","python/api/tensorstore.IndexDomain.origin.html","python/api/tensorstore.IndexDomain.rank.html","python/api/tensorstore.IndexDomain.shape.html","python/api/tensorstore.IndexDomain.size.html","python/api/tensorstore.IndexDomain.to_json.html","python/api/tensorstore.IndexTransform.html","python/api/tensorstore.IndexTransform.T.html","python/api/tensorstore.IndexTransform.__call__.html","python/api/tensorstore.IndexTransform.__getitem__-domain.html","python/api/tensorstore.IndexTransform.__getitem__-expr.html","python/api/tensorstore.IndexTransform.__getitem__-indices.html","python/api/tensorstore.IndexTransform.__getitem__-transform.html","python/api/tensorstore.IndexTransform.__init__-components.html","python/api/tensorstore.IndexTransform.__init__-domain.html","python/api/tensorstore.IndexTransform.__init__-json.html","python/api/tensorstore.IndexTransform.__repr__.html","python/api/tensorstore.IndexTransform.domain.html","python/api/tensorstore.IndexTransform.implicit_lower_bounds.html","python/api/tensorstore.IndexTransform.implicit_upper_bounds.html","python/api/tensorstore.IndexTransform.input_exclusive_max.html","python/api/tensorstore.IndexTransform.input_inclusive_max.html","python/api/tensorstore.IndexTransform.input_inclusive_min.html","python/api/tensorstore.IndexTransform.input_labels.html","python/api/tensorstore.IndexTransform.input_origin.html","python/api/tensorstore.IndexTransform.input_rank.html","python/api/tensorstore.IndexTransform.input_shape.html","python/api/tensorstore.IndexTransform.ndim.html","python/api/tensorstore.IndexTransform.oindex.html","python/api/tensorstore.IndexTransform.origin.html","python/api/tensorstore.IndexTransform.output.html","python/api/tensorstore.IndexTransform.output_rank.html","python/api/tensorstore.IndexTransform.shape.html","python/api/tensorstore.IndexTransform.size.html","python/api/tensorstore.IndexTransform.to_json.html","python/api/tensorstore.IndexTransform.vindex.html","python/api/tensorstore.Indexable.html","python/api/tensorstore.KvStore.html","python/api/tensorstore.KvStore.KeyRange.html","python/api/tensorstore.KvStore.KeyRange.__eq__.html","python/api/tensorstore.KvStore.KeyRange.__init__.html","python/api/tensorstore.KvStore.KeyRange.copy.html","python/api/tensorstore.KvStore.KeyRange.empty.html","python/api/tensorstore.KvStore.KeyRange.exclusive_max.html","python/api/tensorstore.KvStore.KeyRange.inclusive_min.html","python/api/tensorstore.KvStore.ReadResult.html","python/api/tensorstore.KvStore.ReadResult.__init__.html","python/api/tensorstore.KvStore.ReadResult.stamp.html","python/api/tensorstore.KvStore.ReadResult.state.html","python/api/tensorstore.KvStore.ReadResult.value.html","python/api/tensorstore.KvStore.Spec.html","python/api/tensorstore.KvStore.Spec.__add__.html","python/api/tensorstore.KvStore.Spec.__new__.html","python/api/tensorstore.KvStore.Spec.__repr__.html","python/api/tensorstore.KvStore.Spec.__truediv__.html","python/api/tensorstore.KvStore.Spec.copy.html","python/api/tensorstore.KvStore.Spec.path.html","python/api/tensorstore.KvStore.Spec.to_json.html","python/api/tensorstore.KvStore.Spec.update.html","python/api/tensorstore.KvStore.TimestampedStorageGeneration.html","python/api/tensorstore.KvStore.TimestampedStorageGeneration.__eq__.html","python/api/tensorstore.KvStore.TimestampedStorageGeneration.__init__.html","python/api/tensorstore.KvStore.TimestampedStorageGeneration.generation.html","python/api/tensorstore.KvStore.TimestampedStorageGeneration.time.html","python/api/tensorstore.KvStore.__delitem__.html","python/api/tensorstore.KvStore.__getitem__.html","python/api/tensorstore.KvStore.__repr__.html","python/api/tensorstore.KvStore.__setitem__.html","python/api/tensorstore.KvStore.copy.html","python/api/tensorstore.KvStore.delete_range.html","python/api/tensorstore.KvStore.list.html","python/api/tensorstore.KvStore.open.html","python/api/tensorstore.KvStore.path.html","python/api/tensorstore.KvStore.read.html","python/api/tensorstore.KvStore.spec.html","python/api/tensorstore.KvStore.transaction.html","python/api/tensorstore.KvStore.with_transaction.html","python/api/tensorstore.KvStore.write.html","python/api/tensorstore.OutputIndexMap.html","python/api/tensorstore.OutputIndexMap.__init__-constant.html","python/api/tensorstore.OutputIndexMap.__init__-index_array.html","python/api/tensorstore.OutputIndexMap.__init__-input_dimension.html","python/api/tensorstore.OutputIndexMap.index_array.html","python/api/tensorstore.OutputIndexMap.index_range.html","python/api/tensorstore.OutputIndexMap.input_dimension.html","python/api/tensorstore.OutputIndexMap.method.html","python/api/tensorstore.OutputIndexMap.offset.html","python/api/tensorstore.OutputIndexMap.stride.html","python/api/tensorstore.OutputIndexMaps.html","python/api/tensorstore.OutputIndexMaps.__getitem__.html","python/api/tensorstore.OutputIndexMaps.__len__.html","python/api/tensorstore.OutputIndexMaps.rank.html","python/api/tensorstore.OutputIndexMethod.html","python/api/tensorstore.OutputIndexMethod.__init__.html","python/api/tensorstore.OutputIndexMethod.__str__.html","python/api/tensorstore.OutputIndexMethod.array.html","python/api/tensorstore.OutputIndexMethod.constant.html","python/api/tensorstore.OutputIndexMethod.name.html","python/api/tensorstore.OutputIndexMethod.single_input_dimension.html","python/api/tensorstore.OutputIndexMethod.value.html","python/api/tensorstore.Promise.html","python/api/tensorstore.Promise.new.html","python/api/tensorstore.Promise.set_exception.html","python/api/tensorstore.Promise.set_result.html","python/api/tensorstore.Schema.html","python/api/tensorstore.Schema.T.html","python/api/tensorstore.Schema.__eq__.html","python/api/tensorstore.Schema.__getitem__-domain.html","python/api/tensorstore.Schema.__getitem__-expr.html","python/api/tensorstore.Schema.__getitem__-indices.html","python/api/tensorstore.Schema.__getitem__-transform.html","python/api/tensorstore.Schema.__init__-components.html","python/api/tensorstore.Schema.__init__-json.html","python/api/tensorstore.Schema.__repr__.html","python/api/tensorstore.Schema.chunk_layout.html","python/api/tensorstore.Schema.codec.html","python/api/tensorstore.Schema.copy.html","python/api/tensorstore.Schema.dimension_units.html","python/api/tensorstore.Schema.domain.html","python/api/tensorstore.Schema.dtype.html","python/api/tensorstore.Schema.fill_value.html","python/api/tensorstore.Schema.ndim.html","python/api/tensorstore.Schema.oindex.html","python/api/tensorstore.Schema.origin.html","python/api/tensorstore.Schema.rank.html","python/api/tensorstore.Schema.shape.html","python/api/tensorstore.Schema.size.html","python/api/tensorstore.Schema.to_json.html","python/api/tensorstore.Schema.update.html","python/api/tensorstore.Schema.vindex.html","python/api/tensorstore.Spec.html","python/api/tensorstore.Spec.T.html","python/api/tensorstore.Spec.__eq__.html","python/api/tensorstore.Spec.__getitem__-domain.html","python/api/tensorstore.Spec.__getitem__-expr.html","python/api/tensorstore.Spec.__getitem__-indices.html","python/api/tensorstore.Spec.__getitem__-transform.html","python/api/tensorstore.Spec.__new__.html","python/api/tensorstore.Spec.__repr__.html","python/api/tensorstore.Spec.chunk_layout.html","python/api/tensorstore.Spec.codec.html","python/api/tensorstore.Spec.copy.html","python/api/tensorstore.Spec.dimension_units.html","python/api/tensorstore.Spec.domain.html","python/api/tensorstore.Spec.dtype.html","python/api/tensorstore.Spec.fill_value.html","python/api/tensorstore.Spec.kvstore.html","python/api/tensorstore.Spec.ndim.html","python/api/tensorstore.Spec.oindex.html","python/api/tensorstore.Spec.origin.html","python/api/tensorstore.Spec.rank.html","python/api/tensorstore.Spec.schema.html","python/api/tensorstore.Spec.shape.html","python/api/tensorstore.Spec.size.html","python/api/tensorstore.Spec.to_json.html","python/api/tensorstore.Spec.transform.html","python/api/tensorstore.Spec.update.html","python/api/tensorstore.Spec.vindex.html","python/api/tensorstore.TensorStore.html","python/api/tensorstore.TensorStore.T.html","python/api/tensorstore.TensorStore.__array__.html","python/api/tensorstore.TensorStore.__getitem__-domain.html","python/api/tensorstore.TensorStore.__getitem__-expr.html","python/api/tensorstore.TensorStore.__getitem__-indices.html","python/api/tensorstore.TensorStore.__getitem__-transform.html","python/api/tensorstore.TensorStore.__setitem__-domain.html","python/api/tensorstore.TensorStore.__setitem__-expr.html","python/api/tensorstore.TensorStore.__setitem__-indices.html","python/api/tensorstore.TensorStore.__setitem__-transform.html","python/api/tensorstore.TensorStore.astype.html","python/api/tensorstore.TensorStore.chunk_layout.html","python/api/tensorstore.TensorStore.codec.html","python/api/tensorstore.TensorStore.dimension_units.html","python/api/tensorstore.TensorStore.domain.html","python/api/tensorstore.TensorStore.dtype.html","python/api/tensorstore.TensorStore.fill_value.html","python/api/tensorstore.TensorStore.kvstore.html","python/api/tensorstore.TensorStore.mode.html","python/api/tensorstore.TensorStore.ndim.html","python/api/tensorstore.TensorStore.oindex.html","python/api/tensorstore.TensorStore.oindex.__setitem__.html","python/api/tensorstore.TensorStore.origin.html","python/api/tensorstore.TensorStore.rank.html","python/api/tensorstore.TensorStore.read.html","python/api/tensorstore.TensorStore.readable.html","python/api/tensorstore.TensorStore.resolve.html","python/api/tensorstore.TensorStore.schema.html","python/api/tensorstore.TensorStore.shape.html","python/api/tensorstore.TensorStore.size.html","python/api/tensorstore.TensorStore.spec.html","python/api/tensorstore.TensorStore.transaction.html","python/api/tensorstore.TensorStore.vindex.html","python/api/tensorstore.TensorStore.vindex.__setitem__.html","python/api/tensorstore.TensorStore.with_transaction.html","python/api/tensorstore.TensorStore.writable.html","python/api/tensorstore.TensorStore.write.html","python/api/tensorstore.Transaction.html","python/api/tensorstore.Transaction.__init__.html","python/api/tensorstore.Transaction.abort.html","python/api/tensorstore.Transaction.aborted.html","python/api/tensorstore.Transaction.atomic.html","python/api/tensorstore.Transaction.commit_async.html","python/api/tensorstore.Transaction.commit_started.html","python/api/tensorstore.Transaction.commit_sync.html","python/api/tensorstore.Transaction.future.html","python/api/tensorstore.Transaction.open.html","python/api/tensorstore.Unit.html","python/api/tensorstore.Unit.__eq__.html","python/api/tensorstore.Unit.__init__-components.html","python/api/tensorstore.Unit.__init__-json.html","python/api/tensorstore.Unit.__init__-multiplier.html","python/api/tensorstore.Unit.__init__-pair.html","python/api/tensorstore.Unit.__init__-unit.html","python/api/tensorstore.Unit.__mul__.html","python/api/tensorstore.Unit.__truediv__.html","python/api/tensorstore.Unit.base_unit.html","python/api/tensorstore.Unit.multiplier.html","python/api/tensorstore.Unit.to_json.html","python/api/tensorstore.VirtualChunkedReadParameters.html","python/api/tensorstore.VirtualChunkedReadParameters.if_not_equal.html","python/api/tensorstore.VirtualChunkedReadParameters.staleness_bound.html","python/api/tensorstore.VirtualChunkedWriteParameters.html","python/api/tensorstore.VirtualChunkedWriteParameters.if_equal.html","python/api/tensorstore.WriteFutures.html","python/api/tensorstore.WriteFutures.add_done_callback.html","python/api/tensorstore.WriteFutures.cancel.html","python/api/tensorstore.WriteFutures.cancelled.html","python/api/tensorstore.WriteFutures.commit.html","python/api/tensorstore.WriteFutures.copy.html","python/api/tensorstore.WriteFutures.done.html","python/api/tensorstore.WriteFutures.exception.html","python/api/tensorstore.WriteFutures.remove_done_callback.html","python/api/tensorstore.WriteFutures.result.html","python/api/tensorstore.array.html","python/api/tensorstore.bfloat16.html","python/api/tensorstore.bool.html","python/api/tensorstore.cast.html","python/api/tensorstore.complex128.html","python/api/tensorstore.complex64.html","python/api/tensorstore.d.html","python/api/tensorstore.d.__class_getitem__.html","python/api/tensorstore.downsample-spec.html","python/api/tensorstore.downsample-store.html","python/api/tensorstore.dtype.html","python/api/tensorstore.dtype.__call__.html","python/api/tensorstore.dtype.__init__-dtype.html","python/api/tensorstore.dtype.__init__-name.html","python/api/tensorstore.dtype.name.html","python/api/tensorstore.dtype.numpy_dtype.html","python/api/tensorstore.dtype.to_json.html","python/api/tensorstore.dtype.type.html","python/api/tensorstore.float16.html","python/api/tensorstore.float32.html","python/api/tensorstore.float64.html","python/api/tensorstore.inf.html","python/api/tensorstore.int16.html","python/api/tensorstore.int32.html","python/api/tensorstore.int64.html","python/api/tensorstore.int8.html","python/api/tensorstore.json.html","python/api/tensorstore.newaxis.html","python/api/tensorstore.open.html","python/api/tensorstore.string.html","python/api/tensorstore.uint16.html","python/api/tensorstore.uint32.html","python/api/tensorstore.uint64.html","python/api/tensorstore.uint8.html","python/api/tensorstore.ustring.html","python/api/tensorstore.virtual_chunked.html","python/indexing.html","python/tutorial.html","schema.html","spec.html"],envversion:{"sphinx.domains.c":2,"sphinx.domains.changeset":1,"sphinx.domains.citation":1,"sphinx.domains.cpp":4,"sphinx.domains.index":1,"sphinx.domains.javascript":2,"sphinx.domains.math":2,"sphinx.domains.python":3,"sphinx.domains.rst":2,"sphinx.domains.std":2,"sphinx.ext.intersphinx":1,sphinx:56},objects:{"":{"ChunkLayout/Grid":[401,0,1,"json-ChunkLayout/Grid","Constraints on the write/read/codec chunk grids."],"driver/array":[1,0,1,"json-driver/array",""],"driver/cast":[2,0,1,"json-driver/cast",""],"driver/downsample":[3,0,1,"json-driver/downsample",""],"driver/json":[5,0,1,"json-driver/json",""],"driver/n5":[6,0,1,"json-driver/n5",""],"driver/n5/Codec":[6,0,1,"json-driver/n5/Codec",""],"driver/n5/Compression":[6,0,1,"json-driver/n5/Compression",""],"driver/n5/Compression/blosc":[6,0,1,"json-driver/n5/Compression/blosc",""],"driver/n5/Compression/bzip2":[6,0,1,"json-driver/n5/Compression/bzip2",""],"driver/n5/Compression/gzip":[6,0,1,"json-driver/n5/Compression/gzip",""],"driver/n5/Compression/raw":[6,0,1,"json-driver/n5/Compression/raw",""],"driver/n5/Compression/xz":[6,0,1,"json-driver/n5/Compression/xz",""],"driver/neuroglancer_precomputed":[7,0,1,"json-driver/neuroglancer_precomputed",""],"driver/neuroglancer_precomputed/Codec":[7,0,1,"json-driver/neuroglancer_precomputed/Codec","Neuroglancer Precomputed Codec"],"driver/neuroglancer_precomputed/ShardingSpec":[7,0,1,"json-driver/neuroglancer_precomputed/ShardingSpec","Sharding"],"driver/zarr":[8,0,1,"json-driver/zarr",""],"driver/zarr/Codec":[8,0,1,"json-driver/zarr/Codec",""],"driver/zarr/Compressor":[8,0,1,"json-driver/zarr/Compressor","Compressor"],"driver/zarr/Compressor/blosc":[8,0,1,"json-driver/zarr/Compressor/blosc",""],"driver/zarr/Compressor/bz2":[8,0,1,"json-driver/zarr/Compressor/bz2",""],"driver/zarr/Compressor/zlib":[8,0,1,"json-driver/zarr/Compressor/zlib",""],"kvstore/file":[13,0,1,"json-kvstore/file",""],"kvstore/gcs":[14,0,1,"json-kvstore/gcs",""],"kvstore/memory":[16,0,1,"json-kvstore/memory",""],BAZELISK_HOME:[12,9,1,"-",""],CacheRevalidationBound:[4,0,1,"json-CacheRevalidationBound",""],ChunkLayout:[401,0,1,"json-ChunkLayout",""],Codec:[401,0,1,"json-Codec",""],Context:[0,0,1,"json-Context",""],ContextResource:[0,0,1,"json-ContextResource",""],DownsampleMethod:[3,0,1,"json-DownsampleMethod","Downsample method"],GOOGLE_APPLICATION_CREDENTIALS:[9,9,1,"-",""],IndexDomain:[11,0,1,"json-IndexDomain",""],IndexInterval:[11,0,1,"json-IndexInterval","Specifies a closed interval of integer index values."],IndexTransform:[11,0,1,"json-IndexTransform",""],KeyValueStoreBackedChunkDriver:[4,0,1,"json-KeyValueStoreBackedChunkDriver",""],KvStore:[15,0,1,"json-KvStore",""],OutputIndexMap:[11,0,1,"json-OutputIndexMap","Specifies a transform from an input space to a single output index."],SSLKEYLOGFILE:[9,9,1,"-",""],Schema:[401,0,1,"json-Schema",""],TENSORSTORE_BAZELISK:[12,9,1,"-",""],TENSORSTORE_BAZEL_BUILD_OPTIONS:[12,9,1,"-",""],TENSORSTORE_BAZEL_COMPILATION_MODE:[12,9,1,"-",""],TENSORSTORE_BAZEL_STARTUP_OPTIONS:[12,9,1,"-",""],TENSORSTORE_CA_BUNDLE:[9,9,1,"-",""],TENSORSTORE_CA_PATH:[9,9,1,"-",""],TENSORSTORE_CURL_VERBOSE:[9,9,1,"-",""],TENSORSTORE_GCS_HTTP_URL:[9,9,1,"-",""],TENSORSTORE_PREBUILT_DIR:[12,9,1,"-",""],TENSORSTORE_SYSTEM_LIBS:[12,9,1,"-",""],TensorStore:[402,0,1,"json-TensorStore","Specifies a TensorStore to open/create."],Unit:[401,0,1,"json-Unit","Specifies a physical quantity/unit."],all_proxy:[9,9,1,"-",""],dtype:[402,0,1,"json-dtype","Specifies a TensorStore data type."],http_proxy:[9,9,1,"-",""],https_proxy:[9,9,1,"-",""],no_proxy:[9,9,1,"-",""]},"ChunkLayout/Grid":{aspect_ratio:[401,1,2,"json-ChunkLayout/Grid.aspect_ratio","Aspect ratio of the chunk shape."],aspect_ratio_soft_constraint:[401,1,2,"json-ChunkLayout/Grid.aspect_ratio_soft_constraint","Soft constraint on aspect ratio, lower precedence than aspect_ratio."],elements:[401,1,2,"json-ChunkLayout/Grid.elements","Preferred number of elements per chunk."],elements_soft_constraint:[401,1,2,"json-ChunkLayout/Grid.elements_soft_constraint","Preferred number of elements per chunk, lower precedence than\nelements."],shape:[401,1,2,"json-ChunkLayout/Grid.shape","Hard constraints on the chunk size for each dimension."],shape_soft_constraint:[401,1,2,"json-ChunkLayout/Grid.shape_soft_constraint","Preferred chunk sizes for each dimension."]},"Context.cache_pool":{queued_for_writeback_bytes_limit:[0,1,2,"json-Context.cache_pool.queued_for_writeback_bytes_limit",""],total_bytes_limit:[0,1,2,"json-Context.cache_pool.total_bytes_limit",""]},"Context.data_copy_concurrency":{limit:[0,1,2,"json-Context.data_copy_concurrency.limit",""]},"Context.file_io_concurrency":{limit:[0,1,2,"json-Context.file_io_concurrency.limit",""]},"Context.gcs_request_concurrency":{limit:[14,1,2,"json-Context.gcs_request_concurrency.limit",""]},"Context.gcs_request_retries":{max_retries:[14,1,2,"json-Context.gcs_request_retries.max_retries",""]},"Context.gcs_user_project":{project_id:[14,1,2,"json-Context.gcs_user_project.project_id","Google Cloud project id, e.g. \"my-project\".  The Google Cloud\naccount that is used must have appropriate permissions to bill to the\nspecified project."]},"driver/array":{array:[1,1,2,"json-driver/array.array","Nested array of rank equal to rank specifying the initial value."],context:[1,1,2,"json-driver/array.context","Specifies context resources that augment/override the parent context."],driver:[1,1,2,"json-driver/array.driver",""],dtype:[1,1,2,"json-driver/array.dtype","Specifies the data type."],rank:[1,1,2,"json-driver/array.rank","Specifies the rank of the TensorStore."],schema:[1,1,2,"json-driver/array.schema","Specifies constraints on the schema."],transform:[1,1,2,"json-driver/array.transform","Specifies a transform."]},"driver/cast":{base:[2,1,2,"json-driver/cast.base","Base TensorStore to convert."],context:[2,1,2,"json-driver/cast.context","Specifies context resources that augment/override the parent context."],driver:[2,1,2,"json-driver/cast.driver",""],dtype:[2,1,2,"json-driver/cast.dtype","Specifies the data type under which to view the base TensorStore."],rank:[2,1,2,"json-driver/cast.rank","Specifies the rank of the TensorStore."],schema:[2,1,2,"json-driver/cast.schema","Specifies constraints on the schema."],transform:[2,1,2,"json-driver/cast.transform","Specifies a transform."]},"driver/downsample":{base:[3,1,2,"json-driver/downsample.base","Base TensorStore to downsample."],context:[3,1,2,"json-driver/downsample.context","Specifies context resources that augment/override the parent context."],downsample_factors:[3,1,2,"json-driver/downsample.downsample_factors",""],downsample_method:[3,1,2,"json-driver/downsample.downsample_method",""],driver:[3,1,2,"json-driver/downsample.driver",""],dtype:[3,1,2,"json-driver/downsample.dtype","Specifies the data type."],rank:[3,1,2,"json-driver/downsample.rank","Specifies the rank of the TensorStore."],schema:[3,1,2,"json-driver/downsample.schema","Specifies constraints on the schema."],transform:[3,1,2,"json-driver/downsample.transform","Specifies a transform."]},"driver/json":{cache_pool:[5,1,2,"json-driver/json.cache_pool",""],context:[5,1,2,"json-driver/json.context","Specifies context resources that augment/override the parent context."],data_copy_concurrency:[5,1,2,"json-driver/json.data_copy_concurrency",""],driver:[5,1,2,"json-driver/json.driver",""],dtype:[5,1,2,"json-driver/json.dtype",""],json_pointer:[5,1,2,"json-driver/json.json_pointer",""],kvstore:[5,1,2,"json-driver/json.kvstore",""],path:[5,1,2,"json-driver/json.path","Additional path to the JSON file within the KvStore specified by\nkvstore."],rank:[5,1,2,"json-driver/json.rank",""],recheck_cached_data:[5,1,2,"json-driver/json.recheck_cached_data",""],schema:[5,1,2,"json-driver/json.schema","Specifies constraints on the schema."],transform:[5,1,2,"json-driver/json.transform","Specifies a transform."]},"driver/n5":{cache_pool:[6,1,2,"json-driver/n5.cache_pool",""],context:[6,1,2,"json-driver/n5.context","Specifies context resources that augment/override the parent context."],create:[6,1,2,"json-driver/n5.create",""],data_copy_concurrency:[6,1,2,"json-driver/n5.data_copy_concurrency",""],delete_existing:[6,1,2,"json-driver/n5.delete_existing",""],driver:[6,1,2,"json-driver/n5.driver",""],dtype:[6,1,2,"json-driver/n5.dtype","Specifies the data type."],kvstore:[6,1,2,"json-driver/n5.kvstore",""],metadata:[6,1,2,"json-driver/n5.metadata","N5 array metadata."],open:[6,1,2,"json-driver/n5.open",""],path:[6,1,2,"json-driver/n5.path","Additional path within the KvStore specified by\nkvstore."],rank:[6,1,2,"json-driver/n5.rank","Specifies the rank of the TensorStore."],recheck_cached_data:[6,1,2,"json-driver/n5.recheck_cached_data",""],recheck_cached_metadata:[6,1,2,"json-driver/n5.recheck_cached_metadata",""],schema:[6,1,2,"json-driver/n5.schema","Specifies constraints on the schema."],transform:[6,1,2,"json-driver/n5.transform","Specifies a transform."]},"driver/n5.metadata":{axes:[6,1,2,"json-driver/n5.metadata.axes","Specifies a label for each dimension of the dataset."],blockSize:[6,1,2,"json-driver/n5.metadata.blockSize","Chunk dimensions."],compression:[6,1,2,"json-driver/n5.metadata.compression","Specifies the chunk compression method."],dataType:[6,1,2,"json-driver/n5.metadata.dataType","Specifies the data type."],dimensions:[6,1,2,"json-driver/n5.metadata.dimensions","Dimensions of the dataset."],resolution:[6,1,2,"json-driver/n5.metadata.resolution","Specifies the multiplier for the physical units."],units:[6,1,2,"json-driver/n5.metadata.units","Specifies the base physical unit for each dimension."]},"driver/n5/Codec":{compression:[6,1,2,"json-driver/n5/Codec.compression","Specifies the chunk compression method."],driver:[6,1,2,"json-driver/n5/Codec.driver",""]},"driver/n5/Compression":{type:[6,1,2,"json-driver/n5/Compression.type",""]},"driver/n5/Compression/blosc":{clevel:[6,1,2,"json-driver/n5/Compression/blosc.clevel","Specifies the Blosc compression level to use."],cname:[6,1,2,"json-driver/n5/Compression/blosc.cname",""],shuffle:[6,1,2,"json-driver/n5/Compression/blosc.shuffle",""],type:[6,1,2,"json-driver/n5/Compression/blosc.type",""]},"driver/n5/Compression/bzip2":{blockSize:[6,1,2,"json-driver/n5/Compression/bzip2.blockSize","Specifies the bzip2 block size to use (in units of 100KB), which also determine the compression level."],type:[6,1,2,"json-driver/n5/Compression/bzip2.type",""]},"driver/n5/Compression/gzip":{level:[6,1,2,"json-driver/n5/Compression/gzip.level","Specifies the zlib compression level to use."],type:[6,1,2,"json-driver/n5/Compression/gzip.type",""],useZlib:[6,1,2,"json-driver/n5/Compression/gzip.useZlib",""]},"driver/n5/Compression/raw":{type:[6,1,2,"json-driver/n5/Compression/raw.type",""]},"driver/n5/Compression/xz":{preset:[6,1,2,"json-driver/n5/Compression/xz.preset",""],type:[6,1,2,"json-driver/n5/Compression/xz.type",""]},"driver/neuroglancer_precomputed":{cache_pool:[7,1,2,"json-driver/neuroglancer_precomputed.cache_pool",""],context:[7,1,2,"json-driver/neuroglancer_precomputed.context","Specifies context resources that augment/override the parent context."],create:[7,1,2,"json-driver/neuroglancer_precomputed.create",""],data_copy_concurrency:[7,1,2,"json-driver/neuroglancer_precomputed.data_copy_concurrency",""],delete_existing:[7,1,2,"json-driver/neuroglancer_precomputed.delete_existing",""],driver:[7,1,2,"json-driver/neuroglancer_precomputed.driver",""],dtype:[7,1,2,"json-driver/neuroglancer_precomputed.dtype","Specifies the data type."],kvstore:[7,1,2,"json-driver/neuroglancer_precomputed.kvstore",""],multiscale_metadata:[7,1,2,"json-driver/neuroglancer_precomputed.multiscale_metadata","Scale-independent metadata."],open:[7,1,2,"json-driver/neuroglancer_precomputed.open",""],path:[7,1,2,"json-driver/neuroglancer_precomputed.path","Additional path within the KvStore specified by\nkvstore."],rank:[7,1,2,"json-driver/neuroglancer_precomputed.rank","Specifies the rank of the TensorStore."],recheck_cached_data:[7,1,2,"json-driver/neuroglancer_precomputed.recheck_cached_data",""],recheck_cached_metadata:[7,1,2,"json-driver/neuroglancer_precomputed.recheck_cached_metadata",""],scale_index:[7,1,2,"json-driver/neuroglancer_precomputed.scale_index","Zero-based index of the scale to open or create."],scale_metadata:[7,1,2,"json-driver/neuroglancer_precomputed.scale_metadata","Per-scale metadata."],schema:[7,1,2,"json-driver/neuroglancer_precomputed.schema","Specifies constraints on the schema."],transform:[7,1,2,"json-driver/neuroglancer_precomputed.transform","Specifies a transform."]},"driver/neuroglancer_precomputed.multiscale_metadata":{data_type:[7,1,2,"json-driver/neuroglancer_precomputed.multiscale_metadata.data_type","Specifies the data type."],num_channels:[7,1,2,"json-driver/neuroglancer_precomputed.multiscale_metadata.num_channels","Number of channels."],type:[7,1,2,"json-driver/neuroglancer_precomputed.multiscale_metadata.type","Specifying the type of volume."]},"driver/neuroglancer_precomputed.scale_metadata":{chunk_size:[7,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.chunk_size","Chunk dimensions (XYZ order)."],compressed_segmentation_block_size:[7,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.compressed_segmentation_block_size","Block size for compressed segmentation encoding."],encoding:[7,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.encoding","Specifies the chunk encoding."],jpeg_quality:[7,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.jpeg_quality","JPEG encoding quality."],key:[7,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.key","Specifies the scale key (relative to path)."],resolution:[7,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.resolution","Voxel size in nanometers (XYZ order)."],sharding:[7,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.sharding",""],size:[7,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.size","Voxel dimensions of the volume (XYZ order)."],voxel_offset:[7,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.voxel_offset","Voxel origin of the volume (XYZ order)."]},"driver/neuroglancer_precomputed/Codec":{driver:[7,1,2,"json-driver/neuroglancer_precomputed/Codec.driver",""],encoding:[7,1,2,"json-driver/neuroglancer_precomputed/Codec.encoding","Specifies the chunk encoding."],jpeg_quality:[7,1,2,"json-driver/neuroglancer_precomputed/Codec.jpeg_quality","JPEG encoding quality."],shard_data_encoding:[7,1,2,"json-driver/neuroglancer_precomputed/Codec.shard_data_encoding","Additional data compression when using the sharded format."]},"driver/neuroglancer_precomputed/ShardingSpec":{"@type":[7,1,2,"json-driver/neuroglancer_precomputed/ShardingSpec.@type",""],data_encoding:[7,1,2,"json-driver/neuroglancer_precomputed/ShardingSpec.data_encoding","Specifies the encoding of the data chunks."],hash:[7,1,2,"json-driver/neuroglancer_precomputed/ShardingSpec.hash","Specifies the hash function used to map chunk IDs to shards."],minishard_bits:[7,1,2,"json-driver/neuroglancer_precomputed/ShardingSpec.minishard_bits","Number of bits of the hashed chunk ID that determine the minishard number."],minishard_index_encoding:[7,1,2,"json-driver/neuroglancer_precomputed/ShardingSpec.minishard_index_encoding","Specifies the encoding of the minishard index."],preshift_bits:[7,1,2,"json-driver/neuroglancer_precomputed/ShardingSpec.preshift_bits","Number of low-order bits of the chunk ID that do not contribute to the hashed chunk ID."],shard_bits:[7,1,2,"json-driver/neuroglancer_precomputed/ShardingSpec.shard_bits","Number of bits of the hashed chunk ID that determine the shard number."]},"driver/zarr":{cache_pool:[8,1,2,"json-driver/zarr.cache_pool",""],context:[8,1,2,"json-driver/zarr.context","Specifies context resources that augment/override the parent context."],create:[8,1,2,"json-driver/zarr.create",""],data_copy_concurrency:[8,1,2,"json-driver/zarr.data_copy_concurrency",""],delete_existing:[8,1,2,"json-driver/zarr.delete_existing",""],driver:[8,1,2,"json-driver/zarr.driver",""],dtype:[8,1,2,"json-driver/zarr.dtype","Specifies the data type."],field:[8,1,2,"json-driver/zarr.field","Name of field to open."],key_encoding:[8,1,2,"json-driver/zarr.key_encoding","Specifies the encoding of chunk indices into key-value store keys."],kvstore:[8,1,2,"json-driver/zarr.kvstore",""],metadata:[8,1,2,"json-driver/zarr.metadata","Zarr array metadata."],open:[8,1,2,"json-driver/zarr.open",""],path:[8,1,2,"json-driver/zarr.path","Additional path within the KvStore specified by\nkvstore."],rank:[8,1,2,"json-driver/zarr.rank","Specifies the rank of the TensorStore."],recheck_cached_data:[8,1,2,"json-driver/zarr.recheck_cached_data",""],recheck_cached_metadata:[8,1,2,"json-driver/zarr.recheck_cached_metadata",""],schema:[8,1,2,"json-driver/zarr.schema","Specifies constraints on the schema."],transform:[8,1,2,"json-driver/zarr.transform","Specifies a transform."]},"driver/zarr.metadata":{chunks:[8,1,2,"json-driver/zarr.metadata.chunks","Chunk dimensions."],compressor:[8,1,2,"json-driver/zarr.metadata.compressor","Specifies the chunk compression method."],dimension_separator:[8,1,2,"json-driver/zarr.metadata.dimension_separator","Specifies the encoding of chunk indices into key-value store keys."],dtype:[8,1,2,"json-driver/zarr.metadata.dtype","Specifies the scalar or structured data type."],fill_value:[8,1,2,"json-driver/zarr.metadata.fill_value","Specifies the fill value."],filters:[8,1,2,"json-driver/zarr.metadata.filters","Specifies the filters to apply to chunks."],order:[8,1,2,"json-driver/zarr.metadata.order","Specifies the data layout for encoded chunks."],shape:[8,1,2,"json-driver/zarr.metadata.shape","Chunked dimensions of the array."],zarr_format:[8,1,2,"json-driver/zarr.metadata.zarr_format",""]},"driver/zarr/Codec":{compressor:[8,1,2,"json-driver/zarr/Codec.compressor","Specifies the chunk compression method."],driver:[8,1,2,"json-driver/zarr/Codec.driver",""],filters:[8,1,2,"json-driver/zarr/Codec.filters","Specifies the filters to apply to chunks."]},"driver/zarr/Compressor":{id:[8,1,2,"json-driver/zarr/Compressor.id",""]},"driver/zarr/Compressor/blosc":{blocksize:[8,1,2,"json-driver/zarr/Compressor/blosc.blocksize","Specifies the Blosc blocksize."],clevel:[8,1,2,"json-driver/zarr/Compressor/blosc.clevel","Specifies the Blosc compression level to use."],cname:[8,1,2,"json-driver/zarr/Compressor/blosc.cname",""],id:[8,1,2,"json-driver/zarr/Compressor/blosc.id",""],shuffle:[8,1,2,"json-driver/zarr/Compressor/blosc.shuffle",""]},"driver/zarr/Compressor/bz2":{id:[8,1,2,"json-driver/zarr/Compressor/bz2.id",""],level:[8,1,2,"json-driver/zarr/Compressor/bz2.level","Specifies the bzip2 buffer size/compression level to use."]},"driver/zarr/Compressor/zlib":{id:[8,1,2,"json-driver/zarr/Compressor/zlib.id",""],level:[8,1,2,"json-driver/zarr/Compressor/zlib.level","Specifies the zlib compression level to use."]},"kvstore/file":{context:[13,1,2,"json-kvstore/file.context",""],driver:[13,1,2,"json-kvstore/file.driver",""],file_io_concurrency:[13,1,2,"json-kvstore/file.file_io_concurrency",""],path:[13,1,2,"json-kvstore/file.path","Path to root directory on local filesystem."]},"kvstore/gcs":{bucket:[14,1,2,"json-kvstore/gcs.bucket","Google Cloud Storage bucket to use."],context:[14,1,2,"json-kvstore/gcs.context",""],driver:[14,1,2,"json-kvstore/gcs.driver",""],gcs_request_concurrency:[14,1,2,"json-kvstore/gcs.gcs_request_concurrency",""],gcs_request_retries:[14,1,2,"json-kvstore/gcs.gcs_request_retries",""],gcs_user_project:[14,1,2,"json-kvstore/gcs.gcs_user_project",""],path:[14,1,2,"json-kvstore/gcs.path","Key prefix within the key-value store."]},"kvstore/memory":{atomic:[16,1,2,"json-kvstore/memory.atomic",""],context:[16,1,2,"json-kvstore/memory.context",""],driver:[16,1,2,"json-kvstore/memory.driver",""],memory_key_value_store:[16,1,2,"json-kvstore/memory.memory_key_value_store",""],path:[16,1,2,"json-kvstore/memory.path","Key prefix within the key-value store."]},"tensorstore.ChunkLayout":{"__init__(components)":[34,3,1,"","Constructs from component parts."],"__init__(json)":[35,3,1,"","Constructs from the JSON representation."],Grid:[19,2,1,"","Describes a regular grid layout for write/read/codec chunks."],__eq__:[33,3,1,"","Compares two chunk layouts for equality."],codec_chunk:[36,5,1,"","Chunk grid used by the codec."],grid_origin:[37,5,1,"","Hard constraints on the grid origin."],grid_origin_soft_constraint:[38,5,1,"","Soft constraints on the grid origin."],inner_order:[39,5,1,"","Permutation specifying the element storage order within the innermost chunks."],inner_order_soft_constraint:[40,5,1,"","Permutation specifying soft constraint on the element storage order."],ndim:[41,5,1,"","Alias for rank."],rank:[42,5,1,"","Number of dimensions in the index space."],read_chunk:[43,5,1,"","Chunk grid for efficient reads."],read_chunk_template:[44,5,1,"","Chunk offset and shape for efficient reads."],to_json:[45,3,1,"","Converts to the JSON representation."],update:[46,3,1,"","Adds additional constraints."],write_chunk:[47,5,1,"","Chunk grid for efficient writes."],write_chunk_template:[48,5,1,"","Chunk offset and shape for efficient writes."]},"tensorstore.ChunkLayout.Grid":{"__init__(components)":[21,3,1,"","Constructs a chunk grid."],"__init__(json)":[22,3,1,"","Constructs from the JSON representation."],__eq__:[20,3,1,"","Compares two chunk grids for equality."],aspect_ratio:[23,5,1,"","Chunk shape aspect ratio."],aspect_ratio_soft_constraint:[24,5,1,"","Soft constraints on chunk shape aspect ratio."],elements:[25,5,1,"","Target number of elements per chunk."],elements_soft_constraint:[26,5,1,"","Soft constraint on target number of elements per chunk."],ndim:[27,5,1,"","Alias for rank."],rank:[28,5,1,"","Number of dimensions, or None if unspecified."],shape:[29,5,1,"","Hard constraints on chunk shape."],shape_soft_constraint:[30,5,1,"","Soft constraints on chunk shape."],to_json:[31,3,1,"","Converts to the JSON representation."],update:[32,3,1,"","Adds additional constraints."]},"tensorstore.ChunkLayout.Grid.__init__(components)":{aspect_ratio:[21,4,2,"p-aspect_ratio","Aspect ratio for each dimension."],aspect_ratio_soft_constraint:[21,4,2,"p-aspect_ratio_soft_constraint","Soft constraints on the aspect ratio for each dimension."],elements:[21,4,2,"p-elements","Target number of elements per chunk."],elements_soft_constraint:[21,4,2,"p-elements_soft_constraint","Soft constraint on the target number of elements per chunk."],grid:[21,4,2,"p-grid","Other grid constraints to merge in."],grid_soft_constraint:[21,4,2,"p-grid_soft_constraint","Other grid constraints to merge in as soft constraints."],rank:[21,4,2,"p-rank","Specifies the number of dimensions."],shape:[21,4,2,"p-shape","Hard constraints on the chunk size for each dimension."],shape_soft_constraint:[21,4,2,"p-shape_soft_constraint","Soft constraints on the chunk size for each dimension."]},"tensorstore.ChunkLayout.Grid.update":{aspect_ratio:[32,4,2,"p-aspect_ratio","Aspect ratio for each dimension."],aspect_ratio_soft_constraint:[32,4,2,"p-aspect_ratio_soft_constraint","Soft constraints on the aspect ratio for each dimension."],elements:[32,4,2,"p-elements","Target number of elements per chunk."],elements_soft_constraint:[32,4,2,"p-elements_soft_constraint","Soft constraint on the target number of elements per chunk."],grid:[32,4,2,"p-grid","Other grid constraints to merge in."],grid_soft_constraint:[32,4,2,"p-grid_soft_constraint","Other grid constraints to merge in as soft constraints."],rank:[32,4,2,"p-rank","Specifies the number of dimensions."],shape:[32,4,2,"p-shape","Hard constraints on the chunk size for each dimension."],shape_soft_constraint:[32,4,2,"p-shape_soft_constraint","Soft constraints on the chunk size for each dimension."]},"tensorstore.ChunkLayout.__init__(components)":{chunk:[34,4,2,"p-chunk","Common constraints on write, read, and codec chunks."],chunk_aspect_ratio:[34,4,2,"p-chunk_aspect_ratio","Hard constraints on the write, read, and codec chunk aspect ratio."],chunk_aspect_ratio_soft_constraint:[34,4,2,"p-chunk_aspect_ratio_soft_constraint","Soft constraints on the write, read, and codec chunk aspect ratio."],chunk_elements:[34,4,2,"p-chunk_elements","Hard constraints on the target number of elements for write and read chunks.\nCorresponds to the JSON elements member of\nChunkLayout.chunk."],chunk_elements_soft_constraint:[34,4,2,"p-chunk_elements_soft_constraint","Soft constraints on the target number of elements for write and read chunks.\nCorresponds to the JSON\nelements_soft_constraint member of\nChunkLayout.chunk."],chunk_shape:[34,4,2,"p-chunk_shape","Hard constraints on both the write and read chunk shape."],chunk_shape_soft_constraint:[34,4,2,"p-chunk_shape_soft_constraint","Soft constraints on both the write and read chunk shape."],codec_chunk:[34,4,2,"p-codec_chunk","Constraints on codec chunks."],codec_chunk_aspect_ratio:[34,4,2,"p-codec_chunk_aspect_ratio","Soft constraints on the codec chunk aspect ratio."],codec_chunk_aspect_ratio_soft_constraint:[34,4,2,"p-codec_chunk_aspect_ratio_soft_constraint","Soft constraints on the codec chunk aspect ratio."],codec_chunk_elements:[34,4,2,"p-codec_chunk_elements","Hard constraints on the target number of elements for codec chunks."],codec_chunk_elements_soft_constraint:[34,4,2,"p-codec_chunk_elements_soft_constraint","Soft constraints on the target number of elements for codec chunks."],codec_chunk_shape:[34,4,2,"p-codec_chunk_shape","Soft constraints on the codec chunk shape."],codec_chunk_shape_soft_constraint:[34,4,2,"p-codec_chunk_shape_soft_constraint","Soft constraints on the codec chunk shape."],finalize:[34,4,2,"p-finalize","Validates and converts the layout into a precise chunk\nlayout."],grid_origin:[34,4,2,"p-grid_origin","Hard constraints on the origin of the chunk grid.\nCorresponds to the JSON ChunkLayout.grid_origin member."],grid_origin_soft_constraint:[34,4,2,"p-grid_origin_soft_constraint","Soft constraints on the origin of the chunk grid."],inner_order:[34,4,2,"p-inner_order","Permutation specifying the element storage order within the innermost chunks.\nCorresponds to the JSON ChunkLayout.inner_order member."],inner_order_soft_constraint:[34,4,2,"p-inner_order_soft_constraint","Specifies a preferred value for inner_order rather than a\nhard constraint."],rank:[34,4,2,"p-rank","Specifies the number of dimensions."],read_chunk:[34,4,2,"p-read_chunk","Constraints on read chunks."],read_chunk_aspect_ratio:[34,4,2,"p-read_chunk_aspect_ratio","Hard constraints on the read chunk aspect ratio."],read_chunk_aspect_ratio_soft_constraint:[34,4,2,"p-read_chunk_aspect_ratio_soft_constraint","Soft constraints on the read chunk aspect ratio."],read_chunk_elements:[34,4,2,"p-read_chunk_elements","Hard constraints on the target number of elements for read chunks."],read_chunk_elements_soft_constraint:[34,4,2,"p-read_chunk_elements_soft_constraint","Soft constraints on the target number of elements for read chunks."],read_chunk_shape:[34,4,2,"p-read_chunk_shape","Hard constraints on the read chunk shape."],read_chunk_shape_soft_constraint:[34,4,2,"p-read_chunk_shape_soft_constraint","Soft constraints on the read chunk shape."],write_chunk:[34,4,2,"p-write_chunk","Constraints on write chunks."],write_chunk_aspect_ratio:[34,4,2,"p-write_chunk_aspect_ratio","Hard constraints on the write chunk aspect ratio."],write_chunk_aspect_ratio_soft_constraint:[34,4,2,"p-write_chunk_aspect_ratio_soft_constraint","Soft constraints on the write chunk aspect ratio."],write_chunk_elements:[34,4,2,"p-write_chunk_elements","Hard constraints on the target number of elements for write chunks."],write_chunk_elements_soft_constraint:[34,4,2,"p-write_chunk_elements_soft_constraint","Soft constraints on the target number of elements for write chunks."],write_chunk_shape:[34,4,2,"p-write_chunk_shape","Hard constraints on the write chunk shape."],write_chunk_shape_soft_constraint:[34,4,2,"p-write_chunk_shape_soft_constraint","Soft constraints on the write chunk shape."]},"tensorstore.ChunkLayout.update":{chunk:[46,4,2,"p-chunk","Common constraints on write, read, and codec chunks."],chunk_aspect_ratio:[46,4,2,"p-chunk_aspect_ratio","Hard constraints on the write, read, and codec chunk aspect ratio."],chunk_aspect_ratio_soft_constraint:[46,4,2,"p-chunk_aspect_ratio_soft_constraint","Soft constraints on the write, read, and codec chunk aspect ratio."],chunk_elements:[46,4,2,"p-chunk_elements","Hard constraints on the target number of elements for write and read chunks.\nCorresponds to the JSON elements member of\nChunkLayout.chunk."],chunk_elements_soft_constraint:[46,4,2,"p-chunk_elements_soft_constraint","Soft constraints on the target number of elements for write and read chunks.\nCorresponds to the JSON\nelements_soft_constraint member of\nChunkLayout.chunk."],chunk_shape:[46,4,2,"p-chunk_shape","Hard constraints on both the write and read chunk shape."],chunk_shape_soft_constraint:[46,4,2,"p-chunk_shape_soft_constraint","Soft constraints on both the write and read chunk shape."],codec_chunk:[46,4,2,"p-codec_chunk","Constraints on codec chunks."],codec_chunk_aspect_ratio:[46,4,2,"p-codec_chunk_aspect_ratio","Soft constraints on the codec chunk aspect ratio."],codec_chunk_aspect_ratio_soft_constraint:[46,4,2,"p-codec_chunk_aspect_ratio_soft_constraint","Soft constraints on the codec chunk aspect ratio."],codec_chunk_elements:[46,4,2,"p-codec_chunk_elements","Hard constraints on the target number of elements for codec chunks."],codec_chunk_elements_soft_constraint:[46,4,2,"p-codec_chunk_elements_soft_constraint","Soft constraints on the target number of elements for codec chunks."],codec_chunk_shape:[46,4,2,"p-codec_chunk_shape","Soft constraints on the codec chunk shape."],codec_chunk_shape_soft_constraint:[46,4,2,"p-codec_chunk_shape_soft_constraint","Soft constraints on the codec chunk shape."],finalize:[46,4,2,"p-finalize","Validates and converts the layout into a precise chunk\nlayout."],grid_origin:[46,4,2,"p-grid_origin","Hard constraints on the origin of the chunk grid.\nCorresponds to the JSON ChunkLayout.grid_origin member."],grid_origin_soft_constraint:[46,4,2,"p-grid_origin_soft_constraint","Soft constraints on the origin of the chunk grid."],inner_order:[46,4,2,"p-inner_order","Permutation specifying the element storage order within the innermost chunks.\nCorresponds to the JSON ChunkLayout.inner_order member."],inner_order_soft_constraint:[46,4,2,"p-inner_order_soft_constraint","Specifies a preferred value for inner_order rather than a\nhard constraint."],rank:[46,4,2,"p-rank","Specifies the number of dimensions."],read_chunk:[46,4,2,"p-read_chunk","Constraints on read chunks."],read_chunk_aspect_ratio:[46,4,2,"p-read_chunk_aspect_ratio","Hard constraints on the read chunk aspect ratio."],read_chunk_aspect_ratio_soft_constraint:[46,4,2,"p-read_chunk_aspect_ratio_soft_constraint","Soft constraints on the read chunk aspect ratio."],read_chunk_elements:[46,4,2,"p-read_chunk_elements","Hard constraints on the target number of elements for read chunks."],read_chunk_elements_soft_constraint:[46,4,2,"p-read_chunk_elements_soft_constraint","Soft constraints on the target number of elements for read chunks."],read_chunk_shape:[46,4,2,"p-read_chunk_shape","Hard constraints on the read chunk shape."],read_chunk_shape_soft_constraint:[46,4,2,"p-read_chunk_shape_soft_constraint","Soft constraints on the read chunk shape."],write_chunk:[46,4,2,"p-write_chunk","Constraints on write chunks."],write_chunk_aspect_ratio:[46,4,2,"p-write_chunk_aspect_ratio","Hard constraints on the write chunk aspect ratio."],write_chunk_aspect_ratio_soft_constraint:[46,4,2,"p-write_chunk_aspect_ratio_soft_constraint","Soft constraints on the write chunk aspect ratio."],write_chunk_elements:[46,4,2,"p-write_chunk_elements","Hard constraints on the target number of elements for write chunks."],write_chunk_elements_soft_constraint:[46,4,2,"p-write_chunk_elements_soft_constraint","Soft constraints on the target number of elements for write chunks."],write_chunk_shape:[46,4,2,"p-write_chunk_shape","Hard constraints on the write chunk shape."],write_chunk_shape_soft_constraint:[46,4,2,"p-write_chunk_shape_soft_constraint","Soft constraints on the write chunk shape."]},"tensorstore.CodecSpec":{__init__:[50,3,1,"","Constructs from the JSON representation."],to_json:[51,3,1,"","Converts to the JSON representation."]},"tensorstore.Context":{"__init__(default)":[59,3,1,"","Constructs a default context."],"__init__(json)":[60,3,1,"","Constructs a context from its JSON representation."],"__init__(spec)":[61,3,1,"","Constructs a context from a parsed spec."],Resource:[53,2,1,"","Handle to a context resource."],Spec:[55,2,1,"","Parsed representation of a JSON Context specification."],__getitem__:[58,3,1,"","Creates or retrieves the context resource for the given key."],parent:[62,5,1,"","Parent context from which this context inherits."],spec:[63,5,1,"","Spec from which this context was constructed."]},"tensorstore.Context.Resource":{to_json:[54,3,1,"","Returns the JSON representation of the context resource."]},"tensorstore.Context.Spec":{__init__:[56,3,1,"","Creates a context specification from its JSON representation."],to_json:[57,3,1,"","Returns the JSON representation."]},"tensorstore.Context.Spec.to_json":{include_defaults:[57,4,2,"p-include_defaults","Indicates whether to include members even if they are equal to the default value."]},"tensorstore.Context.__getitem__":{key:[58,4,2,"p-key","Resource key, of the form '<resource-type>' or\n<resource-type>#<id>."]},"tensorstore.Context.__init__(json)":{json:[60,4,2,"p-json","JSON representation of the context."],parent:[60,4,2,"p-parent","Parent context from which to inherit."]},"tensorstore.Context.__init__(spec)":{parent:[61,4,2,"p-parent","Parent context from which to inherit."],spec:[61,4,2,"p-spec","Parsed context spec."]},"tensorstore.Dim":{"__contains__(dim)":[65,3,1,"","Checks if the interval contains another interval."],"__contains__(index)":[66,3,1,"","Checks if the interval contains a given index."],"__init__(exclusive_max)":[68,3,1,"","Constructs a half-open interval [inclusive_min, exclusive_max)`."],"__init__(inclusive_max)":[69,3,1,"","Constructs a closed interval [inclusive_min, inclusive_max]."],"__init__(size)":[70,3,1,"","Constructs a sized interval [inclusive_min, inclusive_min+size)."],"__init__(unbounded)":[71,3,1,"","Constructs an unbounded interval (-inf, +inf)."],__eq__:[67,3,1,"","Compares for equality with another interval."],__iter__:[72,3,1,"","Enables iteration over the indices contained in the interval."],__len__:[73,3,1,"","Size of the interval, equivalent to size."],__repr__:[74,3,1,"","Returns the string representation as a Python expression."],__str__:[75,3,1,"","Returns the string representation of the interval."],empty:[76,5,1,"","Returns True if size is zero."],exclusive_max:[77,5,1,"","Exclusive upper bound of the interval."],exclusive_min:[78,5,1,"","Exclusive lower bound of the interval."],finite:[79,5,1,"","Indicates if the interval is finite."],hull:[80,3,1,"","Hull with another Dim."],implicit_lower:[81,5,1,"","Indicates if the lower bound is implicit/resizeable."],implicit_upper:[82,5,1,"","Indicates if the upper bound is implicit/resizeable."],inclusive_max:[83,5,1,"","Inclusive upper bound of the interval."],inclusive_min:[84,5,1,"","Inclusive lower bound of the interval."],intersect:[85,3,1,"","Intersect with another Dim."],label:[86,5,1,"","Dimension label, or the empty string to indicate an unlabeled dimension."],size:[87,5,1,"","Size of the interval."]},"tensorstore.Dim.__init__(exclusive_max)":{exclusive_max:[68,4,2,"p-exclusive_max","Exclusive upper bound."],implicit_lower:[68,4,2,"p-implicit_lower","Indicates whether the lower bound is\nimplicit."],implicit_upper:[68,4,2,"p-implicit_upper","Indicates whether the upper bound is\nimplicit."],inclusive_min:[68,4,2,"p-inclusive_min","Inclusive lower bound."],label:[68,4,2,"p-label","Dimension label."]},"tensorstore.Dim.__init__(inclusive_max)":{implicit_lower:[69,4,2,"p-implicit_lower","Indicates whether the lower bound is\nimplicit."],implicit_upper:[69,4,2,"p-implicit_upper","Indicates whether the upper bound is\nimplicit."],inclusive_max:[69,4,2,"p-inclusive_max","Inclusive upper bound."],inclusive_min:[69,4,2,"p-inclusive_min","Inclusive lower bound."],label:[69,4,2,"p-label","Dimension label."]},"tensorstore.Dim.__init__(size)":{implicit_lower:[70,4,2,"p-implicit_lower","Indicates whether the lower bound is\nimplicit."],implicit_upper:[70,4,2,"p-implicit_upper","Indicates whether the upper bound is\nimplicit."],inclusive_min:[70,4,2,"p-inclusive_min","Inclusive lower bound."],label:[70,4,2,"p-label","Dimension label."],size:[70,4,2,"p-size","Size of the interval."]},"tensorstore.Dim.__init__(unbounded)":{implicit_lower:[71,4,2,"p-implicit_lower","Indicates whether the lower bound is\nimplicit."],implicit_upper:[71,4,2,"p-implicit_upper","Indicates whether the upper bound is\nimplicit."],label:[71,4,2,"p-label","Dimension label."]},"tensorstore.Dim.hull":{other:[80,4,2,"p-other","Object to hull with."]},"tensorstore.Dim.intersect":{other:[85,4,2,"p-other","Object to intersect with."]},"tensorstore.DimExpression":{__getitem__:[89,3,1,"","Applies a NumPy-style indexing operation with default index array semantics."],diagonal:[90,5,1,"","Extracts the diagonal of the selected dimensions."],label:[91,3,1,"","Sets (or changes) the labels of the selected dimensions."],oindex:[92,3,1,"","Applies a NumPy-style indexing operation with outer indexing semantics."],stride:[93,3,1,"","Strides the domains of the selected input dimensions by the specified amounts."],translate_backward_by:[94,3,1,"","Translates (shifts) the domains of the selected input dimensions backward by the\nspecified offsets, without affecting the output range."],translate_by:[95,3,1,"","Translates (shifts) the domains of the selected input dimensions by the\nspecified offsets, without affecting the output range."],translate_to:[96,3,1,"","Translates the domains of the selected input dimensions to the specified\norigins without affecting the output range."],transpose:[97,3,1,"","Transposes the selected dimensions to the specified target indices."],vindex:[98,3,1,"","Applies a NumPy-style indexing operation with vectorized indexing semantics."]},"tensorstore.DimExpression.label":{labels:[91,4,2,"p-labels","Dimension labels for each selected dimension."]},"tensorstore.DimExpression.stride":{strides:[93,4,2,"p-strides","Strides for each selected dimension."]},"tensorstore.DimExpression.translate_backward_by":{offsets:[94,4,2,"p-offsets","The offsets for each of the selected dimensions."]},"tensorstore.DimExpression.translate_by":{offsets:[95,4,2,"p-offsets","The offsets for each of the selected dimensions."]},"tensorstore.DimExpression.translate_to":{origins:[96,4,2,"p-origins","The new origins for each of the selected dimensions."]},"tensorstore.DimExpression.transpose":{target:[97,4,2,"p-target","Target dimension indices for the selected dimensions."]},"tensorstore.Future":{__new__:[100,3,1,"","Converts a FutureLike object to a Future."],add_done_callback:[101,3,1,"","Registers a callback to be invoked upon completion of the asynchronous operation."],cancel:[102,3,1,"","Requests cancellation of the asynchronous operation."],cancelled:[103,3,1,"","Queries whether the asynchronous operation has been cancelled."],done:[104,3,1,"","Queries whether the asynchronous operation has completed or been cancelled."],exception:[105,3,1,"","Blocks until asynchronous operation completes, and returns the error if any."],force:[106,3,1,"","Ensures the asynchronous operation begins executing."],remove_done_callback:[107,3,1,"","Unregisters a previously-registered callback."],result:[108,3,1,"","Blocks until the asynchronous operation completes, and returns the result."]},"tensorstore.Future.__new__":{future:[100,4,2,"p-future","Specifies the immediate or asynchronous result."],loop:[100,4,2,"p-loop","Event loop on which to run future if it is a\ncoroutine."]},"tensorstore.Future.exception":{deadline:[105,4,2,"p-deadline","Deadline in seconds since the Unix epoch."],timeout:[105,4,2,"p-timeout","Maximum number of seconds to block."]},"tensorstore.Future.result":{deadline:[108,4,2,"p-deadline","Deadline in seconds since the Unix epoch."],timeout:[108,4,2,"p-timeout","Maximum number of seconds to block."]},"tensorstore.IndexDomain":{"__getitem__(domain)":[111,3,1,"","Slices this domain by another domain."],"__getitem__(expr)":[112,3,1,"","Transforms the domain by a dimension expression."],"__getitem__(identifier)":[113,3,1,"","Returns the single dimension specified by identifier."],"__getitem__(selection)":[114,3,1,"","Returns a new domain with a subset of the dimensions."],"__getitem__(transform)":[115,3,1,"","Transforms the domain using an explicit index transform."],"__init__(components)":[116,3,1,"","Constructs an index domain from component vectors."],"__init__(dimensions)":[117,3,1,"","Constructs an index domain from a :py:class`.Dim` sequence."],"__init__(json)":[118,3,1,"","Constructs an index domain from its JSON representation."],__len__:[119,3,1,"","Returns the number of dimensions (rank)."],__repr__:[120,3,1,"","Returns the string representation."],exclusive_max:[121,5,1,"","Exclusive upper bound of the domain."],hull:[122,3,1,"","Computes the hull (minimum containing box) with another domain."],implicit_lower_bounds:[123,5,1,"","Indicates whether the lower bound of each dimension is implicit or explicit."],implicit_upper_bounds:[124,5,1,"","Indicates whether the upper bound of each dimension is implicit or explicit."],inclusive_max:[125,5,1,"","Inclusive upper bound of the domain."],inclusive_min:[126,5,1,"","Inclusive lower bound of the domain, alias of origin."],index_exp:[127,5,1,"","Equivalent NumPy-compatible index expression."],intersect:[128,3,1,"","Intersects with another domain."],labels:[129,5,1,"","Dimension labels for each dimension."],ndim:[130,5,1,"","Alias for rank."],origin:[131,5,1,"","Inclusive lower bound of the domain."],rank:[132,5,1,"","Number of dimensions in the index space."],shape:[133,5,1,"","Shape of the domain."],size:[134,5,1,"","Total number of elements in the domain."],to_json:[135,3,1,"","Returns the JSON representation."]},"tensorstore.IndexDomain.__getitem__(expr)":{expr:[112,4,2,"p-expr","Dimension expression to apply."]},"tensorstore.IndexDomain.__getitem__(identifier)":{identifier:[113,4,2,"p-identifier","Specifies a dimension by integer index or label."]},"tensorstore.IndexDomain.__getitem__(selection)":{selection:[114,4,2,"p-selection","Specifies the dimensions to include, either by index or label."]},"tensorstore.IndexDomain.__getitem__(transform)":{transform:[115,4,2,"p-transform","Index transform, transform.output_rank must equal\nself.rank."]},"tensorstore.IndexDomain.__init__(components)":{exclusive_max:[116,4,2,"p-exclusive_max","Exclusive upper bounds for each dimension."],implicit_lower_bounds:[116,4,2,"p-implicit_lower_bounds","Indicates whether each lower bound is\nimplicit or explicit."],implicit_upper_bounds:[116,4,2,"p-implicit_upper_bounds","Indicates whether each upper bound is\nimplicit or explicit."],inclusive_max:[116,4,2,"p-inclusive_max","Inclusive upper bounds for each dimension."],inclusive_min:[116,4,2,"p-inclusive_min","Inclusive lower bounds for each dimension."],labels:[116,4,2,"p-labels","Dimension labels."],rank:[116,4,2,"p-rank","Number of dimensions."],shape:[116,4,2,"p-shape","Size for each dimension."]},"tensorstore.IndexDomain.__init__(dimensions)":{dimensions:[117,4,2,"p-dimensions","Sequence of :py:class`.Dim` objects."]},"tensorstore.IndexDomain.hull":{other:[122,4,2,"p-other","Object to hull with."]},"tensorstore.IndexDomain.intersect":{other:[128,4,2,"p-other","Object to intersect with."]},"tensorstore.IndexTransform":{"__getitem__(domain)":[139,3,1,"","Slices this index transform by another domain."],"__getitem__(expr)":[140,3,1,"","Applies a dimension expression to this transform."],"__getitem__(indices)":[141,3,1,"","Applies a NumPy-style indexing operation with default index array semantics."],"__getitem__(transform)":[142,3,1,"","Composes this index transform with another index transform."],"__init__(components)":[143,3,1,"","Constructs an index transform from component vectors."],"__init__(domain)":[144,3,1,"","Constructs an index transform from a domain and output index maps."],"__init__(json)":[145,3,1,"","Constructs an index transform from its JSON representation."],T:[137,5,1,"","View with transposed domain (reversed dimension order)."],__call__:[138,3,1,"","Maps an input index vector to an output index vector."],__repr__:[146,3,1,"","Returns the string representation."],domain:[147,5,1,"","Input domain of the index transform."],implicit_lower_bounds:[148,5,1,"","Indicates whether the lower bound of each input dimension is implicit or explicit."],implicit_upper_bounds:[149,5,1,"","Indicates whether the upper bound of each input dimension is implicit or explicit."],input_exclusive_max:[150,5,1,"","Exclusive upper bound of the input domain."],input_inclusive_max:[151,5,1,"","Inclusive upper bound of the input domain."],input_inclusive_min:[152,5,1,"","Inclusive lower bound of the input domain, alias for input_origin."],input_labels:[153,5,1,"","Dimension labels for each input dimension."],input_origin:[154,5,1,"","Inclusive lower bound of the input domain."],input_rank:[155,5,1,"","Rank of the input space."],input_shape:[156,5,1,"","Shape of the input domain."],ndim:[157,5,1,"","Rank of the input space, alias for input_rank."],oindex:[158,3,1,"","Applies a NumPy-style indexing operation with outer indexing semantics."],origin:[159,5,1,"","Inclusive lower bound of the domain."],output:[160,5,1,"","Output index maps."],output_rank:[161,5,1,"","Rank of the output space."],shape:[162,5,1,"","Shape of the domain."],size:[163,5,1,"","Total number of elements in the domain."],to_json:[164,3,1,"","Returns the JSON representation of the transform."],vindex:[165,3,1,"","Applies a NumPy-style indexing operation with vectorized indexing semantics."]},"tensorstore.IndexTransform.__call__":{indices:[138,4,2,"p-indices","Input vector of length input_rank."]},"tensorstore.IndexTransform.__init__(components)":{implicit_lower_bounds:[143,4,2,"p-implicit_lower_bounds","Indicates whether each lower bound is\nimplicit or explicit."],implicit_upper_bounds:[143,4,2,"p-implicit_upper_bounds","Indicates whether each upper bound is\nimplicit or explicit."],input_exclusive_max:[143,4,2,"p-input_exclusive_max","Exclusive upper bounds for each input dimension."],input_inclusive_max:[143,4,2,"p-input_inclusive_max","Inclusive upper bounds for each input dimension."],input_inclusive_min:[143,4,2,"p-input_inclusive_min","Inclusive lower bounds for each input dimension."],input_labels:[143,4,2,"p-input_labels","Dimension labels for each input\ndimension."],input_rank:[143,4,2,"p-input_rank","Number of input dimensions."],input_shape:[143,4,2,"p-input_shape","Size for each input dimension."],output:[143,4,2,"p-output","Sequence of output index maps, or OutputIndexMaps object\nfrom an existing transform."]},"tensorstore.IndexTransform.__init__(domain)":{domain:[144,4,2,"p-domain","The domain of the index transform."],output:[144,4,2,"p-output","Sequence of output index maps, or OutputIndexMaps object\nfrom an existing transform."]},"tensorstore.KvStore":{KeyRange:[168,2,1,"","Half-open interval of byte string keys, according to lexicographical order."],ReadResult:[175,2,1,"","Specifies the result of a read operation."],Spec:[180,2,1,"","Parsed representation of a JSON key-value store specification."],TimestampedStorageGeneration:[189,2,1,"","Specifies a storage generation identifier and a timestamp."],__delitem__:[194,3,1,"","Synchronously deletes a single key."],__getitem__:[195,3,1,"","Synchronously reads the value of a single key."],__repr__:[196,3,1,"","Returns a string representation based on the  JSON representation."],__setitem__:[197,3,1,"","Synchronously writes the value of a single key."],copy:[198,3,1,"","Returns a copy of the key-value store."],delete_range:[199,3,1,"","Deletes a key range."],list:[200,3,1,"","Lists the keys in the key-value store."],open:[201,3,1,"","Opens a key-value store."],path:[202,5,1,"","Path prefix within the base key-value store."],read:[203,3,1,"","Reads the value of a single key."],spec:[204,3,1,"","Spec that may be used to re-open or re-create the key-value store."],transaction:[205,5,1,"","Transaction bound to this key-value store."],with_transaction:[206,3,1,"","Returns a transaction-bound view of this key-value store."],write:[207,3,1,"","Writes or deletes a single key."]},"tensorstore.KvStore.KeyRange":{__eq__:[169,3,1,"","Compares with another range for equality."],__init__:[170,3,1,"","Constructs a key range from the specified half-open bounds."],copy:[171,3,1,"","Returns a copy of the range."],empty:[172,5,1,"","Indicates if the range contains no keys."],exclusive_max:[173,5,1,"","Exclusive upper bound of the range."],inclusive_min:[174,5,1,"","Inclusive lower bound of the range."]},"tensorstore.KvStore.KeyRange.__init__":{exclusive_max:[170,4,2,"p-exclusive_max","Exclusive upper bound of the range."],inclusive_min:[170,4,2,"p-inclusive_min","Inclusive lower bound of the range."]},"tensorstore.KvStore.ReadResult":{__init__:[176,3,1,"","Constructs a read result."],stamp:[177,5,1,"","Generation and timestamp associated with the value."],state:[178,5,1,"","Indicates the interpretation of value."],value:[179,5,1,"","Value associated with the key."]},"tensorstore.KvStore.Spec":{__add__:[181,3,1,"","Returns a key-value store with the suffix appended to the path."],__new__:[182,3,1,"","Constructs from the JSON representation."],__repr__:[183,3,1,"","Returns a string representation based on the  JSON representation."],__truediv__:[184,3,1,"","Returns a key-value store with an additional path component joined to the path."],copy:[185,3,1,"","Returns a copy of the key-value store spec."],path:[186,5,1,"","Path prefix within the base key-value store."],to_json:[187,3,1,"","Converts to the JSON representation."],update:[188,3,1,"","Modifies a spec."]},"tensorstore.KvStore.Spec.update":{context:[188,4,2,"p-context","Bind any context resource specs using the specified shared resource context."],strip_context:[188,4,2,"p-strip_context","Replace any bound context resources and unbound context resource specs by\ndefault context resource specs."],unbind_context:[188,4,2,"p-unbind_context","Convert any bound context resources to context resource specs that fully capture\nthe graph of shared context resources and interdependencies."]},"tensorstore.KvStore.TimestampedStorageGeneration":{__eq__:[190,3,1,"","Compares two timestamped storage generations for equality."],__init__:[191,3,1,"","Constructs from a storage generation and time."],generation:[192,5,1,"","Identifies a specific version of a key-value store entry."],time:[193,5,1,"","Time (seconds since Unix epoch) at which generation is valid."]},"tensorstore.KvStore.__delitem__":{key:[194,4,2,"p-key","Key to delete."]},"tensorstore.KvStore.__getitem__":{key:[195,4,2,"p-key","The key to read."]},"tensorstore.KvStore.__setitem__":{key:[197,4,2,"p-key","Key to write/delete."],value:[197,4,2,"p-value","Value to store, or None to delete."]},"tensorstore.KvStore.delete_range":{range:[199,4,2,"p-range","Key range to delete."]},"tensorstore.KvStore.list":{range:[200,4,2,"p-range","If specified, restricts to the specified key range."],strip_prefix_length:[200,4,2,"p-strip_prefix_length","Strips the specified number of bytes from the start of\nthe returned keys."]},"tensorstore.KvStore.open":{context:[201,4,2,"p-context","Bind any context resource specs using the specified shared resource context."],spec:[201,4,2,"p-spec","Key-value store spec to open."],transaction:[201,4,2,"p-transaction","Transaction to use for read/write operations."]},"tensorstore.KvStore.read":{if_not_equal:[203,4,2,"p-if_not_equal","If specified, the read is aborted if the generation associated\nwith key matches if_not_equal."],key:[203,4,2,"p-key","The key to read."],staleness_bound:[203,4,2,"p-staleness_bound","Specifies a time in (fractional) seconds since the Unix\nepoch."]},"tensorstore.KvStore.spec":{retain_context:[204,4,2,"p-retain_context","Retain all bound context resources (e.g."],unbind_context:[204,4,2,"p-unbind_context","Convert any bound context resources to context resource specs that fully capture\nthe graph of shared context resources and interdependencies."]},"tensorstore.KvStore.write":{if_equal:[207,4,2,"p-if_equal","If specified, indicates a conditional write operation."],key:[207,4,2,"p-key","Key to write/delete."],value:[207,4,2,"p-value","Value to store, or None to delete."]},"tensorstore.OutputIndexMap":{"__init__(constant)":[209,3,1,"","Constructs a constant map."],"__init__(index_array)":[210,3,1,"","Constructs an index array map."],"__init__(input_dimension)":[211,3,1,"","Constructs a single input dimension map."],index_array:[212,5,1,"",""],index_range:[213,5,1,"",""],input_dimension:[214,5,1,"",""],method:[215,5,1,"",""],offset:[216,5,1,"",""],stride:[217,5,1,"",""]},"tensorstore.OutputIndexMaps":{__getitem__:[219,3,1,"",""],__len__:[220,3,1,"","Returns the output rank."],rank:[221,5,1,"","Returns the output rank."]},"tensorstore.OutputIndexMethod":{__init__:[223,3,1,"",""],__str__:[224,3,1,"","name(self: handle) -> str"],array:[225,6,1,"",""],constant:[226,6,1,"",""],name:[227,5,1,"",""],single_input_dimension:[228,6,1,"",""],value:[229,5,1,"",""]},"tensorstore.Promise":{"new":[231,3,1,"","Creates a linked promise and future pair."],set_exception:[232,3,1,"","Marks the linked future as unsuccessfully completed with the specified error."],set_result:[233,3,1,"","Marks the linked future as successfully completed with the specified result."]},"tensorstore.Schema":{"__getitem__(domain)":[237,3,1,"","Transforms the schema using an explicit index domain."],"__getitem__(expr)":[238,3,1,"","Transforms the schema using a dimension expression."],"__getitem__(indices)":[239,3,1,"","Transforms the schema using NumPy-style indexing with default index array semantics."],"__getitem__(transform)":[240,3,1,"","Transforms the schema using an explicit index transform."],"__init__(components)":[241,3,1,"","Constructs from component parts."],"__init__(json)":[242,3,1,"","Constructs from its JSON representation."],T:[235,5,1,"","View with transposed domain (reversed dimension order)."],__eq__:[236,3,1,"","Compares with another Schema for equality based on the JSON representation."],__repr__:[243,3,1,"","Returns a string representation based on the  JSON representation."],chunk_layout:[244,5,1,"","Chunk layout constraints specified by the schema."],codec:[245,5,1,"","Codec constraints specified by the schema."],copy:[246,3,1,"","Returns a copy of the schema."],dimension_units:[247,5,1,"","Physical units of each dimension of the domain."],domain:[248,5,1,"","Domain of the schema, or None if unspecified."],dtype:[249,5,1,"","Data type, or None if unspecified."],fill_value:[250,5,1,"","Fill value specified by the schema."],ndim:[251,5,1,"","Alias for rank."],oindex:[252,3,1,"","Transforms the schema using NumPy-style indexing with outer indexing semantics."],origin:[253,5,1,"","Inclusive lower bound of the domain."],rank:[254,5,1,"","Rank of the schema, or None if unspecified."],shape:[255,5,1,"","Shape of the domain."],size:[256,5,1,"","Total number of elements in the domain."],to_json:[257,3,1,"","Converts to the JSON representation."],update:[258,3,1,"","Adds additional constraints."],vindex:[259,3,1,"","Transforms the schema using NumPy-style indexing with vectorized indexing semantics."]},"tensorstore.Schema.__getitem__(domain)":{domain:[237,4,2,"p-domain","Index domain, must have dimension labels that can be\naligned to self.domain."]},"tensorstore.Schema.__getitem__(transform)":{transform:[240,4,2,"p-transform","Index transform, transform.output_rank must equal\nself.rank."]},"tensorstore.Schema.__init__(components)":{chunk_layout:[241,4,2,"p-chunk_layout","Constrains the chunk layout."],codec:[241,4,2,"p-codec","Constrains the codec."],dimension_units:[241,4,2,"p-dimension_units","Specifies the physical units of each dimension of the domain."],domain:[241,4,2,"p-domain","Constrains the domain of the TensorStore."],dtype:[241,4,2,"p-dtype","Constrains the data type of the TensorStore."],fill_value:[241,4,2,"p-fill_value","Specifies the fill value for positions that have not been written."],rank:[241,4,2,"p-rank","Constrains the rank of the TensorStore."],schema:[241,4,2,"p-schema","Additional schema constraints to merge with existing constraints."],shape:[241,4,2,"p-shape","Constrains the shape and origin of the TensorStore."]},"tensorstore.Schema.update":{chunk_layout:[258,4,2,"p-chunk_layout","Constrains the chunk layout."],codec:[258,4,2,"p-codec","Constrains the codec."],dimension_units:[258,4,2,"p-dimension_units","Specifies the physical units of each dimension of the domain."],domain:[258,4,2,"p-domain","Constrains the domain of the TensorStore."],dtype:[258,4,2,"p-dtype","Constrains the data type of the TensorStore."],fill_value:[258,4,2,"p-fill_value","Specifies the fill value for positions that have not been written."],rank:[258,4,2,"p-rank","Constrains the rank of the TensorStore."],schema:[258,4,2,"p-schema","Additional schema constraints to merge with existing constraints."],shape:[258,4,2,"p-shape","Constrains the shape and origin of the TensorStore."]},"tensorstore.Spec":{"__getitem__(domain)":[263,3,1,"","Transforms the spec using an explicit index domain."],"__getitem__(expr)":[264,3,1,"","Transforms the spec using a dimension expression."],"__getitem__(indices)":[265,3,1,"","Transforms the spec using NumPy-style indexing with default index array semantics."],"__getitem__(transform)":[266,3,1,"","Transforms the spec using an explicit index transform."],T:[261,5,1,"","View with transposed domain (reversed dimension order)."],__eq__:[262,3,1,"","Compares with another Spec for equality based on the JSON representation."],__new__:[267,3,1,"","Constructs from the JSON representation."],__repr__:[268,3,1,"","Returns a string representation based on the JSON representation."],chunk_layout:[269,5,1,"","Effective chunk layout, including any constraints implied\nby driver-specific options."],codec:[270,5,1,"","Effective codec, including any constraints implied\nby driver-specific options."],copy:[271,3,1,"","Returns a copy of the spec."],dimension_units:[272,5,1,"","Effective physical units of each dimension of the domain, including any\nconstraints implied by driver-specific options."],domain:[273,5,1,"","Effective index domain, including any constraints implied\nby driver-specific options."],dtype:[274,5,1,"","Data type, or None if unspecified."],fill_value:[275,5,1,"","Effective fill value, including any constraints implied by driver-specific\noptions."],kvstore:[276,5,1,"","Spec of the associated key-value store used as the underlying storage."],ndim:[277,5,1,"","Alias for rank."],oindex:[278,3,1,"","Transforms the spec using NumPy-style indexing with outer indexing semantics."],origin:[279,5,1,"","Inclusive lower bound of the domain."],rank:[280,5,1,"","Returns the rank of the domain, or None if unspecified."],schema:[281,5,1,"","Effective schema, including any constraints implied by driver-specific options."],shape:[282,5,1,"","Shape of the domain."],size:[283,5,1,"","Total number of elements in the domain."],to_json:[284,3,1,"","Converts to the JSON representation."],transform:[285,5,1,"","The index transform, or None if unspecified."],update:[286,3,1,"","Adds additional constraints or changes the open mode."],vindex:[287,3,1,"","Transforms the spec using NumPy-style indexing with vectorized indexing semantics."]},"tensorstore.Spec.__getitem__(domain)":{domain:[263,4,2,"p-domain","Index domain, must have dimension labels that can be\naligned to self.domain."]},"tensorstore.Spec.__getitem__(transform)":{transform:[266,4,2,"p-transform","Index transform, transform.output_rank must equal\nself.rank."]},"tensorstore.Spec.update":{chunk_layout:[286,4,2,"p-chunk_layout","Constrains the chunk layout."],codec:[286,4,2,"p-codec","Constrains the codec."],context:[286,4,2,"p-context","Bind any context resource specs using the specified shared resource context."],create:[286,4,2,"p-create","Allow creating a new TensorStore."],delete_existing:[286,4,2,"p-delete_existing","Delete any existing data before creating a new array."],dimension_units:[286,4,2,"p-dimension_units","Specifies the physical units of each dimension of the domain."],domain:[286,4,2,"p-domain","Constrains the domain of the TensorStore."],dtype:[286,4,2,"p-dtype","Constrains the data type of the TensorStore."],fill_value:[286,4,2,"p-fill_value","Specifies the fill value for positions that have not been written."],kvstore:[286,4,2,"p-kvstore","Sets the associated key-value store used as the underlying storage."],open:[286,4,2,"p-open","Allow opening an existing TensorStore."],rank:[286,4,2,"p-rank","Constrains the rank of the TensorStore."],schema:[286,4,2,"p-schema","Additional schema constraints to merge with existing constraints."],shape:[286,4,2,"p-shape","Constrains the shape and origin of the TensorStore."],strip_context:[286,4,2,"p-strip_context","Replace any bound context resources and unbound context resource specs by\ndefault context resource specs."],unbind_context:[286,4,2,"p-unbind_context","Convert any bound context resources to context resource specs that fully capture\nthe graph of shared context resources and interdependencies."]},"tensorstore.TensorStore":{"__getitem__(domain)":[291,3,1,"","Computes a virtual view using an explicit index domain."],"__getitem__(expr)":[292,3,1,"","Computes a virtual view using a dimension expression."],"__getitem__(indices)":[293,3,1,"","Computes a virtual view using NumPy-style indexing with default index array semantics."],"__getitem__(transform)":[294,3,1,"","Computes a virtual view using an explicit index transform."],"__setitem__(domain)":[295,3,1,"","Synchronously writes using an explicit index domain."],"__setitem__(expr)":[296,3,1,"","Synchronously writes using a dimension expression."],"__setitem__(indices)":[297,3,1,"","Synchronously writes using NumPy-style indexing with default index array semantics."],"__setitem__(transform)":[298,3,1,"","Synchronously writes using an explicit index transform."],T:[289,5,1,"","View with transposed domain (reversed dimension order)."],__array__:[290,3,1,"","Automatic conversion to numpy.ndarray for interoperability with NumPy."],astype:[299,3,1,"","Returns a read/write view as the specified data type."],chunk_layout:[300,5,1,"","Chunk layout of the TensorStore."],codec:[301,5,1,"","Data codec spec."],dimension_units:[302,5,1,"","Physical units of each dimension of the domain."],domain:[303,5,1,"","Domain of the array."],dtype:[304,5,1,"","Data type of the array."],fill_value:[305,5,1,"","Fill value for positions not yet written."],kvstore:[306,5,1,"","Associated key-value store used as the underlying storage."],mode:[307,5,1,"","Read/write mode."],ndim:[308,5,1,"","Alias for rank."],oindex:[309,3,1,"","Computes a virtual view using NumPy-style indexing with outer indexing semantics."],origin:[311,5,1,"","Inclusive lower bound of the domain."],rank:[312,5,1,"","Number of dimensions in the domain."],read:[313,3,1,"","Reads the data within the current domain."],readable:[314,5,1,"","Indicates if reading is supported."],resolve:[315,3,1,"","Obtains updated bounds, subject to the cache policy."],schema:[316,5,1,"","Schema of this TensorStore."],shape:[317,5,1,"","Shape of the domain."],size:[318,5,1,"","Total number of elements in the domain."],spec:[319,3,1,"","Spec that may be used to re-open or re-create the TensorStore."],transaction:[320,5,1,"","Associated transaction used for read/write operations."],vindex:[321,3,1,"","Computes a virtual view using NumPy-style indexing with vectorized indexing semantics."],with_transaction:[323,3,1,"","Returns a transaction-bound view of this TensorStore."],writable:[324,5,1,"","Indicates if writing is supported."],write:[325,3,1,"","Writes to the current domain."]},"tensorstore.TensorStore.__getitem__(domain)":{domain:[291,4,2,"p-domain","Index domain, must have dimension labels that can be\naligned to self.domain."]},"tensorstore.TensorStore.__getitem__(transform)":{transform:[294,4,2,"p-transform","Index transform, transform.output_rank must equal\nself.rank."]},"tensorstore.TensorStore.__setitem__(domain)":{source:[295,4,2,"p-source","Source array, broadcast-compatible with\nself.domain[transform] and with a data type convertible to\nself.dtype."],transform:[295,4,2,"p-transform","Index transform, transform.output_rank must equal\nself.rank."]},"tensorstore.TensorStore.__setitem__(indices)":{indices:[297,4,2,"p-indices","NumPy-style indexing terms."],source:[297,4,2,"p-source","Source array, broadcast-compatible with\nself[indices].domain and with a data type convertible to\nself.dtype."]},"tensorstore.TensorStore.__setitem__(transform)":{source:[298,4,2,"p-source","Source array, broadcast-compatible with\nself.domain[transform] and with a data type convertible to\nself.dtype."],transform:[298,4,2,"p-transform","Index transform, transform.output_rank must equal\nself.rank."]},"tensorstore.TensorStore.oindex":{__setitem__:[310,3,1,"","Synchronously writes using NumPy-style indexing with outer indexing semantics."]},"tensorstore.TensorStore.oindex.__setitem__":{indices:[310,4,2,"p-indices","NumPy-style indexing terms."],source:[310,4,2,"p-source","Source array, broadcast-compatible with\nself.oindex[indices].domain and with a data type convertible to\nself.dtype."]},"tensorstore.TensorStore.read":{order:[313,4,2,"p-order","Contiguous layout order of the returned array:"]},"tensorstore.TensorStore.spec":{create:[319,4,2,"p-create","Allow creating a new TensorStore."],delete_existing:[319,4,2,"p-delete_existing","Delete any existing data before creating a new array."],minimal_spec:[319,4,2,"p-minimal_spec","Indicates whether to include in the returned Spec the\nmetadata necessary to re-create the TensorStore."],open:[319,4,2,"p-open","Allow opening an existing TensorStore."],retain_context:[319,4,2,"p-retain_context","Retain all bound context resources (e.g."],unbind_context:[319,4,2,"p-unbind_context","Convert any bound context resources to context resource specs that fully capture\nthe graph of shared context resources and interdependencies."]},"tensorstore.TensorStore.vindex":{__setitem__:[322,3,1,"","Synchronously writes using NumPy-style indexing with vectorized indexing semantics."]},"tensorstore.TensorStore.vindex.__setitem__":{indices:[322,4,2,"p-indices","NumPy-style indexing terms."],source:[322,4,2,"p-source","Source array, broadcast-compatible with\nself.vindex[indices].domain and with a data type convertible to\nself.dtype."]},"tensorstore.TensorStore.write":{source:[325,4,2,"p-source","Source array, broadcast-compatible with\nself.domain and with a data type convertible to\nself.dtype."]},"tensorstore.Transaction":{__init__:[327,3,1,"","Creates a new transaction."],abort:[328,3,1,"","Aborts the transaction."],aborted:[329,5,1,"","Indicates whether the transaction has been aborted."],atomic:[330,5,1,"","Indicates whether the transaction is atomic."],commit_async:[331,3,1,"","Asynchronously commits the transaction."],commit_started:[332,5,1,"","Indicates whether the commit of the transaction has already started."],commit_sync:[333,3,1,"","Synchronously commits the transaction."],future:[334,5,1,"","Commit result future."],open:[335,5,1,"","Indicates whether the transaction is still open."]},"tensorstore.Unit":{"__init__(components)":[338,3,1,"","Constructs a unit from a multiplier and base unit."],"__init__(json)":[339,3,1,"","Constructs a unit from its JSON representation."],"__init__(multiplier)":[340,3,1,"","Constructs a dimension-less quantity of the specified value."],"__init__(pair)":[341,3,1,"","Constructs a unit from a multiplier and base unit pair."],"__init__(unit)":[342,3,1,"","Constructs a unit from a string."],__eq__:[337,3,1,"","Compares two units for equality."],__mul__:[343,3,1,"","Multiplies this unit by the specified multiplier."],__truediv__:[344,3,1,"","Divides this unit by the specified divisor."],base_unit:[345,5,1,"","Base unit from which this unit is derived."],multiplier:[346,5,1,"","Multiplier for the base_unit."],to_json:[347,3,1,"","Converts to the JSON representation."]},"tensorstore.VirtualChunkedReadParameters":{if_not_equal:[349,5,1,"","Cached generation, read request can be skipped if no newer data is available."],staleness_bound:[350,5,1,"","Read may be fulfilled with cached data no older than the specified bound."]},"tensorstore.VirtualChunkedWriteParameters":{if_equal:[352,5,1,"","If non-empty, writeback should be conditioned on the existing data matching the specified generation."]},"tensorstore.WriteFutures":{add_done_callback:[354,3,1,"",""],cancel:[355,3,1,"",""],cancelled:[356,3,1,"",""],commit:[357,5,1,"",""],copy:[358,5,1,"",""],done:[359,3,1,"",""],exception:[360,3,1,"",""],remove_done_callback:[361,3,1,"",""],result:[362,3,1,"",""]},"tensorstore.array":{array:[363,4,2,"p-array","Source array."],context:[363,4,2,"p-context","Context to use."],dtype:[363,4,2,"p-dtype","Data type to which array will be converted."]},"tensorstore.d":{__class_getitem__:[370,3,1,"","Constructs from a sequence of dimension indices, ranges, and/or labels."]},"tensorstore.dtype":{"__init__(dtype)":[375,3,1,"","Construct from an existing TensorStore or NumPy data type."],"__init__(name)":[376,3,1,"","Construct by name."],__call__:[374,3,1,"","Construct a scalar instance of this data type"],name:[377,5,1,"",""],numpy_dtype:[378,5,1,"",""],to_json:[379,3,1,"",""],type:[380,5,1,"",""]},"tensorstore.open":{chunk_layout:[391,4,2,"p-chunk_layout","Constrains the chunk layout."],codec:[391,4,2,"p-codec","Constrains the codec."],context:[391,4,2,"p-context","Shared resource context."],create:[391,4,2,"p-create","Allow creating a new TensorStore."],delete_existing:[391,4,2,"p-delete_existing","Delete any existing data before creating a new array."],dimension_units:[391,4,2,"p-dimension_units","Specifies the physical units of each dimension of the domain."],domain:[391,4,2,"p-domain","Constrains the domain of the TensorStore."],dtype:[391,4,2,"p-dtype","Constrains the data type of the TensorStore."],fill_value:[391,4,2,"p-fill_value","Specifies the fill value for positions that have not been written."],kvstore:[391,4,2,"p-kvstore","Sets the associated key-value store used as the underlying storage."],open:[391,4,2,"p-open","Allow opening an existing TensorStore."],rank:[391,4,2,"p-rank","Constrains the rank of the TensorStore."],read:[391,4,2,"p-read","Allow read access."],schema:[391,4,2,"p-schema","Additional schema constraints to merge with existing constraints."],shape:[391,4,2,"p-shape","Constrains the shape and origin of the TensorStore."],spec:[391,4,2,"p-spec","TensorStore Spec to open."],transaction:[391,4,2,"p-transaction","Transaction to use for opening/creating, and for subsequent operations."],write:[391,4,2,"p-write","Allow write access."]},"tensorstore.virtual_chunked":{chunk_layout:[398,4,2,"p-chunk_layout","Constrains the chunk layout."],context:[398,4,2,"p-context","Shared resource context."],dimension_units:[398,4,2,"p-dimension_units","Specifies the physical units of each dimension of the domain."],domain:[398,4,2,"p-domain","Constrains the domain of the TensorStore."],dtype:[398,4,2,"p-dtype","Constrains the data type of the TensorStore."],loop:[398,4,2,"p-loop","Event loop on which to execute read_function and/or\nwrite_function if they are\nasync functions."],rank:[398,4,2,"p-rank","Constrains the rank of the TensorStore."],read_function:[398,4,2,"p-read_function","Callback that handles chunk read requests."],schema:[398,4,2,"p-schema","Additional schema constraints to merge with existing constraints."],shape:[398,4,2,"p-shape","Constrains the shape and origin of the TensorStore."],transaction:[398,4,2,"p-transaction","Transaction to use for opening/creating, and for subsequent operations."],write_function:[398,4,2,"p-write_function","Callback that handles chunk write requests."]},ChunkLayout:{chunk:[401,1,2,"json-ChunkLayout.chunk","Combined constraints on write/read/codec chunks."],codec_chunk:[401,1,2,"json-ChunkLayout.codec_chunk","Constraints on the chunk grid used by the codec, if applicable."],grid_origin:[401,1,2,"json-ChunkLayout.grid_origin","Specifies hard constraints on the origin of the chunk grid."],grid_origin_soft_constraint:[401,1,2,"json-ChunkLayout.grid_origin_soft_constraint","Specifies preferred values for the origin of the chunk grid rather than\nhard constraints."],inner_order:[401,1,2,"json-ChunkLayout.inner_order","Permutation specifying the element storage order within the innermost\nchunks."],inner_order_soft_constraint:[401,1,2,"json-ChunkLayout.inner_order_soft_constraint","Specifies a preferred value for inner_order rather than a\nhard constraint.  If inner_order is also specified, it\ntakes precedence."],read_chunk:[401,1,2,"json-ChunkLayout.read_chunk","Constraints on the chunk grid over which reads may be efficiently\npartitioned."],write_chunk:[401,1,2,"json-ChunkLayout.write_chunk","Constraints on the chunk grid over which writes may be efficiently\npartitioned."]},Codec:{driver:[401,1,2,"json-Codec.driver","Driver identifier"]},Context:{"&lt;resource-type&gt;":[0,1,2,"json-Context.<resource-type>",null],"&lt;resource-type&gt;#&lt;id&gt;":[0,1,2,"json-Context.<resource-type>#<id>",null],cache_pool:[0,0,1,"json-Context.cache_pool",""],data_copy_concurrency:[0,0,1,"json-Context.data_copy_concurrency",""],file_io_concurrency:[0,0,1,"json-Context.file_io_concurrency",""],gcs_request_concurrency:[14,0,1,"json-Context.gcs_request_concurrency",""],gcs_request_retries:[14,0,1,"json-Context.gcs_request_retries",""],gcs_user_project:[14,0,1,"json-Context.gcs_user_project",""],memory_key_value_store:[16,0,1,"json-Context.memory_key_value_store",""]},DownsampleMethod:{max:[3,1,2,"json-DownsampleMethod.max",""],mean:[3,1,2,"json-DownsampleMethod.mean",""],median:[3,1,2,"json-DownsampleMethod.median",""],min:[3,1,2,"json-DownsampleMethod.min",""],mode:[3,1,2,"json-DownsampleMethod.mode",""],stride:[3,1,2,"json-DownsampleMethod.stride",""]},IndexDomain:{exclusive_max:[11,1,2,"json-IndexDomain.exclusive_max","Exclusive upper bounds of the domain."],inclusive_max:[11,1,2,"json-IndexDomain.inclusive_max","Inclusive upper bounds of the domain."],inclusive_min:[11,1,2,"json-IndexDomain.inclusive_min","Inclusive lower bounds of the domain."],labels:[11,1,2,"json-IndexDomain.labels","Dimension labels for each dimension."],rank:[11,1,2,"json-IndexDomain.rank","Number of dimensions."],shape:[11,1,2,"json-IndexDomain.shape","Extent of each dimension of the domain."]},IndexTransform:{input_exclusive_max:[11,1,2,"json-IndexTransform.input_exclusive_max","Exclusive upper bounds of the input domain."],input_inclusive_max:[11,1,2,"json-IndexTransform.input_inclusive_max","Inclusive upper bounds of the input domain."],input_inclusive_min:[11,1,2,"json-IndexTransform.input_inclusive_min","Inclusive lower bounds of the input domain."],input_labels:[11,1,2,"json-IndexTransform.input_labels","Dimension labels for each input domain dimension."],input_rank:[11,1,2,"json-IndexTransform.input_rank","Number of input dimensions."],input_shape:[11,1,2,"json-IndexTransform.input_shape","Extent of each dimension of the input domain."],output:[11,1,2,"json-IndexTransform.output","Specifies the output index map for each output dimension."]},KeyValueStoreBackedChunkDriver:{cache_pool:[4,1,2,"json-KeyValueStoreBackedChunkDriver.cache_pool",""],context:[4,1,2,"json-KeyValueStoreBackedChunkDriver.context","Specifies context resources that augment/override the parent context."],create:[4,1,2,"json-KeyValueStoreBackedChunkDriver.create",""],data_copy_concurrency:[4,1,2,"json-KeyValueStoreBackedChunkDriver.data_copy_concurrency",""],delete_existing:[4,1,2,"json-KeyValueStoreBackedChunkDriver.delete_existing",""],driver:[4,1,2,"json-KeyValueStoreBackedChunkDriver.driver","Driver identifier"],dtype:[4,1,2,"json-KeyValueStoreBackedChunkDriver.dtype","Specifies the data type."],kvstore:[4,1,2,"json-KeyValueStoreBackedChunkDriver.kvstore",""],open:[4,1,2,"json-KeyValueStoreBackedChunkDriver.open",""],path:[4,1,2,"json-KeyValueStoreBackedChunkDriver.path","Additional path within the KvStore specified by\nkvstore."],rank:[4,1,2,"json-KeyValueStoreBackedChunkDriver.rank","Specifies the rank of the TensorStore."],recheck_cached_data:[4,1,2,"json-KeyValueStoreBackedChunkDriver.recheck_cached_data",""],recheck_cached_metadata:[4,1,2,"json-KeyValueStoreBackedChunkDriver.recheck_cached_metadata",""],schema:[4,1,2,"json-KeyValueStoreBackedChunkDriver.schema","Specifies constraints on the schema."],transform:[4,1,2,"json-KeyValueStoreBackedChunkDriver.transform","Specifies a transform."]},KvStore:{context:[15,1,2,"json-KvStore.context",""],driver:[15,1,2,"json-KvStore.driver","Key-value store driver identifier"],path:[15,1,2,"json-KvStore.path","Key prefix within the key-value store."]},OutputIndexMap:{index_array:[11,1,2,"json-OutputIndexMap.index_array","If present, indicates that this output dimension uses an index\narray map, with the index array specified as a nested list of rank\nequal to the input_rank."],index_array_bounds:[11,1,2,"json-OutputIndexMap.index_array_bounds",""],input_dimension:[11,1,2,"json-OutputIndexMap.input_dimension","If present, indicates that this output dimension uses a single\ninput dimension map with the specified input dimension.  Must not\nbe specified in conjunction with index_array."],offset:[11,1,2,"json-OutputIndexMap.offset","Specifies an offset for this output dimension.  If neither\ninput_dimension nor index_array is\nspecified, this specifies the constant value to which this output\ndimension maps."],stride:[11,1,2,"json-OutputIndexMap.stride","Multiplier for the input index specified by\ninput_dimension or the index array value specified by\nindex_array."]},Schema:{chunk_layout:[401,1,2,"json-Schema.chunk_layout","Data storage layout constraints."],codec:[401,1,2,"json-Schema.codec",""],dimension_units:[401,1,2,"json-Schema.dimension_units","Physical units of each dimension."],domain:[401,1,2,"json-Schema.domain","Domain of the TensorStore, including bounds and optional dimension labels."],dtype:[401,1,2,"json-Schema.dtype","Specifies the data type of the TensorStore."],fill_value:[401,1,2,"json-Schema.fill_value","Fill value to use for missing data."],rank:[401,1,2,"json-Schema.rank","Number of dimensions."]},TensorStore:{context:[402,1,2,"json-TensorStore.context","Specifies context resources that augment/override the parent context."],driver:[402,1,2,"json-TensorStore.driver","Driver identifier"],dtype:[402,1,2,"json-TensorStore.dtype","Specifies the data type."],rank:[402,1,2,"json-TensorStore.rank","Specifies the rank of the TensorStore."],schema:[402,1,2,"json-TensorStore.schema","Specifies constraints on the schema."],transform:[402,1,2,"json-TensorStore.transform","Specifies a transform."]},dtype:{"byte":[402,1,2,"json-dtype.byte","Single byte."],"char":[402,1,2,"json-dtype.char","Single byte, interpreted as an ASCII character."],bfloat16:[402,1,2,"json-dtype.bfloat16","bfloat16 floating-point format number."],bool:[402,1,2,"json-dtype.bool","Boolean value (0 or 1)."],complex128:[402,1,2,"json-dtype.complex128","Complex number, where the real and imaginary components are each\nrepresented by a float64."],complex64:[402,1,2,"json-dtype.complex64","Complex number, where the real and imaginary components are each\nrepresented by a float32."],float16:[402,1,2,"json-dtype.float16","IEEE 754 binary16\nhalf-precision floating-point number."],float32:[402,1,2,"json-dtype.float32","IEEE 754 binary32\nsingle-precision floating-point number."],float64:[402,1,2,"json-dtype.float64","IEEE 754 binary64\ndouble-precision floating-point number."],int16:[402,1,2,"json-dtype.int16","16-bit signed two's-complement integer."],int32:[402,1,2,"json-dtype.int32","32-bit signed two's-complement integer."],int64:[402,1,2,"json-dtype.int64","64-bit signed two's-complement integer."],int8:[402,1,2,"json-dtype.int8","8-bit signed two's-complement integer."],json:[402,1,2,"json-dtype.json","JSON value."],string:[402,1,2,"json-dtype.string","Byte string."],uint16:[402,1,2,"json-dtype.uint16","16-bit unsigned integer."],uint32:[402,1,2,"json-dtype.uint32","32-bit unsigned integer."],uint64:[402,1,2,"json-dtype.uint64","64-bit unsigned integer."],uint8:[402,1,2,"json-dtype.uint8","8-bit unsigned integer."],ustring:[402,1,2,"json-dtype.ustring","Unicode string (represented in memory as UTF-8)."]},tensorstore:{"downsample(spec)":[371,7,1,"","Returns a virtual downsampled view view of a Spec."],"downsample(store)":[372,7,1,"","Returns a virtual downsampled view of a TensorStore."],ChunkLayout:[18,2,1,"","Describes the storage layout of a tensorstore.TensorStore."],CodecSpec:[49,2,1,"","Specifies driver-specific encoding/decoding parameters."],Context:[52,2,1,"","Manages shared TensorStore context resources, such as caches and credentials."],Dim:[64,2,1,"","1-d index interval with optionally-implicit bounds and dimension label."],DimExpression:[88,2,1,"","Specifies an advanced indexing operation."],Future:[99,2,1,"","Handle for consuming the result of an asynchronous operation."],FutureLike:[109,2,1,"","Abstract base class for types representing an asynchronous result."],IndexDomain:[110,2,1,"","Domain (including bounds and optional dimension labels) of an N-dimensional index space."],IndexTransform:[136,2,1,"","Represents a transform from an input index space to an output space."],Indexable:[166,2,1,"","Abstract base class for types that support TensorStore indexing operations."],KvStore:[167,2,1,"","Key-value store that maps an ordered set of byte string keys to byte string values."],OutputIndexMap:[208,2,1,"","Represents an output index map for an index transform."],OutputIndexMaps:[218,2,1,"","View of the output index maps for an index transform."],OutputIndexMethod:[222,2,1,"","Indicates the output index method of an OutputIndexMap."],Promise:[230,2,1,"","Handle for producing the result of an asynchronous operation."],Schema:[234,2,1,"","Driver-independent options for defining a TensorStore schema."],Spec:[260,2,1,"","Specification for opening or creating a TensorStore."],TensorStore:[288,2,1,"","Asynchronous multi-dimensional array handle."],Transaction:[326,2,1,"","Transactions are used to stage a group of modifications (e.g. writes to\ntensorstore.TensorStore objects) in memory, and then either commit the\ngroup all at once or abort it."],Unit:[336,2,1,"","Specifies a physical quantity/unit."],VirtualChunkedReadParameters:[348,2,1,"","Options passed to read callbacks used with virtual_chunked."],VirtualChunkedWriteParameters:[351,2,1,"","Options passed to write callbacks used with virtual_chunked."],WriteFutures:[353,2,1,"","Handle for consuming the result of an asynchronous write operation."],array:[363,7,1,"","Returns a TensorStore that reads/writes from an in-memory array."],bfloat16:[364,8,1,"","bfloat16 floating-point data type."],bool:[365,8,1,"","Boolean data type (0 or 1).  Corresponds to the python:bool type and numpy.bool_."],cast:[366,7,1,"","Returns a read/write view as the specified data type."],complex128:[367,8,1,"","Complex number based on float64.  Corresponds to numpy.complex128."],complex64:[368,8,1,"","Complex number based on float32.  Corresponds to numpy.complex64."],d:[369,2,1,"","Specifies a dimension selection, for starting a dimension expression."],dtype:[373,2,1,"","TensorStore data type representation."],float16:[381,8,1,"","IEEE 754 binary16 half-precision floating-point data type.  Correspond to numpy.float16."],float32:[382,8,1,"","IEEE 754 binary32 single-precision floating-point data type.  Corresponds to numpy.float32."],float64:[383,8,1,"","IEEE 754 binary64 double-precision floating-point data type.  Corresponds to numpy.float64."],inf:[384,8,1,"","Special constant equal to 2^{62}-1 that indicates an unbounded index domain."],int16:[385,8,1,"","16-bit signed two's-complement integer data type.  Corresponds to numpy.int16."],int32:[386,8,1,"","32-bit signed two's-complement integer data type.  Corresponds to numpy.int32."],int64:[387,8,1,"","32-bit signed two's-complement integer data type.  Corresponds to numpy.int64."],int8:[388,8,1,"","8-bit signed two's-complement integer data type.  Corresponds to numpy.int8."],json:[389,8,1,"","JSON data type.  Corresponds to an arbitrary Python JSON value."],newaxis:[390,8,1,"","Alias for None used in indexing expressions to specify a new singleton dimension."],open:[391,7,1,"","Opens or creates a TensorStore from a Spec."],string:[392,8,1,"","Variable-length byte string data type.  Corresponds to the Python python:bytes type."],uint16:[393,8,1,"","16-bit unsigned integer.  Corresponds to numpy.uint16."],uint32:[394,8,1,"","32-bit unsigned integer.  Corresponds to numpy.uint32."],uint64:[395,8,1,"","64-bit unsigned integer data type.  Corresponds to numpy.uint64."],uint8:[396,8,1,"","8-bit unsigned integer.  Corresponds to numpy.uint8."],ustring:[397,8,1,"","Variable-length Unicode string data type.  Corresponds to the Python python:str type."],virtual_chunked:[398,7,1,"","Creates a TensorStore where the content is read/written chunk-wise by an arbitrary function."]}},objnames:{"0":["json","schema","JSON type"],"1":["json","subschema","JSON member"],"2":["py","class","Python class"],"3":["py","method","Python method"],"4":["py","parameter","Python parameter"],"5":["py","property","Python property"],"6":["py","attribute","Python attribute"],"7":["py","function","Python function"],"8":["py","data","Python data"],"9":["std","envvar","environment variable"]},objtypes:{"0":"json:schema","1":"json:subschema","2":"py:class","3":"py:method","4":"py:parameter","5":"py:property","6":"py:attribute","7":"py:function","8":"py:data","9":"std:envvar"},terms:{"0":[0,1,2,3,4,5,6,7,8,11,12,17,34,39,41,42,45,46,70,74,80,84,89,90,91,92,93,94,95,96,97,98,99,111,112,113,114,115,116,117,122,127,138,139,140,141,142,143,144,145,147,158,164,165,200,208,209,210,211,222,226,237,238,239,240,241,242,244,248,252,254,257,259,263,264,265,266,273,278,281,284,285,286,287,288,291,292,293,294,295,296,297,298,299,300,301,303,309,310,313,316,319,321,322,325,326,347,365,366,370,390,391,398,399,400,401,402],"03":12,"0x":400,"0x8":[391,400],"1":[0,1,3,6,7,8,11,12,14,17,34,39,41,42,45,46,64,65,66,72,77,78,80,81,82,83,84,85,89,90,91,92,93,94,95,96,97,98,99,111,112,113,114,115,121,122,125,126,127,128,129,131,133,134,137,138,139,140,141,142,143,144,145,150,151,152,153,154,158,161,164,165,210,211,222,228,235,237,238,239,240,241,242,244,247,252,254,257,259,261,265,266,272,281,284,285,288,289,291,292,293,294,296,297,298,299,300,301,302,308,309,310,312,316,319,321,322,325,326,336,340,342,365,366,370,384,390,391,398,399,400,401,402],"10":[8,11,12,13,62,63,64,65,66,67,68,69,70,75,77,78,79,83,84,89,94,95,96,111,118,127,139,164,238,239,252,259,264,265,278,287,288,290,292,293,295,296,297,309,310,313,321,322,325,391,399],"100":[6,7,8,11,44,45,48,119,130,132,237,238,239,240,248,252,259,269,277,280,281,284,285,286,301,302,305,306,316,398,400],"1000":[6,7,8,237,238,239,240,252,259,273,281,288,300,391,400],"10000":7,"1000000":45,"10000000":[0,54,58,62,63,391],"100000000":[0,398,400],"1000000000":7,"100_000_000":400,"100kb":6,"100mb":[398,400],"100x100x1":400,"101":398,"102":[6,8,300,391,398,400],"1020":7,"103":398,"104":398,"1049":288,"105":[44,48,284,285,398],"106":398,"11":[8,12,69,77,89,112,145,210,211,399],"1113":7,"1132030694":400,"1161117856":400,"1194100437":400,"12":[8,11,89,94,95,112,313,399],"1264":7,"128":[6,8],"13":[8,12,95,112,164,211],"14":[8,12,96,115],"1408314276":400,"1414":391,"15":[7,70,96,391,399,400],"15000":400,"15100":400,"159":[6,7,8],"16":[12,17,95,385,393,402],"17":[12,94,118,145],"18":95,"1nm":[7,401],"2":[1,3,5,6,7,8,11,12,17,41,42,45,64,72,89,90,91,92,93,94,95,96,97,98,99,111,112,113,114,115,116,121,122,123,124,125,126,127,128,129,131,133,134,138,139,140,141,143,144,145,148,149,150,151,152,153,154,158,164,165,210,211,222,225,237,238,239,240,241,242,244,246,252,254,257,259,266,277,280,281,285,288,293,294,296,297,298,299,300,308,309,310,312,319,321,322,325,326,343,344,366,370,384,390,391,398,399,400,401],"20":[7,11,79,89,94,95,96,239,252,259,265,278,287,290,293,309,321],"200":[6,7,8,44,45,48,119,130,132,237,238,239,240,248,252,259,269,272,277,280,281,284,285,286,302,306],"2000":[6,7,8,237,238,239,240,252,259,273,281,300,391],"20000":[288,400],"2000000":[6,7,8],"2019":12,"2030":7,"2048":7,"206":[44,48],"207":[44,48],"21":[12,399],"23":95,"25":96,"28":95,"29":12,"3":[1,3,6,7,8,11,12,41,42,64,72,80,85,87,89,90,91,92,93,94,95,96,97,98,99,100,111,112,113,114,115,116,119,121,122,123,124,125,126,127,128,129,130,131,132,133,134,139,140,141,142,143,144,145,147,148,149,150,151,152,153,154,155,156,157,158,161,164,165,210,236,237,238,239,240,241,242,246,247,249,251,252,254,257,258,259,265,266,278,281,287,293,294,296,298,299,308,309,312,321,322,326,337,338,339,340,341,343,344,345,346,347,366,370,390,398,399,400],"30":[7,89,303],"300":[6,7,8,44,48,119,130,132,237,238,239,240,248,252,259,269,272,281,286],"3000":[6,7,8,237,238,239,240,252,259,273,281,300,391],"300000":342,"30037":12,"3040":7,"307":[44,48],"32":[1,2,3,4,6,7,8,11,14,17,386,387,394,401,402],"34432":[7,391,400],"34452":7,"357":399,"37":12,"39552":[7,391,400],"39582":7,"3e5":342,"3nm":[247,337,347],"4":[0,1,3,6,7,8,11,65,72,78,83,89,92,94,95,96,97,98,111,113,114,115,121,122,123,124,125,126,127,128,129,131,133,134,139,143,144,145,147,148,149,150,151,152,153,154,155,156,157,161,164,240,247,266,294,297,298,308,312,322,326,342,366,398,399,400,401],"40":[6,7],"40000":7,"40nm":7,"41408":[391,400],"42":[5,8,100,236,250,275,288,295,305,316,325,326,391,398],"43":326,"44":326,"4443":14,"45":326,"46":12,"4611686018427387903":[17,83,84,384],"4611686018427387904":[77,78],"486000":401,"4_4_40":7,"4nm":[7,247,342,401],"5":[1,6,8,11,12,44,48,65,66,67,68,69,70,72,74,75,77,78,79,80,81,82,83,84,85,87,89,92,93,94,95,96,97,98,111,112,113,114,115,116,117,121,122,123,124,125,126,127,128,129,131,133,134,139,140,142,144,145,147,148,149,150,151,152,153,154,155,156,157,161,209,210,211,230,232,233,237,238,239,240,243,252,259,263,264,265,266,278,284,285,287,288,290,291,292,293,294,295,296,297,298,301,302,308,309,310,312,313,316,319,321,322,325,326,338,339,340,341,344,346,366,390,391,398,399,400,401],"50":[303,398],"500":[6,7,8],"50000":7,"5000000":[60,62,63],"512":7,"51508":7,"51548":7,"5813054053":400,"5e":401,"5nm":[302,343,345,346],"6":[1,3,6,7,8,11,12,44,48,66,72,89,92,93,94,95,96,98,111,112,113,114,115,117,121,122,123,124,127,128,139,141,144,148,149,150,158,165,237,238,239,263,264,265,288,291,292,293,294,295,296,297,298,308,310,312,322,325,326,391,398,399,400,401],"60":[134,263,264,291,292,295,296,321,401],"62":[11,17,64,384],"62662f87cdd9":12,"632":7,"64":[6,7,8,11,17,391,395,400,402],"6901":5,"7":[11,12,44,48,87,89,94,111,112,115,118,125,127,139,141,143,144,145,151,158,164,165,210,211,252,259,278,287,309,321,343,399],"70":[263,264,265,266,278,287,290,291,292,293,294,295,296,297,298,303,304,309,310,313,319,321,322,325],"707":391,"75":7,"754":[17,381,382,383,402],"77":14,"79":[6,7,8],"7nm":344,"8":[0,7,11,12,17,89,93,94,95,111,112,115,118,121,127,139,141,142,143,145,150,158,164,165,237,252,259,263,278,287,288,291,295,297,302,309,310,313,321,322,325,388,391,396,399,400,402],"80":[12,263,264,265,266,278,287,290,291,292,293,294,295,296,297,298,303,304,309,310,313,319,321,322,325,400],"81":7,"82":400,"83":400,"8_8_8":7,"8nm":302,"9":[3,6,7,8,11,12,67,89,111,115,127,139,211,237,238,263,264,291,292,295,296,297,391,399,400,401],"90":401,"9223372036854775807":87,"9223372036854775808":401,"99":400,"9m":401,"abstract":[10,17,109,136,166],"boolean":[4,6,7,8,16,17,92,158,252,278,309,310,365,402],"byte":[0,6,8,17,167,168,175,179,189,192,195,200,348,349,351,352,392,402],"case":[3,8,9,11,12,14,93,94,95,96,111,127,136,139,170,173,203,294,399,401],"char":402,"class":[17,19,49,53,55,64,88,99,109,110,117,136,166,168,175,180,189,208,218,222,230,234,260,288,326,336,348,351,353,369,373,399],"default":[0,4,5,6,7,8,9,11,12,14,52,57,59,60,61,68,69,70,88,89,100,116,136,141,143,167,188,201,204,234,239,260,265,286,288,293,297,319,369,391,398,399,401],"do":[1,2,3,4,5,6,7,8,11,399,402],"export":12,"final":[7,34,46],"float":[17,19,21,23,24,32,34,46,99,105,108,189,191,193,203,336,338,340,341,343,344,346,348,350,353,360,362,364,381,382,383,398,401,402],"function":[3,7,11,17,110,398,400],"import":400,"int":[17,18,19,21,25,26,27,28,29,30,32,34,37,38,39,40,41,42,46,64,66,68,69,70,73,77,78,83,84,87,88,93,94,95,96,99,107,110,113,116,119,121,125,126,130,131,132,133,134,136,138,143,150,151,152,154,155,156,157,159,161,162,163,200,208,209,210,211,214,216,217,218,219,220,221,222,223,229,234,241,251,253,254,255,256,258,260,277,279,280,282,283,286,288,308,311,312,317,318,353,361,369,371,372,384,391,398,399],"new":[0,1,2,3,4,5,10,11,17,60,61,89,90,91,93,94,95,96,103,110,114,115,167,188,204,207,230,231,232,233,237,238,239,240,241,244,247,252,258,259,263,264,265,266,278,286,287,301,316,319,326,327,390,398,399,400,401,402],"null":[0,7,8,392,397,401],"public":[14,400],"return":[3,4,5,6,7,8,11,17,53,54,55,57,58,59,60,61,64,74,75,76,89,91,92,93,94,95,96,97,98,99,100,105,108,110,113,114,115,119,120,135,136,138,146,164,167,168,171,180,181,183,184,185,195,196,198,199,200,203,206,207,218,220,221,234,237,238,239,240,243,244,246,252,259,260,263,264,265,266,268,271,278,280,287,288,290,291,292,293,294,299,306,307,313,319,323,325,331,333,363,366,371,372,391,398,401],"static":[167,201,230,231],"transient":[14,16],"true":[4,5,6,7,8,16,59,64,65,66,67,68,69,70,71,74,76,79,81,82,89,103,123,124,148,149,172,187,188,204,230,232,233,286,288,290,291,292,293,294,295,296,297,298,300,301,302,303,304,305,306,309,310,313,316,319,321,322,325,326,337,391,399,400],"while":[3,6,7,8,11,12,34,39,46,194,197,290,336,392,397,398,399,400,401],A:[0,6,7,8,13,89,97,203,230,241,247,258,286,302,313,336,369,391,398,399,401],As:[6,8,11,89,113,170,173,364,399],At:[11,116,143,399],By:[11,12,167,201,319,391,398],For:[3,5,6,7,8,10,11,12,14,44,48,93,112,136,290,325,353,398,401],If:[0,1,2,3,4,5,6,7,8,9,11,12,14,15,16,34,39,40,44,46,48,72,77,78,83,84,87,90,91,93,94,95,96,97,99,100,102,105,108,111,114,116,127,139,143,144,188,194,195,197,199,200,203,207,237,238,239,240,241,252,258,259,263,264,265,266,278,286,287,306,319,325,326,342,351,352,391,398,399,401,402],In:[3,8,9,11,14,67,127,170,174,294,326,336,353,399,400,401],It:[3,4,5,6,7,8,11,12,16,89,111,139,286,336,391,399,401],No:[6,8],On:[8,9,12,14,111,139],One:[0,3,4,6,8,402],The:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,16,34,44,46,48,58,64,80,85,90,91,93,94,95,96,99,105,108,109,110,111,122,127,128,136,139,142,144,167,181,188,194,195,197,199,203,204,206,207,236,237,241,247,258,260,262,263,285,286,291,302,303,305,319,323,325,326,335,336,353,391,392,397,398,399,401,402],There:[12,389,392,397,400,402],To:[3,4,6,7,8,10,12,14,59,181,201,286,293,319,391,398,399],With:[4,5,6,7,8],_:7,__add__:[180,181],__array__:[288,290,313],__call__:[136,138,373,374],__contains__:[64,65,66],__delitem__:[167,194,195,197,203,207],__eq__:[18,19,20,33,64,67,168,169,189,190,234,236,260,262,336,337],__getitem__:[52,58,88,89,92,98,110,111,112,113,114,115,136,139,140,141,142,158,165,167,194,195,197,203,218,219,234,237,238,239,240,252,259,260,263,264,265,266,278,287,288,291,292,293,294,296,309,321,369],__index__:399,__iter__:[64,72],__len__:[64,73,110,119,218,220],__mul__:[336,343],__repr__:[64,74,110,120,136,146,167,180,183,196,234,243,260,268],__setitem__:[167,194,195,197,203,207,288,295,296,297,298,310,322],__str__:[64,75,222,224],__truediv__:[180,181,184,336,344],_arrai:11,_bit:7,_dimens:11,_origin:11,_rank:11,_shape:11,a1:11,a2:11,aa:199,abc:[181,184,185,187,188,198,201,204,276,306],abort:[17,203,326,328,329,331,333,334,335],abov:[11,77,83,87,89,399],abstracteventloop:[100,398],access:[5,6,7,8,10,11,13,14,15,39,40,244,353,391,399,400],accomplish:325,accord:[6,7,8,11,12,111,139,167,168,170,174],account:[14,44,48,67,401],achiev:[6,8],acid:10,acknowledg:325,actual:[127,167,194,197,199,207,241,258,286,293,325,391,399,401],ad:[12,90,91,92,93,94,95,96,97,98,165,259,287,321,322],adapt:1,add:[12,18,19,32,46,89,234,258,260,286,399],add_done_callback:[99,101,106,353,354],addit:[3,4,5,6,7,8,9,11,12,14,18,19,32,46,67,88,89,180,184,234,241,258,260,286,326,335,336,353,391,398,399,401],addition:[11,12,64,188,201,247,286,326,398,399],address:9,advanc:[10,17,88,399],advantag:[10,325],advis:7,affect:[12,88,94,95,96,112,115,244,325,369,398,401],after:[4,5,6,7,8,12,203,241,258,286,325,342,353,391,398,399,401],ag:203,against:401,alia:[17,18,19,27,41,110,126,130,136,148,149,150,151,152,153,154,156,157,234,251,260,277,288,308,390],align:[12,111,139,237,263,291,295,322,325,401],all:[0,3,4,6,7,8,9,10,11,15,16,17,34,44,46,48,89,93,94,95,96,97,116,136,143,200,204,241,258,286,294,313,319,325,326,391,398,399,401,402],all_proxi:9,allow:[0,8,11,12,13,14,89,286,297,298,319,325,326,391,401],allus:14,along:[7,241,247,258,286,302,391,398,401],alreadi:[4,6,7,8,11,12,102,188,201,241,258,286,326,328,331,332,391,398],also:[1,2,3,4,6,7,8,10,11,12,13,34,46,64,67,88,89,93,94,95,96,167,201,241,258,286,297,306,325,326,353,364,391,398,399,400,401,402],altern:[9,325,399],alwai:[3,4,5,6,7,8,89,93,295,296,297,298,310,322,399,401],among:3,amount:[88,93,200,369],amplif:401,an:[0,1,2,3,4,5,6,7,8,9,10,11,12,14,17,44,48,64,71,86,88,89,90,93,94,95,99,100,102,109,110,111,112,115,116,117,118,127,136,138,139,143,144,145,167,170,173,174,180,184,192,194,195,197,200,203,207,208,210,218,222,230,234,237,240,241,247,258,260,263,266,286,288,290,291,294,295,297,298,310,319,322,325,326,333,336,353,363,364,369,373,375,384,389,398,399,400,401,402],analog:10,ancestor:5,ani:[1,2,3,4,5,6,7,8,9,11,14,17,18,19,22,31,34,35,44,45,46,48,49,50,51,52,53,54,55,56,57,60,89,92,96,98,99,105,110,111,114,118,127,135,136,139,145,158,164,165,167,180,181,182,187,188,194,195,197,199,201,203,204,207,230,231,234,242,252,257,259,260,262,267,269,270,272,273,275,278,281,284,286,287,293,295,297,298,303,309,310,313,319,321,322,325,326,335,336,339,347,391,398,399,400,401,402],anoth:[0,64,65,67,80,85,110,111,122,128,136,139,142,168,169,234,236,260,262,398,399],api:[1,9,10,14],append:[180,181,194,195,197,203,207],appl:12,appli:[0,1,2,3,4,5,6,7,8,9,11,14,34,46,88,89,92,98,110,112,136,140,141,158,165,239,252,259,265,278,287,292,303,309,310,369,399,401,402],applic:[12,14,301,305,398,401],application_default_credenti:14,appropri:[14,398],aqacaamabaafaayaaaagqqaameeaaebbaabqqqaaye:8,ar:[0,1,2,3,4,5,6,7,8,9,10,11,12,14,17,21,32,34,44,46,48,57,67,89,90,92,97,98,110,111,112,115,139,158,165,166,167,200,201,203,241,247,252,258,259,262,268,269,270,272,273,275,278,281,286,287,297,309,310,321,322,325,326,336,364,391,392,397,398,399,401,402],arbitrari:[6,11,17,389,398,399],archiv:12,aren:12,arg0:[218,219,373,374],arg:399,argument:399,arithmet:3,arr:127,arrai:[2,3,4,5,10,11,15,17,88,92,98,99,112,115,127,136,141,143,145,158,165,208,210,222,225,234,239,250,252,259,260,265,268,275,278,286,287,288,290,293,294,295,296,297,298,299,303,304,305,308,309,310,312,313,319,321,322,325,326,363,364,366,369,391,398,400,401,402],arrang:325,array_lik:[17,89,208,210,212,234,241,250,258,260,275,286,288,290,295,296,297,298,305,310,313,322,325,363,391,398,399],ascii:402,aspect:[19,21,23,24,32,34,46,401],aspect_ratio:[6,7,8,19,21,23,32,34,46,401],aspect_ratio_soft_constraint:[19,21,24,32,34,46,401],assert:[62,100,236,262,384],assign:[6,7,11,295,296,297,298,310,322,398,399,400],associ:[64,100,175,177,179,195,203,207,260,276,286,288,306,320,331,391],assum:[4,5,6,7,8,11,401],astyp:[288,299],async:[100,326,398,400],asynchron:[10,99,100,101,102,103,104,105,106,108,109,230,288,295,296,297,298,310,313,322,325,326,331,353,400],asyncio:[99,100,102,325,398,400],atom:[5,10,16,326,327,330,398],attempt:[5,14,398,399],attribut:[5,6,399],augment:[1,2,3,4,5,6,7,8,13,14,15,16,402],auth:14,authent:[0,9],author:[9,14],automat:[1,2,3,4,5,6,7,8,10,11,12,14,106,288,290,326,391,401,402],avail:[0,9,12,348,349,364],averag:3,avoid:[7,100,111,139,399],await:[99,100,167,196,198,199,201,203,204,206,207,288,290,291,292,293,294,300,301,302,303,304,305,306,309,313,316,319,321,325,326,366,391,398,399,400],awar:399,ax:[6,285,291,292],b1:8,b:[5,12,67,97,111,139,142,167,172,176,185,192,194,195,197,198,199,200,201,203,206,207,236,246,262,271,399],back:[1,6,7,8,10,326,400],backward:[4,5,6,7,8,88,94,369],bandwidth:10,base:[1,2,3,4,5,6,7,8,11,17,109,166,167,180,183,186,196,202,234,236,243,260,262,268,299,336,338,341,345,366,367,368,371,372,399,401,402],base_unit:[336,338,340,342,345,346,401],basic:399,bazel:12,bazel_cach:12,bazel_tool:12,bazelisk:12,bazelisk_hom:12,bazelrc:12,bdist_wheel:12,bear:7,becaus:[5,7,325,398,399],becom:[105,108,199,325,334],been:[8,11,99,103,104,241,258,276,286,303,325,326,328,329,331,334,335,391,398],befor:[4,6,7,8,203,286,319,391],begin:[89,99,106,399],behav:112,behavior:[9,11,12,16,89,111,139,203,313,325,399],being:[4,5,6,7,8,12,203,326,398],below:[11,78,84,87],best:[6,7,8],better:[290,398],between:[11,391,398],bfloat16:[8,17,364,402],big:[6,8,402],bill:14,binari:12,binary16:[17,381,402],binary32:[17,382,402],binary64:[17,383,402],bind:[12,188,201,204,286,319,398],bit:[6,7,8,11,17,385,386,387,388,393,394,395,396,402],block:[3,6,7,8,13,100,105,108,194,195,197,290,295,296,297,298,310,313,322,325,326,398,401],blocksiz:[6,8,288,291,292,293,294,301,309,316,319,321,326,391,400],blosc:[6,8,12,288,291,292,293,294,301,309,316,319,321,391,401],blosclz:[6,8],bool:[3,8,17,18,19,20,31,33,34,46,49,51,53,54,55,57,64,65,66,67,68,69,70,71,76,79,81,82,89,99,102,103,104,110,116,123,124,136,143,148,149,167,168,169,172,180,187,188,189,190,204,234,236,257,260,262,284,286,288,314,315,319,324,326,327,329,330,332,335,336,337,353,355,356,359,365,391,399,402],bool_:[17,365],boringssl:12,both:[4,6,7,8,11,34,46,111,139,241,258,286,391,398,401],bound:[3,4,6,7,8,11,17,64,67,68,69,70,71,77,78,80,81,82,83,84,85,89,90,92,93,96,98,110,111,116,121,122,123,124,125,126,127,128,131,136,139,141,143,145,148,149,150,151,152,154,158,159,165,167,168,170,173,174,188,201,203,204,205,206,234,241,253,258,260,262,268,279,286,288,303,306,311,315,319,323,348,350,391,398,399,401],boundari:401,box:[110,122],broadcast:[8,89,98,165,237,241,258,259,263,286,287,291,295,297,298,305,310,321,322,325,391,399,401],broader:398,brotli:12,bsd:9,bucket:[2,3,5,7,8,14,391,400],buffer:[3,8,398],bug:12,build:10,build_def:12,build_doc:12,build_ext:12,built:[9,12,364,399],bundl:[9,12],bz2:8,bzip2:[6,8,12],bzl:12,c16:8,c8:8,c:[1,10,34,39,46,89,97,199,269,281,288,293,294,309,313,319,321,391,399,401],c_rehash:9,cach:[0,4,5,6,7,8,10,12,17,52,203,204,288,313,315,319,325,348,349,350,391,400],cache_pool:[0,4,5,6,7,8,54,58,60,62,63,268,288,291,292,293,294,309,319,321,325,391,398,400],cacherevalidationbound:[4,5,6,7,8],cafil:14,call:[59,89,99,100,103,106,114,194,195,197,203,232,240,244,293,313,325,328,331,398,399],callabl:[99,101,107,353,354,361,398],callback:[17,101,107,348,351,353,354,361,398],can:[9,10,11,12,14,127,200,237,241,247,258,263,286,291,325,326,348,349,391,398,399,400,401],cancel:[99,102,103,104,325,353,355,356],cancellederror:[102,103],cannot:[88,89,240,326],canon:401,capabl:[8,399],capath:14,captur:[188,204,286,319],care:7,cartesian:110,cast:[4,17,299,366,402],caus:[8,399],cc:199,cd:12,cdot:11,cert:[9,14],certain:11,certif:12,chain:[89,399],chang:[11,12,88,91,203,260,286,326,369],channel:[7,391,400],charact:[12,402],characterist:391,check:[4,6,7,8,64,65,66,331,399],child:[62,63],choic:7,choos:401,chosen:[3,6,7,8,391],chunk:[10,17,19,20,21,23,24,25,26,29,30,32,33,34,36,39,43,44,46,47,48,234,241,244,258,260,269,281,286,288,293,294,300,309,319,321,325,391,398],chunk_aspect_ratio:[6,7,8,34,46,391],chunk_aspect_ratio_soft_constraint:[34,46],chunk_el:[6,8,34,46,391],chunk_elements_soft_constraint:[34,46],chunk_layout:[1,2,3,4,5,6,7,8,234,237,238,239,240,241,242,244,252,254,257,258,259,260,269,281,286,288,300,316,391,398,401,402],chunk_shap:[6,8,34,46,391],chunk_shape_soft_constraint:[34,46],chunk_siz:[7,391,400],chunklayout:[6,7,8,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,234,237,238,239,240,241,244,252,254,257,258,259,260,269,286,288,300,391,398,401],chunkss:401,circumst:4,cl:12,clang:12,clear:[34,46],clevel:[6,8,288,291,292,293,294,301,309,316,319,321,391,401],clone:12,close:[11,64,69],cloud:[10,14,15,325,400],cloudpickl:398,cloudsdk_config:14,cmake:12,cname:[6,8,288,291,292,293,294,301,309,316,319,321,391,401],coalesc:[325,326],code:12,codec:[18,19,34,36,46,234,241,245,258,260,270,281,286,288,301,316,391],codec_chunk:[6,7,8,18,34,36,46,401],codec_chunk_aspect_ratio:[34,46],codec_chunk_aspect_ratio_soft_constraint:[34,46],codec_chunk_el:[34,46],codec_chunk_elements_soft_constraint:[34,46],codec_chunk_shap:[34,46],codec_chunk_shape_soft_constraint:[34,46],codecspec:[7,17,49,50,51,234,241,245,258,260,270,286,288,301,391],colexicograph:[6,7,34,39,46,313,401],column:[34,39,46,313,401],com:[9,12],com_facebook_zstd:12,com_google_boringssl:12,com_google_brotli:12,com_google_snappi:12,com_google_tensorstor:12,combin:[1,2,3,4,5,6,7,8,336,391,399,401,402],comma:[9,12],command:[9,12],commit:[17,194,197,199,203,207,313,325,326,331,332,333,334,335,353,357,398],commit_async:[206,325,326,328,331,333],commit_start:[326,332],commit_sync:[167,297,326,331,333],common:[3,4,9,15,34,46,136,399],compar:[18,19,20,33,64,67,168,169,189,190,234,236,260,262,336,337],comparison:[236,241,258,262,286,391],compat:[0,4,5,6,7,8,9,11,12,110,127,241,258,286,295,297,298,305,310,322,325,391,399,400,401],compil:12,complement:[17,385,386,387,388,402],complet:[11,99,101,102,104,105,108,194,195,197,199,203,207,230,232,233,295,296,297,298,310,313,322,325,353,399,400],complex128:[8,17,367,402],complex64:[8,17,368,402],complex:[3,17,367,368,402],compon:[4,5,6,7,8,18,34,110,116,136,143,180,184,234,241,402],compos:[2,10,11,115,136,142,240,266],composit:[11,399],compress:[8,291,292,326,391,400,401],compressed_segment:[7,391,400],compressed_segmentation_block_s:[7,391,400],compressor:[6,245,270,275,288,293,294,301,309,316,319,321,391,401],comput:[3,11,14,110,122,194,195,197,237,263,288,291,292,293,294,309,321,398,399],concaten:9,concurr:[0,5,10,13,14,99,204,319,325],condit:[14,111,139,203,207,351,352],config:14,configur:[0,10,14],confus:399,conjunct:[11,286,319,391,401],connect:[9,10,14],consecut:[89,399],consequ:[112,115,188,204,286,319],consid:[6,325,401],consist:[4,5,6,7,8,10,89,127,203,399],constant:[1,11,17,208,209,222,226,384,399],constrain:[6,7,10,11,241,258,286,391,398,399,401],constraint:[1,2,3,4,5,11,18,19,21,24,26,29,30,32,34,37,38,39,40,44,46,48,234,241,244,245,247,258,260,269,270,272,273,275,281,286,336,391,398,401,402],construct:[18,19,21,22,34,35,49,50,52,59,60,61,63,64,68,69,70,71,110,116,117,118,136,143,144,145,168,170,175,176,180,182,189,191,208,209,210,211,234,241,242,260,267,336,338,339,340,341,342,369,370,373,374,375,376],constructor:59,consum:[17,89,99,200,353,399],contain:[3,5,9,11,12,64,65,66,72,89,93,110,122,168,172,342,398,399,400,401],content:[13,17,398],context:[1,2,3,4,5,6,7,8,10,13,14,15,16,17,52,53,54,55,56,57,58,59,60,61,62,63,89,99,187,188,196,198,201,204,262,268,286,288,290,291,292,293,294,299,306,309,319,321,325,326,363,366,391,398,399,400,402],context_a:262,context_b:262,contextresourc:[0,4,5,6,7,8,13,14,16],contigu:[1,64,313],continu:[194,195,197],contrast:399,contribut:7,control:325,conveni:[4,5,6,7,8,14,294],convers:[2,288,290,400],convert:[2,6,18,19,31,34,45,46,49,51,99,100,114,180,187,188,204,234,241,257,258,260,284,286,295,297,298,310,319,322,325,336,347,363,391,399],coordin:[89,399],copi:[0,11,12,167,168,171,180,185,198,234,236,244,246,260,262,271,325,353,358,399],core:[0,10,399],coroutin:[100,109,398],correctli:11,correspond:[6,7,8,11,14,15,16,17,21,32,34,46,80,85,89,90,99,100,122,127,128,230,241,247,258,286,302,353,364,365,367,368,381,382,383,385,386,387,388,389,391,392,393,394,395,396,397,398,399,401,402],cost:11,count:127,cpu:0,crash:325,creat:[1,2,3,4,5,10,12,17,52,55,56,58,167,188,201,204,230,231,247,260,286,288,290,291,292,293,294,295,296,297,298,300,301,302,303,304,305,306,309,310,313,316,319,321,322,325,326,327,398,400,401,402],credenti:[0,14,17,52,400],crt:[9,14],curl:[12,14],current:[0,8,11,12,99,194,195,197,203,288,290,313,325,326,398,400],d:[17,64,89,90,91,92,93,94,95,96,97,98,111,112,137,138,139,140,235,238,261,264,284,285,289,292,296,369,370,384,399,400],dask:399,data:[0,1,2,3,4,5,10,15,16,181,182,183,184,185,196,198,203,234,241,249,258,260,274,286,293,295,297,298,299,301,304,305,310,313,319,322,325,348,349,350,351,352,363,364,365,366,373,374,375,381,382,383,385,386,387,388,389,391,392,395,397,398,399,401,402],data_copy_concurr:[0,4,5,6,7,8,89,99,268,288,291,292,293,294,299,309,319,321,366,391,398,399,400],data_encod:[7,391,400],data_typ:7,dataabc:181,databas:10,dataset:[6,187,288,290,291,292,293,294,295,296,297,298,303,304,308,309,310,312,313,319,321,322,325,326],dataset_3d:400,dataset_futur:400,datatyp:[6,274,291,292,326,391,400],date:12,datetim:8,deadlin:[105,108,360,362],deadlock:[100,398],decod:[0,10,17,49,401],decrypt:9,def:[100,398],defer:399,defin:[0,4,5,6,7,8,11,13,14,16,17,89,110,234,364,398,399,401],del:194,delet:[4,6,7,8,167,194,197,199,207,286,319,391],delete_exist:[4,6,7,8,286,319,326,391,400],delete_rang:[167,199],demonstr:400,denot:399,depend:[9,14,89,313,325,399,402],deprec:[8,399],deriv:[336,345],describ:[11,17,18,19],desir:247,detail:[9,10],determin:[4,6,7,11,111,139,167,391,401],determinist:3,develop:14,deviat:[336,401],dexpr:399,diagon:[88,90,369,399],did:[105,108],differ:[3,11,15,92,98,99,158,165,203,241,252,258,259,278,286,287,309,310,316,321,322,391,392,397,398],dim:[17,44,48,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,110,111,113,117,139,143,164,208,210,213,384],dimens:[3,8,10,11,17,18,19,21,28,32,34,42,44,46,48,64,68,69,70,71,86,88,90,91,92,93,94,95,96,97,98,110,112,113,114,116,117,119,123,124,127,129,132,136,137,140,143,148,149,153,165,208,211,234,235,237,238,241,247,258,259,260,261,263,264,272,277,280,284,285,286,287,288,289,291,292,296,302,312,321,322,326,336,340,369,370,390,391,398,400],dimension:[3,10,11,17,89,110,288,399],dimension_separ:[8,288,293,294,309,319,321,391],dimension_unit:[6,7,234,241,247,258,260,272,286,288,302,391,398,401],dimensionless:[6,336,401],dimexpress:[17,88,89,90,91,92,93,94,95,96,97,98,110,112,136,140,234,238,260,264,288,292,296,369,399],dimselectionlik:[88,97,110,114,369,370],direct:89,directli:[0,1,2,3,4,5,6,7,8,11,12,13,14,127,136,181,269,270,272,273,275,281,295,296,297,298,310,322,336,398,399,401,402],directori:[9,12,13,14,15,16],disabl:[8,9],discrep:[111,139],disjoint:325,dist:12,distribut:[9,12],divid:[336,344,399],divisor:[336,344],do_read:398,do_writ:398,doc:12,document:[9,15,401,402],doe:[4,6,7,8,9,11,12,13,59,89,91,93,94,95,96,127,136,269,270,272,273,275,276,281,286,293,306,319,325,336,364,391,399,401],domain:[3,10,17,88,89,90,91,92,93,94,95,96,97,98,99,110,111,112,113,114,115,116,117,118,119,121,122,123,124,125,126,127,128,129,130,131,132,133,134,136,137,139,140,141,142,143,144,145,147,148,149,150,151,152,153,154,156,158,159,162,163,165,234,235,237,238,239,240,241,247,248,252,253,255,256,258,259,260,261,263,266,272,273,279,280,281,282,283,285,286,287,288,289,290,291,292,294,295,296,297,298,302,303,310,311,312,313,316,317,318,321,322,325,369,384,390,391,398,399,400,401],domin:399,don:12,done:[10,12,14,93,99,100,104,230,232,233,241,258,286,353,359,391],doubl:[17,336,383,401,402],download:12,downsampl:[4,17,371,372,402],downsample_factor:[3,17,371,372],downsample_method:3,downsamplemethod:[3,371,372],driver:[0,10,17,49,89,99,167,181,182,183,184,185,187,188,194,195,196,197,198,199,200,201,203,204,206,207,234,245,247,260,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,280,281,284,285,286,287,288,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,309,310,313,316,319,321,322,325,326,336,366,391,399,400,401,402],drop:[11,325],dtype:[1,2,3,4,5,6,7,8,17,89,99,234,236,241,242,243,246,249,254,257,258,260,271,273,274,275,281,286,288,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,308,309,310,312,313,316,319,321,322,325,326,363,364,365,366,367,368,373,374,375,376,377,378,379,380,381,382,383,385,386,387,388,389,391,392,393,394,395,396,397,398,399,400,401,402],due:[7,13,203],dummi:[89,399],duplic:[91,399],durabl:[10,194,197,199,207,325,353],dynam:9,e:[6,7,8,9,11,12,14,17,34,39,46,87,89,93,94,95,96,111,115,139,203,204,244,313,319,326,398,399,401],each:[0,3,4,5,6,7,8,9,11,21,32,59,91,93,94,95,96,110,116,123,124,127,129,136,143,148,149,153,234,241,244,247,258,260,272,286,288,290,302,391,398,399,401,402],earlier:12,effect:[11,89,111,139,188,204,260,269,270,272,273,275,281,286,319,328,331,399],effici:[3,7,10,11,18,43,44,47,48,325,326,401,402],effort:12,either:[4,6,7,8,11,14,17,64,111,114,139,295,296,297,298,310,322,325,326,334,369,399],element:[2,3,7,18,19,21,25,26,32,34,39,40,45,46,89,110,134,136,163,234,256,260,268,283,288,318,399,401],elements_soft_constraint:[19,21,26,32,34,46,401],empti:[5,6,11,64,76,80,85,86,111,139,168,170,172,173,174,192,207,241,258,286,336,351,352,391,398,399,401],enabl:[4,6,7,8,10,14,64,72,136,325,398],encod:[0,6,8,10,12,17,49,391,400,401,402],end:[14,15,16,97,127,399],endian:[6,7,8,402],engin:14,enhanc:399,ensur:[12,99,106,181,247,325,326,399],entir:[5,7,11,111,139,290,325,342,399,401,402],entri:[189,192],environ:[12,14],epoch:[4,105,108,189,193,203],equal:[0,1,6,7,11,17,18,19,20,33,39,40,57,64,67,77,78,83,84,87,89,90,115,168,169,189,190,234,236,237,238,240,241,258,260,262,263,264,266,276,286,291,294,295,298,301,305,306,336,337,384,391,398,399,401],equival:[3,6,8,34,46,64,73,89,90,93,94,95,97,110,115,127,137,159,162,163,203,235,241,253,255,256,258,261,279,282,283,286,289,290,294,311,312,317,318,319,325,333,340,391,398,399,401],error:[5,6,7,8,11,14,99,100,105,108,111,139,194,195,197,203,230,232,241,258,286,333,391,398,399],escap:12,etc:[3,9,12,14,316],even:[3,5,10,57,194,197,399],evenli:401,event:[100,398],everi:[4,5,6,7,8,10,11,90,398,401],evict:0,exactli:[3,6,7,8,89,398,399],exampl:[12,326,398,400],except:[6,7,8,93,99,100,103,105,106,194,195,197,230,232,241,258,262,286,326,353,360,391,398,399,401],excess:7,exclus:[11,64,68,77,78,110,116,121,136,143,150,168,170,173,399],exclusive_max:[6,7,8,11,64,65,66,67,68,69,72,74,75,77,78,79,80,81,82,83,85,87,110,111,112,113,114,115,116,118,121,122,123,124,127,128,139,143,144,150,164,168,170,173,237,238,239,252,259,263,281,286,291,295,316,399],exclusive_min:[64,78,84],execut:[0,12,99,106,398],exist:[1,2,3,4,5,6,7,8,12,89,93,111,139,143,144,194,195,197,199,203,207,241,247,258,286,295,297,298,310,319,322,325,351,352,373,375,398,399,401,402],exit:326,expect:[9,12,109,247,399],explicit:[4,11,64,110,115,116,123,124,136,143,148,149,234,237,240,241,258,260,263,266,286,288,291,294,295,298,325,391,398,399,401],explicitli:[6,7,8,106,399,401],expos:5,expr:[93,110,112,136,140,234,238,240,260,264,266,288,292,294,296,298,399],express:[10,17,64,74,88,89,91,92,93,94,95,96,97,98,110,112,127,136,140,234,238,260,264,288,292,296,369,390],extend:[1,2,3,4,5,6,7,8,11,13,14,16],extens:[8,12,89,364],extent:[8,11,134,194,197,199,207,401],extern:[188,203,204,286,319,326],extract:[88,90,369],f2:8,f4:[8,275,391],f8:8,f:[8,99,288,313,325,391,398],facil:9,factor:3,fail:[1,2,3,4,5,6,7,8,14,203,326,398,399,402],fake:14,fals:[4,6,7,8,16,19,31,49,51,53,54,55,57,65,66,68,69,70,71,79,81,82,87,89,100,103,123,124,148,149,172,180,187,188,204,230,232,233,234,257,260,284,286,288,315,319,326,327,399,401],faster:12,fastest:[6,8,12],fc44652a42b3:12,fetch:12,few:399,fewer:[0,399],field:[8,80,85],file:[5,6,7,8,9,10,12,14,15,16,181,182,183,184,185,187,196,198,325,326,400],file_io_concurr:[0,13,62,63,187,196,198],filesystem:[0,10,13,15,400],fill:[10,97,234,241,250,258,260,275,286,288,305,391,400,401],fill_valu:[8,234,236,241,250,258,260,275,286,288,293,294,305,309,316,319,321,391,401],filter:[8,245,288,293,294,301,309,316,319,321,391,401],find:[9,12],fine:[295,296,297,298,310,322],finit:[11,64,71,72,79,87,127,241,258,286,391,398,401],first:[7,11,12,89,90,98,165,259,287,321,322,399,401],fix:[325,392,397],fix_resizable_bound:[288,315],flag:[12,80,85,122,128],flatten:399,float16:[8,17,381,402],float32:[6,7,8,17,275,300,366,368,382,391,402],float64:[6,8,17,367,383,402],fly:3,flyeem:400,flyem:391,follow:[3,6,7,8,9,11,12,14,109,111,139,241,258,286,336,391,398,399,401,402],forc:[99,106],form:[11,58,294,399],format:[6,7,8,9,10,391,401,402],fortran:[6,7,34,39,46,313,401],forward:353,found:195,fraction:203,framework:52,free:398,frequent:3,fresh:[4,5,6,7,8],from:[0,1,2,3,4,5,6,7,8,10,11,13,14,17,18,19,22,34,35,46,49,50,52,55,56,60,61,62,63,89,90,97,110,113,116,117,118,127,136,143,144,145,168,170,180,182,189,191,200,203,234,241,242,244,260,267,290,325,326,336,338,339,341,342,345,363,369,370,373,375,391,399,400,401],fsync:325,fulfil:[348,350],full:[5,8,11,16,89,319,399,401],fulli:[8,10,11,136,188,204,286,319,325],further:401,futur:[12,17,99,100,101,102,103,104,105,106,107,108,109,167,199,200,201,203,207,230,231,232,233,288,313,315,325,326,331,334,353,354,357,358,361,391,400],futurelik:[17,99,100,109,398],g:[9,14,17,89,93,94,95,96,204,244,319,326,398,399],gc:[2,3,5,7,8,15,16,325,391,400],gcc:12,gce:14,gcloud:14,gcs_request_concurr:[14,391,400],gcs_request_retri:[14,391,400],gcs_user_project:[14,391,400],gener:[12,89,167,175,177,189,190,191,192,193,203,207,294,336,348,349,351,352,398,399,401],get_running_loop:[100,398],get_valu:100,git:12,github:12,given:[0,3,13,52,58,64,66,89,93,94,95,96,399,401],global:[0,14,398],good:7,googl:[10,12,14,325,400],google_application_credenti:[9,14],googleapi:9,grain:[295,296,297,298,310,322],granular:[7,401],graph:[188,204,286,319],grid:[6,7,8,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,34,36,37,38,43,46,47,325,401],grid_origin:[6,7,8,18,34,37,38,44,46,48,237,238,239,240,241,242,244,252,254,257,259,281,300,316,401],grid_origin_soft_constraint:[18,34,38,44,46,48,401],grid_soft_constraint:[21,32],group:[7,17,326],guarante:[5,10,194,197,199,203,207,325,326,353,364],guid:10,gzip:[6,7,8,391,400,401],ha:[6,7,8,11,14,89,96,97,99,102,103,104,188,199,204,241,258,276,286,305,319,325,326,328,329,331,332,334,335,353,391,398,399],half:[0,17,64,68,167,168,170,381,402],handl:[14,17,52,53,58,99,222,224,230,288,353,398],hard:[6,7,8,11,18,19,21,29,32,34,37,39,40,44,46,48,401],hash:[7,391,400],have:[6,7,8,11,12,14,64,91,111,139,188,204,237,241,258,263,286,291,303,319,326,364,391,399,400,401],header:[6,8],hemibrain:391,here:6,hierarch:401,high:10,higher:[6,8,203],hit:400,hold:353,hostnam:9,how:[9,14,401],howev:[3,12,14,89,99,136,398],http:[12,14],http_archiv:12,http_proxi:9,https_proxi:9,hull:[64,80,110,122],i1:8,i2:8,i4:[8,391],i8:8,i:[0,6,7,8,10,11,14,34,39,44,46,48,87,89,93,97,111,115,139,194,195,197,203,210,211,269,270,272,273,275,281,313,325,326,399,400,401],id:[0,7,8,14,58,288,293,294,301,309,316,319,321,391,401],ident:[6,7,11,115,143,144,204,262,319,391,400],identifi:[0,4,6,8,11,12,15,110,111,113,139,167,189,192,398,399,401,402],ieee:[17,381,382,383,402],iexpr:399,if_equ:[207,351,352],if_not_equ:[203,348,349,398],ignor:[1,2,3,4,5,6,7,8,44,48,401,402],ijg:7,imag:7,imaginari:402,immedi:[11,100,109,399],immut:[110,336,398,399],implement:[5,10,12,203],impli:[260,269,270,272,273,275,281],implicit:[6,7,8,11,17,64,68,69,70,71,80,81,82,85,89,90,110,111,116,122,123,124,128,136,139,143,148,149,241,258,286,391,398,399,401],implicit_low:[64,67,68,69,70,71,81],implicit_lower_bound:[110,116,123,136,143,148,164,399],implicit_upp:[64,67,68,69,70,71,74,82],implicit_upper_bound:[110,116,124,136,143,149,164],implicitli:[6,7,8,11,399,400],impos:[11,336,401],improv:[325,326],includ:[6,7,8,9,10,12,16,17,57,110,114,260,269,270,272,273,275,281,295,297,298,310,313,319,322,325,399,401],include_default:[19,31,49,51,53,54,55,57,180,187,234,257,260,284],inclus:[11,64,68,69,70,83,84,110,116,125,126,131,136,143,151,152,154,159,168,170,174,234,253,260,279,288,311,399],inclusive_max:[11,64,67,69,77,78,82,83,84,87,110,116,125,151,384],inclusive_min:[6,7,8,11,64,65,66,67,68,69,70,72,74,75,77,78,79,80,81,82,83,84,85,87,110,111,112,113,114,115,116,118,121,122,123,124,125,126,127,128,129,131,133,134,139,143,144,152,164,168,170,174,237,238,239,252,259,263,281,286,291,295,316,384],incompat:[44,48,241,258,286,391,398],inconsist:5,increment:[12,241,247,258,286,302,391,398,401],indefinit:398,independ:[7,11,17,234,391,401],index:[3,7,10,18,42,64,66,88,90,91,92,93,94,95,96,97,98,111,112,113,114,115,116,117,118,127,132,138,139,140,141,142,143,144,145,147,158,160,165,166,208,210,218,222,237,239,240,241,247,252,258,259,263,265,266,273,278,285,286,287,291,293,294,295,297,298,302,309,310,321,322,369,384,390,391,398,401],index_arrai:[11,145,164,208,210,212,240,265,266,278,287,293,294,298,309,321],index_array_bound:[11,145],index_exp:[110,127,398],index_rang:[143,164,208,210,213],indexdomain:[6,7,8,11,17,18,44,48,64,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,139,144,147,234,237,238,239,240,241,248,252,258,259,260,263,273,286,288,291,292,295,296,303,391,398,399,401],indexerror:[89,91,93,94,95,96,240,399],indexinterv:11,indextransform:[1,2,3,4,5,6,7,8,11,17,89,90,91,92,93,94,95,96,97,98,110,112,115,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,208,209,210,211,218,222,234,239,240,252,259,260,263,264,265,266,278,285,287,288,291,292,294,298,390,399,402],indic:[3,6,7,8,11,17,57,64,68,69,70,71,72,79,81,82,86,88,89,92,93,97,98,110,111,116,123,124,127,136,138,139,141,143,148,149,158,165,168,170,172,173,174,175,178,192,203,207,222,234,239,240,241,247,252,258,259,260,265,266,268,278,286,287,288,293,294,297,298,302,309,310,314,319,321,322,324,325,326,329,330,332,335,336,353,369,370,384,391,398,399,401],indicaet:6,indirectli:[136,401],individu:[5,7,399,401],ineffici:7,inf:[11,17,44,48,64,68,69,71,75,77,78,83,84,89,90,91,92,96,98,115,116,118,140,141,142,143,145,158,165,176,191,203,384,390,398,399],infinit:[11,64,127,241,258,286,391,398,401],info:7,inform:[9,12,14,391],infti:11,inherit:[52,60,61,62],init:0,initi:[1,12,398,399],inlin:399,inner:[8,39,40,64,65],inner_ord:[6,7,8,18,34,39,40,41,42,45,46,237,238,239,240,241,242,244,252,257,259,281,300,316,391,401],inner_order_soft_constraint:[18,34,39,40,46,401],innermost:[18,34,39,46,401],input:[1,2,3,4,6,7,8,11,17,88,89,90,91,92,93,94,95,96,97,98,114,136,138,139,140,141,142,143,144,145,147,148,149,150,151,152,153,154,155,156,157,158,165,208,211,241,258,285,286,369,390,391,398,399,402],input_dimens:[11,115,142,143,144,145,164,208,211,214,265,284,293,321,399,400],input_exclusive_max:[11,89,99,136,139,143,145,148,149,150,164,263,264,265,266,278,284,286,287,288,291,292,293,294,299,309,319,321,366,391,399,400],input_inclusive_max:[11,93,136,143,151],input_inclusive_min:[11,89,93,94,95,99,136,139,143,145,148,149,150,151,152,153,154,164,263,264,265,266,278,284,286,287,288,291,292,293,294,299,309,319,321,366,391,399,400],input_label:[11,89,90,92,93,94,95,96,97,98,136,139,143,145,147,153,155,157,161,164,263,264,291,292,391,399,400],input_origin:[136,152,154],input_rank:[11,89,115,136,138,139,140,142,143,148,149,155,157,209,211,240,266,294,390,399],input_shap:[11,90,94,95,96,97,136,143,147,148,149,150,151,152,153,154,155,156,157,161,164,210,240,263,264,265,266,278,287,294,298,399],insert:399,instal:[10,14],instanc:[0,59,102,373,374],instead:[4,5,6,7,8,9,12,99,127,136,181,203,294,325,391,398,399],instruct:10,int16:[6,7,8,17,385,402],int32:[1,2,6,7,8,17,89,236,308,312,386,391,399,402],int64:[6,8,17,387,402],int8:[6,7,8,17,388,402],integ:[0,1,2,3,4,6,7,8,11,14,17,64,92,112,113,115,158,252,278,309,310,385,386,387,388,393,394,395,396,401,402],integr:399,intend:[12,14,15,16],interdepend:[188,204,286,319],interfac:[10,167,230,295,296,297,298,310,322,353],interleav:399,intermedi:399,intern:[6,7,203],interoper:[288,290,364,400],interpret:[127,175,178,336,399,401,402],interrupt:[105,108],intersect:[64,85,90,110,128],interv:[3,11,17,44,48,64,65,66,67,68,69,70,71,72,73,75,77,78,79,83,84,87,167,168],introduc:10,introspect:58,invoc:[12,399],invok:[12,99,101],involv:[11,399],ip:9,irrespect:[93,203],isol:[10,326],isomorph:[188,204,286,319],issu:325,iter:[64,72],its:[11,13,52,55,56,60,110,118,136,145,203,234,242,336,339,399,401],itself:[5,325,353,399],j:[11,111,139],janelia:391,jax:[8,364],join:[4,5,6,7,8,180,184],jointli:325,jpeg:[7,12],jpeg_qual:7,json:[0,1,2,3,4,6,8,9,10,11,13,14,15,16,17,18,19,22,31,34,35,36,37,38,39,40,43,45,46,47,49,50,51,52,53,54,55,56,57,60,110,118,135,136,145,164,167,180,182,183,187,196,201,234,236,242,243,257,260,262,267,268,284,336,339,347,389,391,401],json_point:5,just:[11,399,400],k:[97,111,139],keep:325,kei:[5,6,7,8,10,17,52,58,167,168,170,172,175,179,180,181,184,185,186,189,192,194,195,197,198,199,200,201,202,203,204,205,206,207,260,276,286,288,306,325,326,391,400,401],kept:[7,12],key_encod:8,keyboard:[105,108],keyboardinterrupt:[105,108],keyerror:[194,195,197,203],keyrang:[167,168,169,170,171,172,173,174,199,200],keyvaluestorebackedchunkdriv:[4,6,7,8,402],keyword:99,kvstore:[2,3,4,5,6,7,8,13,14,15,16,17,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,260,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,280,281,284,285,286,287,288,290,291,292,293,294,295,296,297,298,300,301,302,303,304,305,306,309,310,313,316,319,321,322,325,326,391,398,400],label:[6,7,8,10,11,17,64,67,68,69,70,71,74,75,80,85,86,88,89,90,91,97,110,112,113,114,116,117,118,122,128,129,136,140,143,153,237,238,239,240,241,248,252,258,259,263,286,291,292,295,296,303,369,370,391,398,399,401],lambda:99,larg:[10,200,290],larger:[11,400],largest:7,last:[11,89,103,113,114,194,195,197,203,232,240,399],latenc:[10,325],later:[12,13],latest:12,latter:8,layer:[5,6,7,8,325,401],layout:[10,17,18,19,33,34,41,42,44,45,46,48,234,241,244,258,260,269,286,288,300,313,391,398],lead:[11,100,342,401],least:[0,6,11,111,139,399],leav:[6,93,94,95,398],left:[7,11,111,139,391,398],legaci:399,len:119,length:[3,6,8,11,17,138,392,397,399,401],leq:11,less:[11,241,247,258,286,302,336,340,391,398,399,401],level:[2,6,8,10,203,400,401],lexicograph:[3,34,39,46,167,168,170,174,313,401],libcurl:9,libjpeg:12,libpng:12,librari:[8,10,127,136,399],lightweight:399,like:[9,10,14,112,115,247,391,399],likewis:399,limit:[0,10,11,14,62,63,353,398],link:[9,12,230,231,232,233],linux:[9,12],list:[6,9,11,12,72,113,167,199,200,203,371,372,399],liter:399,littl:[7,8,402],load:12,local:[0,9,10,13,14,15],localhost:14,locat:[9,14,316,391],lock:13,logic:[11,110,325,402],login:14,longer:353,loop:[100,398],lost:5,low:[7,11],lower:[3,11,64,68,69,70,71,78,81,84,90,93,96,110,116,123,126,127,131,136,143,148,152,154,159,168,170,174,234,253,260,279,288,311,399,401],lowest:3,lru:0,lz4:[6,8,12,288,291,292,293,294,301,309,316,319,321,391,401],lz4hc:[6,8],m1:11,m2:11,m:[11,12,401],mac:9,machin:[10,13,14],maco:12,made:[203,326,398],mai:[0,3,5,6,7,8,9,11,12,16,64,93,94,95,96,97,100,109,110,114,116,143,167,194,195,197,201,203,204,206,230,247,288,290,295,297,298,301,310,313,316,319,322,323,325,331,335,336,348,350,369,391,398,399,401,402],main:[105,108],major:[34,39,46,313,401],make:[9,12,401],manag:[17,52,326],mani:[9,11,14,89,136,399],manipul:16,manual:[11,12],map:[0,11,17,89,90,91,92,93,94,95,96,97,98,112,115,136,138,139,140,141,142,143,144,145,158,160,165,167,208,209,210,211,218,285,390,399],mark:[11,64,102,230,232,233,399],match:[0,1,2,3,4,5,6,7,8,11,16,80,85,91,93,94,95,96,111,139,200,203,207,241,258,286,351,352,391,398,399,401,402],mathrm:[7,11],mathtt:11,max:3,max_retri:14,maximum:[0,3,14,105,108],mayb:12,mean:[3,4,5,6,7,8,399],meaning:87,mechan:[4,5,6,7,8,10,167,353,399],median:3,member:[0,1,2,3,4,5,6,7,8,11,13,14,15,16,34,36,37,38,39,40,43,46,47,57,401,402],memori:[0,1,4,6,7,8,10,11,15,17,167,188,194,195,197,199,200,201,203,204,206,207,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,280,281,284,285,286,287,288,290,291,292,293,294,295,296,297,298,300,301,302,303,304,305,306,309,310,313,316,319,321,322,325,326,363,391,398,400,402],memory_key_value_stor:[16,188,204,268,288,291,292,293,294,306,309,319,321,391],mere:[293,325,353],merg:[21,32,241,258,286,391,398,401],metadata:[4,6,7,8,14,247,269,270,272,273,274,275,277,280,281,284,285,288,291,292,293,294,309,319,321,326,391,400],metdata:6,method:[3,6,8,14,17,208,215,222,294,371,372,399,400],microsoft:12,middl:400,million:[6,7,8],min:[3,11],mind:325,minim:[391,399],minimal_spec:319,minimum:[3,110,122],minishard:7,minishard_bit:[7,391,400],minishard_index_encod:[7,391,400],mismatch:11,miss:[167,175,176,178,203,207,401],mix:399,mode:[3,12,89,92,98,260,286,288,307,319,326,391],model:8,modif:[17,326],modifi:[5,11,110,180,188,244,325],modul:[12,398],more:[4,5,6,7,8,9,11,12,89,114,294,325,398,399,402],most:[3,7,8,9,11,14,15,89,103,114,116,143,167,194,195,197,203,232,240,294,325,399,401],ms:9,msvc:12,much:12,multi:[10,16,17,288],multipl:[0,3,7,8,10,11,12,13,14,16,247,295,296,297,298,310,322,325,326,391,398,399],multipli:[6,7,11,336,338,340,341,342,343,346,401],multiscal:7,multiscale_metadata:[7,391,400],murmurhash3_x86_128:7,must:[0,1,2,3,4,5,6,7,8,9,11,12,14,34,46,59,80,85,89,97,106,115,203,237,240,241,258,263,266,286,291,294,295,298,319,325,391,398,399,401,402],my:[2,3,5,7,8,14],n5:[4,10,262,267,268,271,272,274,276,277,280,284,285,286,291,292,295,296,302,303,306,326,391,401],n:[11,17,89,110,399],name:[6,7,8,12,222,224,227,373,376,377,398,399],nanomet:7,nasm:12,nativ:[6,8,10],ndarrai:[288,290,398,399,400],ndim:[18,19,27,41,110,130,136,157,234,251,260,277,288,308],nearest:3,necessari:[9,11,111,139,319,402],necessarili:[89,399,401],need:[11,12,89,136,336,399,401],neg:[97,113,127,399,401],neither:[4,5,6,7,8,11,319,391,398],neq:11,nest:[1,11,188,201,286],nesteddirectorystor:8,net_zlib:12,network:[10,13,14],neuroglanc:[7,10,391,400],neuroglancer_multiscale_volum:7,neuroglancer_precomput:[4,247,391,400,401],neuroglancer_uint64_sharded_v1:[7,391,400],never:[4,313,325,399],newaxi:[17,89,90,390,399],newer:[348,349],newli:90,nghttp2:12,nm:[6,7,247,272,302,337,338,339,341,342,343,344,345,347,401],no_proxi:9,non:[3,4,5,6,7,8,11,12,14,80,85,89,97,111,139,167,201,241,258,286,326,351,352,353,391,398,399,401],none:[11,14,17,18,19,21,23,24,25,26,27,28,29,30,32,34,37,38,39,40,44,45,46,48,52,59,60,61,64,68,69,70,71,88,89,93,94,95,96,99,100,101,105,106,107,108,110,116,127,136,143,144,167,180,188,194,197,199,200,201,203,204,205,206,207,208,212,213,214,217,230,232,233,234,237,238,239,240,241,245,247,248,249,250,251,252,254,258,259,260,263,264,265,266,270,272,273,274,275,276,277,278,280,285,286,287,288,290,293,294,301,302,305,306,309,316,319,320,321,323,326,328,331,333,334,353,354,357,358,360,361,362,363,369,390,391,398,399],nonzero:[89,399],nor:[4,6,7,8,11,319,391,398],normal:[4,5,6,7,8,9,11,12,111,139,241,258,286,325,326,391,399],note:[3,6,7,9,11,12,89,241,258,286,391,398],now:325,np:[127,290,398,400],num_channel:[7,391,400],number:[0,3,4,6,7,11,12,14,17,18,19,21,25,26,28,32,34,42,46,91,93,94,95,96,105,108,110,116,119,127,132,134,136,143,163,200,234,256,260,283,288,312,318,336,342,367,368,399,401,402],numer:[3,11,336,399,401],numpi:[8,11,17,88,89,92,93,98,110,127,136,141,158,165,234,239,240,252,259,260,265,266,278,287,288,290,293,297,309,310,321,322,364,365,367,368,369,373,375,381,382,383,385,386,387,388,389,392,393,394,395,396,397,400],numpy_dtyp:[373,378],numpyindexingspec:[88,89,92,98,136,141,158,165,234,239,252,259,260,265,278,287,288,293,297,309,310,321,322,369],o:[0,10,194,195,197,269,270,272,273,275,281,313,399,400],oauth2:9,obj:[141,399],object:[0,1,2,3,4,5,6,7,8,11,13,14,15,16,17,80,85,99,100,105,108,110,117,122,127,128,143,144,230,232,233,244,290,325,326,336,353,360,362,373,374,380,399,400,401,402],object_:[389,392,397],observ:[326,398],obtain:[6,8,89,110,244,288,315,399,400],occupi:402,occur:[11,99,194,195,197,399],odd:3,offer:3,offici:8,offset:[3,11,18,44,48,88,94,95,115,142,143,144,145,161,164,208,209,210,211,216,284,369,399,400,401],often:[14,325],oindex:[88,92,136,141,158,234,239,240,252,259,260,265,266,278,287,288,293,294,297,298,309,310,321,322,369],older:[4,5,6,7,8,203,348,350],omit:[391,399],onc:[11,17,114,207,325,326,335,353,398],one:[6,8,9,11,14,89,90,111,116,139,143,241,258,286,294,391,398,399,401],ones:6,onli:[0,3,4,5,6,7,8,9,11,12,13,34,44,46,48,89,90,99,116,143,207,241,258,269,270,272,273,275,281,286,307,313,325,326,353,391,398,399,400,401],onto:399,op1:399,open:[1,2,3,4,5,6,7,8,10,17,64,68,99,167,168,170,188,194,195,196,197,198,199,200,201,203,204,206,207,247,260,286,288,290,291,292,293,294,295,296,297,298,300,301,302,303,304,305,306,309,310,313,316,319,321,322,325,326,335,398,399,400,401,402],openssl:9,oper:[0,4,5,6,7,8,9,10,11,12,13,17,89,91,92,93,94,95,96,97,98,99,101,102,103,104,105,106,108,112,115,136,141,158,165,166,167,175,194,197,199,201,203,206,207,230,239,252,259,265,278,287,288,293,295,296,297,298,310,320,322,323,325,335,353,391,398,399],opn:399,opt:12,optim:12,optimist:10,option:[0,1,2,3,4,5,6,7,8,9,11,12,13,14,15,16,17,64,110,234,241,258,260,269,270,272,273,275,281,286,348,351,391,398,401,402],order:[6,7,11,12,14,17,18,34,39,40,46,89,97,136,137,167,168,170,174,200,234,235,260,261,269,281,288,289,293,294,309,313,319,321,325,391,399,401,402],org:12,org_blosc_cblosc:12,org_lz4:12,org_nghttp2:12,org_sourceware_bzip2:12,org_tukaani_xz:12,origin:[3,6,7,8,11,18,34,37,38,46,88,93,94,95,96,110,126,131,136,154,159,188,204,234,241,253,258,260,279,286,288,311,319,369,391,398,399,401],orthogon:[92,158,252,278,309,310,399],os:9,other:[3,6,7,8,11,12,18,19,20,21,32,33,44,48,59,64,66,67,80,85,89,110,111,116,122,128,136,168,169,189,190,194,195,197,234,236,260,262,294,336,337,398,399,401],otherwis:[1,2,3,4,6,7,8,11,12,14,68,69,70,100,111,116,139,143,333,401,402],out:[11,89,90,91,92,93,94,95,96,97,98,139,140,141,142,143,144,145,158,165,285,390,399],outer:[88,92,136,158,234,252,260,278,288,309,310,369],output:[12,17,88,89,90,91,92,93,94,95,96,97,98,112,115,136,138,139,140,141,142,143,144,145,158,160,161,164,165,208,209,210,211,218,220,221,222,240,241,258,265,266,278,284,285,286,287,293,294,298,309,321,369,390,391,398,399,400],output_rank:[115,136,138,161,240,266,294,295,298],output_user_root:12,outputindexmap:[11,17,115,136,142,143,144,160,161,164,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,240,266,294,298],outputindexmethod:[17,208,215,218,222,223,224,225,226,227,228,229],outsid:[326,399],over:[3,9,11,64,72,115,143,144,325,399,401],overlap:5,overrid:[0,1,2,3,4,5,6,7,8,12,13,14,15,16,286,319,391,402],overridden:[6,12,188,201,286,391],own:14,pack:8,pai:14,pair:[16,230,231,336,341],paramet:[6,7,8,14,17,21,32,34,46,49,57,58,60,61,68,69,70,71,80,85,91,93,94,95,96,97,100,105,108,112,113,114,115,116,117,122,128,138,143,144,170,188,194,195,197,199,200,201,203,204,207,237,240,241,258,263,266,286,291,294,295,297,298,310,313,319,322,325,363,391,398,401,402],parent:[0,1,2,3,4,5,6,7,8,13,14,15,16,52,60,61,62,63,402],pars:[52,55,61,167,180,342,401],part:[12,18,34,234,241,247,369],partial:[4,6,7,8,11,391],particular:[0,10],particularli:[87,398],partit:[290,401],pass:[12,17,348,351],path:[4,5,6,7,8,9,10,12,13,14,15,16,167,180,181,182,183,184,185,186,187,188,194,195,196,197,198,199,201,202,203,204,207,276,306,326,391,400],pattern:99,pem:9,pend:0,pep:399,per:[6,7,8,11,19,21,25,26,32,401],perfect:399,perfectli:[325,399],perform:[2,3,7,10,11,88,194,197,199,201,206,207,269,270,272,273,275,281,295,296,297,298,310,313,322,323,391,398,399,400,401],permiss:14,permit:[4,5,6,7,8,11,88,89,97,112,115,241,258,286,391,398,399],permut:[11,18,34,39,40,46,401],persist:[8,326],physic:[6,17,234,241,247,258,260,272,286,288,302,336,391,398,401],pick:7,pip:12,place:[7,9,89],plain:88,platform:[8,12],plu:399,pm:11,png:12,point:[17,325,326,336,364,381,382,383,401,402],pointer:5,polici:[288,315],pool:[0,204,319,391,398],portion:[342,401],posit:[3,11,241,258,286,288,305,391,399,400],posix:[12,13],possibl:[6,7,11,12,316,398],potenti:399,power:399,pre:12,prebuilt:12,preced:[9,34,46,241,258,286,391,398,401],precis:[17,34,46,325,336,381,382,383,389,392,397,401,402],precomput:[7,10],predecessor:399,prefer:[34,46,401],prefix:[14,15,16,167,180,186,202,399],prepar:9,presenc:5,present:[3,6,11],preserv:398,preset:6,preshift_bit:[7,391,400],prevent:12,previou:399,previous:[4,5,6,7,8,13,14,16,99,107,201,391,398],primarili:[58,64,112,115],print:[9,68,69,70,71,75,99,245,247,248,249,250,254,274,277,280,285,398],prior:[4,5,6,7,8,12,91,93,94,95,96,398,399],problem:14,process:[5,10,13,290],produc:[17,99,105,108,230,399],product:[110,134],progress:12,project:[12,14],project_id:14,promis:[17,99,103,230,231,232,233],propag:[80,85,122,128],properti:[3,6,7,8,10,15,148,149,150,151,152,153,154,156,244,326,391,398,401,402],propos:399,protocol:[13,399],provid:[5,6,7,8,9,10,12,13,14,99,325,326,353,399],purpos:[16,112,398,399],py:[12,110,117,141],python3:12,python:[1,8,10,17,64,74,297,298,389,392,397,399],qualiti:7,quaniti:[336,401],quantiti:[17,241,247,258,286,302,336,340,391,398,401],queri:[10,99,103,104],queued_for_writeback_bytes_limit:0,quit:3,r:[172,307],rais:[44,48,72,91,93,94,95,96,99,105,108,114,127,194,195,197,200,203,237,238,239,240,241,252,258,259,263,264,265,266,278,286,287,326,333,391,398],rang:[11,64,88,94,95,96,97,167,168,169,170,171,172,173,174,199,200,210,211,325,369,370,399],rank:[1,2,3,4,5,6,7,8,11,18,19,21,27,28,32,34,39,41,42,44,46,48,89,90,91,92,93,94,95,96,97,98,110,111,112,115,116,119,123,124,127,130,132,136,139,140,141,142,143,144,145,155,157,158,161,165,218,220,221,234,236,237,238,239,240,241,242,243,246,247,249,251,252,254,257,258,259,260,266,277,280,281,285,286,288,294,295,298,308,312,316,390,391,398,399,401,402],rare:399,rate:401,rather:[34,39,40,46,89,399,401],ratio:[19,21,23,24,32,34,46,401],raw:[6,326],re:[12,167,188,204,286,288,319,398],reach:0,read:[2,3,4,5,6,8,10,11,17,18,19,34,43,44,46,167,175,176,195,201,203,206,207,288,290,293,294,295,296,297,298,299,307,310,313,314,320,322,323,325,326,348,349,350,353,363,366,391,398,399,401],read_chunk:[6,7,8,18,34,43,44,45,46,281,300,316,401],read_chunk_aspect_ratio:[34,46],read_chunk_aspect_ratio_soft_constraint:[34,46],read_chunk_el:[7,34,45,46],read_chunk_elements_soft_constraint:[34,46],read_chunk_shap:[7,34,44,46,398],read_chunk_shape_soft_constraint:[34,46],read_chunk_templ:[18,44,48],read_context:398,read_funct:398,read_futur:400,read_param:398,readabl:[288,314],reader:[13,326],readi:[105,108,199,325,334],readm:12,readresult:[167,175,176,177,178,179,201,203,207],real:[241,258,286,391,398,402],rebuild:12,receiv:[11,14,105,108],recent:[0,89,103,114,194,195,197,203,232,240,399],recheck:[4,5,6,7,8],recheck_cached_data:[4,5,6,7,8,400],recheck_cached_metadata:[4,6,7,8],recommend:[7,12,295,296,297,298,310,322,336,399,401],recomput:398,record:[194,197,199,207],rectangular:[3,7,11],recurs:401,reduc:[12,294],refer:[0,4,5,6,7,8,9,10,12,13,14,15,16,89,188,204,286,319,325,399,401,402],reflect:[203,293,303,313,325,353],regardless:[4,5,6,7,8,399],region:[3,7,11,399,400],regist:[8,99,101,107],regular:[18,19,325,326,399,401],rel:[7,97,199,399,401],relat:[12,14,392,397],relationship:11,reli:402,relianc:13,remain:[6,8,11,89,96,188,201,286,335,342,399,401],remot:[0,9,10],remov:90,remove_done_callback:[99,107,353,361],reorder:97,replac:[188,286,399],repo:12,repositori:12,repres:[6,7,8,11,16,17,64,109,136,208,230,313,325,336,399,401,402],represent:[11,17,18,19,22,31,35,45,49,50,51,52,53,54,55,56,57,60,74,75,118,120,135,145,146,164,182,183,187,196,236,242,243,257,262,267,268,284,336,339,347,373,399,401,402],request:[14,99,102,203,348,349,398],requestor:14,requir:[1,2,3,4,5,6,7,8,13,14,15,16,116,143,313,391,400,401,402],reserv:11,resiz:[6,7,8,11,64,81,82],resolut:[6,7,272,391,400,401],resolv:[100,109,200,203,207,288,315,399],resourc:[0,1,2,3,4,5,6,7,8,10,13,14,15,16,17,52,53,54,58,59,188,201,204,262,268,286,319,391,398,402],respect:[3,7,21,32,64,90,93,325,399],restrict:200,result:[6,7,8,10,11,12,17,89,90,91,98,99,100,105,106,108,109,111,139,142,165,167,175,176,188,194,195,197,200,203,204,230,232,233,237,259,263,286,287,290,291,293,295,296,297,298,310,313,319,321,322,325,326,333,334,353,362,398,399,400,401],retain:[21,32,97,204,319,399,401],retain_context:[167,204,319],retri:14,retriev:[14,52,58,400],revalid:[4,5,6,7,8],revers:[97,136,137,234,235,260,261,288,289],rewrit:7,rfc:5,right:[11,14,111,139],rightarrow:11,roll:326,root:13,round:[3,7,11,399],row:[34,39,46,313,401],rs1:13,rtf:12,rule:[11,12],run:[14,100,105,108,398],runtim:[9,14],rw:307,s:[6,9,12,17,385,386,387,388,399,402],safe:[10,13,14,325],same:[0,5,6,7,8,11,12,16,59,91,93,94,95,96,188,204,286,301,306,316,319,325,326,353,398,399,400,401],satisfi:[7,313,399],satur:10,save:9,scalar:[89,93,94,95,96,295,297,298,310,322,325,364,373,374,399],scale:[7,247],scale_index:[7,391,400],scale_metadata:[7,391,400],schema:[1,2,3,4,5,10,11,17,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,281,286,288,316,391,398,402],script:12,sdist:12,sdk:14,se_curl:[9,12],second:[4,11,105,108,189,193,203],section:[9,10,14],secur:[9,14],segment:[391,400,401],sel:399,select:[1,2,3,4,5,17,80,85,88,89,90,91,93,94,95,96,97,110,114,122,128,247,369,370,402],self:[20,31,32,33,44,45,46,48,51,54,57,58,65,66,67,72,73,74,75,77,78,80,83,84,85,87,89,91,92,93,94,95,96,97,98,101,102,103,104,105,106,107,108,111,112,113,114,115,119,120,122,128,135,137,138,139,140,141,142,146,158,159,162,163,164,165,169,171,181,183,184,185,187,188,190,194,195,196,197,198,199,200,203,204,206,207,219,220,222,224,232,233,235,236,237,238,239,240,243,246,252,253,255,256,257,258,259,261,262,263,264,265,266,268,271,278,279,282,283,284,286,287,289,290,291,292,293,294,295,296,297,298,299,305,309,310,311,312,313,315,317,318,319,321,322,323,325,328,331,333,337,343,344,347,354,355,356,359,360,361,362,374,379],semant:[13,88,89,92,98,136,141,158,165,234,239,252,259,260,265,278,287,288,293,297,309,310,321,322,369,399],separ:[0,4,5,6,8,9,12,14,181,194,195,197,203,207,290,325,399,402],sequenc:[21,32,34,46,88,89,91,93,94,95,96,111,114,116,117,136,138,139,143,144,241,258,286,369,370,391,398,399],serial:11,serv:[7,111,139,247,398,401],server:[9,14],servic:14,set:[3,7,9,12,14,16,17,34,46,88,91,93,167,203,241,258,286,319,369,391,398,399],set_except:[230,232],set_result:[230,233],setup:[10,12],sever:[12,99],sha256:12,shape:[11,18,19,21,23,24,29,30,32,34,44,46,48,110,116,119,121,122,123,124,125,126,127,128,129,130,131,132,133,134,136,143,156,162,234,237,238,239,240,241,248,252,255,258,259,260,273,281,282,286,288,290,291,292,293,294,295,296,297,298,300,301,302,303,304,305,306,309,310,313,316,317,319,321,322,325,391,398,399,401],shape_soft_constraint:[19,21,30,32,34,45,46,401],shard:[391,400,401],shard_bit:[7,391,400],shard_data_encod:7,shardingspec:7,share:[0,10,13,14,17,52,59,188,201,204,286,319,391,398],shift:[88,94,95,369],shlex:12,shortcut:399,shorthand:[297,298],should:[4,5,6,7,8,9,12,14,15,16,100,325,351,352,398,401],show:12,shuffl:[6,8,288,291,292,293,294,301,309,316,319,321,391,401],sign:[11,17,385,386,387,388,402],signal:230,signific:325,silent:399,similar:[11,92,93,98,158,165,252,259,278,287,309,310,321,322,399],simpler:3,simplest:12,simpli:[90,100,134,353,398,399],simultan:12,sinc:[4,11,89,105,108,127,189,193,203,398,399,400],singl:[5,6,7,8,9,11,17,89,97,110,113,167,194,195,197,200,203,207,208,211,241,247,258,268,286,302,336,382,391,398,399,400,401,402],single_input_dimens:[11,222,228],singleton:[17,90,390],size:[0,6,7,8,11,12,21,32,64,70,73,74,76,80,85,87,110,116,134,136,143,163,234,256,260,283,288,318,325,391,398,400,401],skip:[12,319,348,349,399],slice:[89,93,110,111,127,136,139,399,400],slower:[6,8],slowest:[6,8],small:[1,7],smallest:[3,7,8],snappi:[6,8,12],so:[12,400],soft:[0,1,2,3,4,5,6,7,8,18,19,21,24,26,30,32,34,38,39,40,44,46,48,401,402],sole:89,some:[6,11,326,336,401],sourc:[11,12,288,295,296,297,298,310,322,325,353,363],space:[12,17,18,42,89,90,91,92,93,94,95,96,97,98,110,132,136,139,140,141,142,143,144,145,155,157,158,161,165,241,258,285,286,390,391,398,399,401],spec:[10,52,55,56,57,59,60,61,63,89,166,167,180,181,182,183,184,185,186,187,188,201,204,236,237,249,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,301,319,371,391],special:[0,7,11,12,14,17,77,78,83,84,89,170,173,384,399,401],specif:[0,1,2,3,4,5,6,8,12,15,16,17,49,52,55,56,167,180,188,189,192,204,260,269,270,272,273,275,281,286,319,336,391,401,402],specifi:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,21,32,34,39,40,44,46,48,49,64,68,69,70,88,89,93,94,95,96,97,98,100,105,108,110,111,113,114,116,127,139,143,144,165,167,168,170,175,188,189,194,197,199,200,201,203,204,207,230,232,233,234,241,244,245,247,250,258,259,269,270,272,273,275,276,281,286,287,288,299,313,319,321,322,325,336,340,343,344,348,350,351,352,366,369,390,391,398,399,401,402],split:12,squar:399,ssl:[9,12,14],sslkeylogfil:9,stack:12,stage:[17,326],staleness_bound:[203,348,350],stamp:[167,175,176,177,201,203,207],standard:[8,12],start:[3,12,17,89,97,99,113,200,326,332,335,369,398,399],startup:12,state:[167,175,176,178,201,203,207],stderr:9,step:[11,89,325,399],still:[5,7,8,11,112,115,326,335,398,399],stop:[89,399],storag:[5,6,7,8,10,14,17,18,34,39,40,46,167,189,190,191,207,260,276,286,288,306,316,325,326,353,391,401],store:[5,6,7,8,9,11,15,17,167,180,181,184,185,186,189,192,194,195,197,198,199,200,201,202,203,204,205,206,207,247,260,276,286,288,299,300,301,302,305,306,316,325,326,336,366,391,398,400,401],str:[17,52,58,64,68,69,70,71,74,75,86,88,91,110,113,116,120,129,136,143,146,153,167,168,170,173,174,176,180,181,183,184,186,189,191,194,195,196,197,202,203,207,222,224,227,234,241,243,258,260,268,286,288,307,336,338,341,342,345,369,373,376,377,379,391,397,398,399],strictli:[111,139],stride:[3,11,88,93,143,145,164,208,210,211,217,369,399],string:[0,3,4,5,6,7,8,10,11,13,14,15,16,17,74,75,86,120,146,168,170,173,174,183,192,196,243,268,299,336,342,392,397,401,402],strip:[200,342,401],strip_context:[188,286,319],strip_prefix:12,strip_prefix_length:200,strong:10,studio:12,style:[14,15,16,88,89,92,93,98,127,136,141,158,165,234,239,240,252,259,260,265,266,278,287,288,293,297,309,310,321,322,369],sub:[5,12,400],subarrai:8,subdivid:401,subject:[288,315,353],subscript:[295,296,297,298,310,322,399,400],subsequ:[89,325,353,391,398,399],subset:[11,12,99,110,114,399],subtyp:[4,6,8,15,401,402],succe:11,success:[108,195,331,333],successfulli:[105,230,233,325,334,353],suffic:11,suffici:399,suffix:[180,181],suitabl:[1,2,3,4,5,6,7,8,12,391,401,402],sum:399,suppli:400,support:[0,2,3,4,5,6,7,10,11,12,13,15,16,88,99,127,166,167,194,197,199,207,247,288,297,314,324,326,364,399,400,401,402],surviv:325,synchron:[99,194,195,197,288,290,295,296,297,298,310,313,322,325,326,333,398,400],syntax:[0,5,295,296,297,298,310,322,336,399,401],system:[9,12,14,15,325],t:[12,109,136,137,188,201,234,235,260,261,286,288,289,398],tabl:[11,16],take:[7,9,10,34,46,241,258,286,391,398,399,401],taken:[7,44,48,67,401],target:[11,19,21,25,26,32,34,46,88,97,369,401],temporari:[7,12],tensoprstor:9,tensorflow:[8,364],tensorstor:[0,1,2,3,4,5,9,11,12,14,15,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,392,393,394,395,396,397,398,399,400,401,402],tensorstore_bazel_build_opt:12,tensorstore_bazel_compilation_mod:12,tensorstore_bazel_startup_opt:12,tensorstore_bazelisk:12,tensorstore_ca_bundl:9,tensorstore_ca_path:9,tensorstore_curl_verbos:9,tensorstore_gcs_http_url:[9,14],tensorstore_prebuilt_dir:12,tensorstore_system_lib:[9,12],term:[89,92,98,158,165,252,259,278,287,297,309,310,321,322,399],termin:[392,397],test:[16,99],th:[89,111,139,399],than:[0,4,5,6,7,8,11,12,34,39,40,46,89,114,203,348,350,398,399,401],thei:[6,16,57,112,115,392,397,398,399],them:325,therefor:[7,9],thi:[0,1,3,4,5,6,7,8,9,11,12,13,14,34,46,52,58,59,62,63,87,92,98,99,106,110,111,115,127,134,136,137,139,140,142,158,159,162,163,165,167,194,195,197,199,200,203,205,206,207,235,241,244,252,253,255,256,258,259,261,266,269,270,272,273,275,278,279,281,282,283,286,287,288,289,290,293,294,297,298,301,306,309,310,311,312,316,317,318,321,322,323,325,326,336,340,343,344,345,353,373,374,391,398,399,400,401],third:401,those:[99,294],though:[112,115,398],thread:[0,99,100,105,108,194,195,197,290,313,398],three:[7,11,111,139,401],through:[10,11,14,15,136],throughput:10,tie:3,time:[4,5,6,7,8,11,189,191,193,203,398,401],timedelta:8,timeout:[99,105,108,353,360,362],timeouterror:[105,108],timestamp:[167,175,177,189,190,398],timestampedstoragegener:[167,175,176,177,189,190,191,192,193,201,203,207,398],tl:12,tmp:[12,181,182,183,184,185,187,196,198,326,400],to_json:[18,19,31,45,49,51,53,54,55,57,62,110,135,136,164,180,187,234,257,260,284,336,347,373,379],togeth:8,tool:12,top:[2,400,401],total:[0,110,134,136,163,234,256,260,283,288,318],total_bytes_limit:[0,4,6,7,8,54,58,60,62,63,398,400],toward:399,traceback:[89,103,114,194,195,197,203,232,240,399],track:325,traffic:9,trail:[342,401],transact:[10,16,17,194,197,199,200,201,203,205,206,207,295,296,297,298,306,310,313,320,322,323,326,327,328,329,330,331,332,333,334,335,353,391],transform:[1,2,3,4,5,6,7,8,10,17,89,90,91,92,93,94,95,96,97,98,99,110,112,115,136,138,139,140,141,142,143,144,145,147,148,149,150,151,152,153,154,155,156,157,158,161,164,165,208,209,210,211,218,234,237,238,239,240,241,252,258,259,260,263,264,265,266,278,284,285,286,287,288,291,292,293,294,295,296,298,299,303,309,319,321,366,390,391,398,400,402],translat:[3,6,8,11,88,94,95,96,369,399],translate_backward_bi:[88,94,369],translate_bi:[88,89,91,95,112,138,140,284,285,369],translate_to:[88,96,369],transpos:[88,90,97,136,137,234,235,260,261,288,289,369,399],treat:[100,203,399,401],tree:12,trip:11,truncat:399,trust:9,ts:[6,7,8,41,42,44,45,48,54,58,59,60,62,63,64,65,66,67,68,69,70,71,72,74,75,77,78,79,80,81,82,83,84,85,86,87,89,90,91,92,93,94,95,96,97,98,99,100,103,111,112,113,114,115,116,117,118,119,121,122,123,124,125,126,127,128,129,130,131,132,133,134,137,138,139,140,141,142,143,144,145,147,148,149,150,151,152,153,154,155,156,157,158,161,164,165,167,172,181,182,183,184,185,187,188,194,195,196,197,198,199,200,201,203,204,206,207,209,210,211,230,232,233,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,254,257,258,259,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,280,281,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,308,309,310,312,313,316,319,321,322,325,326,337,338,339,340,341,342,343,344,345,346,347,366,370,384,390,391,398,399,400],tupl:[18,19,23,24,29,30,37,38,39,40,110,121,123,124,125,126,127,129,131,133,136,138,148,149,150,151,152,153,154,156,159,162,230,231,234,241,247,253,255,258,260,272,279,282,286,288,302,311,317,336,341,391,398,399],turbo:12,tutori:10,two:[5,11,17,18,19,20,33,189,190,325,326,336,337,353,385,386,387,388,399,401,402],txn:[167,206,297,325,326],type:[0,1,2,3,4,5,10,58,99,109,136,166,234,241,249,258,260,274,286,291,292,295,297,298,299,304,305,310,322,325,326,336,363,364,365,366,373,374,375,380,381,382,383,385,386,387,388,389,391,392,395,397,398,399,400,401,402],u1:8,u2:[8,273,281],u4:[288,293,294,309,319,321],u8:8,u:[345,346],udunits2:[336,401],uint16:[6,7,8,17,271,281,326,393,402],uint32:[6,7,8,17,99,288,290,291,292,293,294,295,296,297,298,299,301,302,303,304,305,306,309,310,313,316,319,321,322,325,366,394,398,400,402],uint64:[6,7,8,17,391,395,400,402],uint8:[6,7,8,17,241,242,243,246,249,254,257,258,271,274,396,402],um:272,unbind_context:[180,188,204,286,319],unbound:[11,17,44,48,64,71,77,78,83,84,87,116,143,188,286,384],unchang:[93,94,95,96,188,201,286,399],unchunk:7,uncommit:[313,325,326],uncondition:[98,165,259,287,321,322,399],unconstrain:[247,391],under:[2,4,13,399],underli:[4,5,6,7,8,10,11,15,136,260,276,286,288,306,325,326,353,391,401],unequ:399,unicod:[17,397,402],uniform:[3,10,401],uniqu:[11,59,398],unit:[17,234,241,247,258,260,272,286,288,302,336,337,338,339,340,341,342,343,344,345,346,347,391,398],unix:[4,14,15,16,105,108,189,193,203],unknown:[11,241,247,258,286,301,302,305,391,398,401],unlabel:[6,11,64,86,116,143,401],unless:[7,14,336,399,401],unlik:[89,99,399],unmatch:11,unmodifi:398,unpickl:398,unregist:[99,107],unshar:[391,398],unshard:401,unsign:[17,393,394,395,396,402],unspecifi:[3,6,7,8,11,19,28,34,44,46,48,175,176,178,192,200,203,234,248,249,254,260,274,280,285,398,399,401],unsuccessfulli:[102,108,230,232],until:[99,105,108,194,195,197,199,207,326,335,353,398,399],up:[7,12,14,401],updat:[7,18,19,32,46,180,188,234,236,244,245,246,247,248,250,254,258,260,262,268,271,286,288,315,319],upon:[99,101,399],upper:[6,8,11,64,68,69,70,71,77,82,83,90,110,116,121,124,125,127,136,143,149,150,151,168,170,173,399],url:[10,12],us:[0,1,3,4,5,6,7,8,9,10,11,12,13,14,16,17,18,36,58,59,64,88,89,93,94,95,96,99,100,106,109,110,112,115,127,136,167,181,188,201,203,204,206,230,234,237,238,239,240,252,259,260,263,264,265,266,276,278,286,287,288,291,292,293,294,295,296,297,298,301,306,309,310,313,316,319,320,321,322,323,325,326,331,335,336,342,348,351,353,363,369,389,390,391,392,397,398,399,400,401],usag:326,usezlib:[6,401],ustr:[17,397,402],usual:[170,174,399],utf:402,util:12,v1:[11,391,400],v2:11,v3:11,v4:11,valid:[0,6,11,34,46,89,93,189,193,203,399,401],valu:[0,1,3,4,5,9,10,11,17,34,46,57,64,67,77,78,83,84,87,89,93,99,109,114,167,175,176,177,178,179,180,181,184,185,186,188,189,192,194,195,197,198,199,200,201,202,203,204,205,206,207,222,223,229,234,241,247,250,258,260,275,276,286,288,302,305,306,319,325,336,340,389,391,398,399,400,401,402],valueerror:[44,48,72,114,127,200,237,238,239,240,252,259,263,264,265,266,278,287],variabl:[12,14,17,392,397],varieti:15,varlength:6,vector:[11,88,89,98,110,116,136,138,143,165,234,259,260,287,288,321,322,369],verbos:[9,399],veri:[7,112,115],verifi:14,version:[3,9,12,189,192,398,399],via:[1,3,6,7,8,10,39,40,399],view:[2,3,10,136,137,167,206,218,234,235,260,261,288,289,291,292,293,294,299,309,321,323,366,371,372,398,399,400],vindex:[88,89,98,136,141,165,234,239,240,252,259,260,265,266,278,287,288,293,294,297,298,309,310,321,322,369],virtual:[2,3,10,12,136,288,291,292,293,294,309,321,371,372,398],virtual_chunk:[17,348,351,398],virtualchunkedreadparamet:[17,348,349,350,398],virtualchunkedwriteparamet:[17,351,352,398],visibl:326,visual:12,volum:7,voxel:[7,401],voxel_offset:[7,391,400],vv:12,w:[11,307],wa:[4,9,52,63,105,108,201,203,244,331,391,398,400],wai:[0,6,7,8,10,12,398,401],wait:[99,325,398,400],well:[7,8,89,364,391],were:399,what:4,wheel:12,when:[0,1,2,3,4,5,11,12,89,100,106,199,203,247,295,296,297,298,310,313,322,325,334,353,398,399,401,402],where:[0,3,7,9,11,17,89,92,98,109,111,127,139,141,143,145,158,165,241,258,286,391,398,399,401,402],wherebi:399,whether:[57,68,69,70,71,89,99,103,104,110,116,123,124,136,143,148,149,319,326,329,330,332,335,399],which:[0,2,3,4,5,6,7,8,9,10,11,12,14,16,44,48,52,60,61,62,63,64,93,94,95,96,100,110,136,189,193,203,244,294,325,331,336,345,353,363,369,398,399,400,401],whitespac:[342,401],window:[9,12,13],wireshark:9,wise:[2,6,8,17,398],wish:398,with_transact:[167,201,206,288,297,323,325,326,391,398],within:[0,3,4,5,6,7,8,11,14,15,16,18,34,39,46,105,108,167,180,186,200,202,203,288,313,398,399,401],without:[6,11,14,88,94,95,96,181,194,195,197,201,203,207,325,326,369,391,398,399,400,401],won:[188,201,286],work:[12,14],workspac:12,worst:[6,7],would:[91,127],writabl:[288,324],write:[2,4,5,6,8,10,11,14,17,18,19,34,46,47,48,167,194,197,199,201,203,206,207,288,294,295,296,297,298,299,307,310,313,320,322,323,324,325,326,351,353,363,366,391,398,399,401],write_chunk:[6,7,8,18,34,45,46,47,48,281,300,316,401],write_chunk_aspect_ratio:[34,46],write_chunk_aspect_ratio_soft_constraint:[34,46],write_chunk_el:[7,34,46],write_chunk_elements_soft_constraint:[34,46],write_chunk_shap:[7,34,46,48],write_chunk_shape_soft_constraint:[34,45,46],write_chunk_templ:[18,44,48],write_context:398,write_funct:398,write_futur:400,writeback:[0,10,325,351,352],writefutur:[17,99,288,325,353,354,355,356,357,358,359,360,361,362],written:[12,17,241,258,286,288,305,325,391,398,400],x:[6,7,8,11,12,64,68,69,70,71,74,75,80,85,86,89,90,91,92,93,94,95,96,97,98,100,111,112,113,114,118,122,128,129,139,140,142,145,147,153,155,157,161,164,172,201,237,238,239,240,248,252,259,263,264,285,291,292,295,296,303,370,391,399,400],xcode:12,xre:7,xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx:12,xyz:7,xz:[6,12],y:[6,7,8,11,89,90,91,92,93,94,95,96,97,98,111,112,113,114,117,118,122,128,129,139,140,145,147,153,155,157,161,164,172,201,237,238,239,240,248,252,259,263,264,285,291,292,295,296,303,391,399,400],yet:[288,305,313],you:[4,6,7,8,9,12,14,59,325,391,398,400],your:12,yre:7,yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyi:12,z:[6,7,11,89,91,92,93,94,95,96,97,98,111,112,113,114,118,129,139,145,147,153,155,157,161,164,237,238,239,240,248,252,259,263,264,291,292,295,296,391,399,400],zarr:[2,3,4,10,245,263,264,265,266,269,270,273,275,278,281,287,288,290,293,294,297,298,300,301,304,305,309,310,313,316,319,321,322,325,391,399,401],zarr_format:[8,288,293,294,309,319,321,391],zarrai:8,zero:[4,6,7,8,11,64,76,89,90,116,143,241,258,286,391,398,399,401],zlib:[6,8,12],zre:7,zstd:[6,8,12]},titles:["Context framework","<code class=\"docutils literal notranslate\"><span class=\"pre\">array</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">cast</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">downsample</span></code> Driver","Drivers","<code class=\"docutils literal notranslate\"><span class=\"pre\">json</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">n5</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">neuroglancer_precomputed</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">zarr</span></code> Driver","Environment variables","TensorStore","Index space","Building and Installing","<code class=\"docutils literal notranslate\"><span class=\"pre\">file</span></code> Key-Value Store driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">gcs</span></code> Key-Value Store driver","Key-Value Storage Layer","<code class=\"docutils literal notranslate\"><span class=\"pre\">memory</span></code> Key-Value Store driver","API reference","tensorstore.ChunkLayout","tensorstore.ChunkLayout.Grid","tensorstore.ChunkLayout.Grid.__eq__","tensorstore.ChunkLayout.Grid.__init__(components)","tensorstore.ChunkLayout.Grid.__init__(json)","tensorstore.ChunkLayout.Grid.aspect_ratio","tensorstore.ChunkLayout.Grid.aspect_ratio_soft_constraint","tensorstore.ChunkLayout.Grid.elements","tensorstore.ChunkLayout.Grid.elements_soft_constraint","tensorstore.ChunkLayout.Grid.ndim","tensorstore.ChunkLayout.Grid.rank","tensorstore.ChunkLayout.Grid.shape","tensorstore.ChunkLayout.Grid.shape_soft_constraint","tensorstore.ChunkLayout.Grid.to_json","tensorstore.ChunkLayout.Grid.update","tensorstore.ChunkLayout.__eq__","tensorstore.ChunkLayout.__init__(components)","tensorstore.ChunkLayout.__init__(json)","tensorstore.ChunkLayout.codec_chunk","tensorstore.ChunkLayout.grid_origin","tensorstore.ChunkLayout.grid_origin_soft_constraint","tensorstore.ChunkLayout.inner_order","tensorstore.ChunkLayout.inner_order_soft_constraint","tensorstore.ChunkLayout.ndim","tensorstore.ChunkLayout.rank","tensorstore.ChunkLayout.read_chunk","tensorstore.ChunkLayout.read_chunk_template","tensorstore.ChunkLayout.to_json","tensorstore.ChunkLayout.update","tensorstore.ChunkLayout.write_chunk","tensorstore.ChunkLayout.write_chunk_template","tensorstore.CodecSpec","tensorstore.CodecSpec.__init__","tensorstore.CodecSpec.to_json","tensorstore.Context","tensorstore.Context.Resource","tensorstore.Context.Resource.to_json","tensorstore.Context.Spec","tensorstore.Context.Spec.__init__","tensorstore.Context.Spec.to_json","tensorstore.Context.__getitem__","tensorstore.Context.__init__(default)","tensorstore.Context.__init__(json)","tensorstore.Context.__init__(spec)","tensorstore.Context.parent","tensorstore.Context.spec","tensorstore.Dim","tensorstore.Dim.__contains__(dim)","tensorstore.Dim.__contains__(index)","tensorstore.Dim.__eq__","tensorstore.Dim.__init__(exclusive_max)","tensorstore.Dim.__init__(inclusive_max)","tensorstore.Dim.__init__(size)","tensorstore.Dim.__init__(unbounded)","tensorstore.Dim.__iter__","tensorstore.Dim.__len__","tensorstore.Dim.__repr__","tensorstore.Dim.__str__","tensorstore.Dim.empty","tensorstore.Dim.exclusive_max","tensorstore.Dim.exclusive_min","tensorstore.Dim.finite","tensorstore.Dim.hull","tensorstore.Dim.implicit_lower","tensorstore.Dim.implicit_upper","tensorstore.Dim.inclusive_max","tensorstore.Dim.inclusive_min","tensorstore.Dim.intersect","tensorstore.Dim.label","tensorstore.Dim.size","tensorstore.DimExpression","tensorstore.DimExpression.__getitem__","tensorstore.DimExpression.diagonal","tensorstore.DimExpression.label","tensorstore.DimExpression.oindex","tensorstore.DimExpression.stride","tensorstore.DimExpression.translate_backward_by","tensorstore.DimExpression.translate_by","tensorstore.DimExpression.translate_to","tensorstore.DimExpression.transpose","tensorstore.DimExpression.vindex","tensorstore.Future","tensorstore.Future.__new__","tensorstore.Future.add_done_callback","tensorstore.Future.cancel","tensorstore.Future.cancelled","tensorstore.Future.done","tensorstore.Future.exception","tensorstore.Future.force","tensorstore.Future.remove_done_callback","tensorstore.Future.result","tensorstore.FutureLike","tensorstore.IndexDomain","tensorstore.IndexDomain.__getitem__(domain)","tensorstore.IndexDomain.__getitem__(expr)","tensorstore.IndexDomain.__getitem__(identifier)","tensorstore.IndexDomain.__getitem__(selection)","tensorstore.IndexDomain.__getitem__(transform)","tensorstore.IndexDomain.__init__(components)","tensorstore.IndexDomain.__init__(dimensions)","tensorstore.IndexDomain.__init__(json)","tensorstore.IndexDomain.__len__","tensorstore.IndexDomain.__repr__","tensorstore.IndexDomain.exclusive_max","tensorstore.IndexDomain.hull","tensorstore.IndexDomain.implicit_lower_bounds","tensorstore.IndexDomain.implicit_upper_bounds","tensorstore.IndexDomain.inclusive_max","tensorstore.IndexDomain.inclusive_min","tensorstore.IndexDomain.index_exp","tensorstore.IndexDomain.intersect","tensorstore.IndexDomain.labels","tensorstore.IndexDomain.ndim","tensorstore.IndexDomain.origin","tensorstore.IndexDomain.rank","tensorstore.IndexDomain.shape","tensorstore.IndexDomain.size","tensorstore.IndexDomain.to_json","tensorstore.IndexTransform","tensorstore.IndexTransform.T","tensorstore.IndexTransform.__call__","tensorstore.IndexTransform.__getitem__(domain)","tensorstore.IndexTransform.__getitem__(expr)","tensorstore.IndexTransform.__getitem__(indices)","tensorstore.IndexTransform.__getitem__(transform)","tensorstore.IndexTransform.__init__(components)","tensorstore.IndexTransform.__init__(domain)","tensorstore.IndexTransform.__init__(json)","tensorstore.IndexTransform.__repr__","tensorstore.IndexTransform.domain","tensorstore.IndexTransform.implicit_lower_bounds","tensorstore.IndexTransform.implicit_upper_bounds","tensorstore.IndexTransform.input_exclusive_max","tensorstore.IndexTransform.input_inclusive_max","tensorstore.IndexTransform.input_inclusive_min","tensorstore.IndexTransform.input_labels","tensorstore.IndexTransform.input_origin","tensorstore.IndexTransform.input_rank","tensorstore.IndexTransform.input_shape","tensorstore.IndexTransform.ndim","tensorstore.IndexTransform.oindex","tensorstore.IndexTransform.origin","tensorstore.IndexTransform.output","tensorstore.IndexTransform.output_rank","tensorstore.IndexTransform.shape","tensorstore.IndexTransform.size","tensorstore.IndexTransform.to_json","tensorstore.IndexTransform.vindex","tensorstore.Indexable","tensorstore.KvStore","tensorstore.KvStore.KeyRange","tensorstore.KvStore.KeyRange.__eq__","tensorstore.KvStore.KeyRange.__init__","tensorstore.KvStore.KeyRange.copy","tensorstore.KvStore.KeyRange.empty","tensorstore.KvStore.KeyRange.exclusive_max","tensorstore.KvStore.KeyRange.inclusive_min","tensorstore.KvStore.ReadResult","tensorstore.KvStore.ReadResult.__init__","tensorstore.KvStore.ReadResult.stamp","tensorstore.KvStore.ReadResult.state","tensorstore.KvStore.ReadResult.value","tensorstore.KvStore.Spec","tensorstore.KvStore.Spec.__add__","tensorstore.KvStore.Spec.__new__","tensorstore.KvStore.Spec.__repr__","tensorstore.KvStore.Spec.__truediv__","tensorstore.KvStore.Spec.copy","tensorstore.KvStore.Spec.path","tensorstore.KvStore.Spec.to_json","tensorstore.KvStore.Spec.update","tensorstore.KvStore.TimestampedStorageGeneration","tensorstore.KvStore.TimestampedStorageGeneration.__eq__","tensorstore.KvStore.TimestampedStorageGeneration.__init__","tensorstore.KvStore.TimestampedStorageGeneration.generation","tensorstore.KvStore.TimestampedStorageGeneration.time","tensorstore.KvStore.__delitem__","tensorstore.KvStore.__getitem__","tensorstore.KvStore.__repr__","tensorstore.KvStore.__setitem__","tensorstore.KvStore.copy","tensorstore.KvStore.delete_range","tensorstore.KvStore.list","tensorstore.KvStore.open","tensorstore.KvStore.path","tensorstore.KvStore.read","tensorstore.KvStore.spec","tensorstore.KvStore.transaction","tensorstore.KvStore.with_transaction","tensorstore.KvStore.write","tensorstore.OutputIndexMap","tensorstore.OutputIndexMap.__init__(constant)","tensorstore.OutputIndexMap.__init__(index_array)","tensorstore.OutputIndexMap.__init__(input_dimension)","tensorstore.OutputIndexMap.index_array","tensorstore.OutputIndexMap.index_range","tensorstore.OutputIndexMap.input_dimension","tensorstore.OutputIndexMap.method","tensorstore.OutputIndexMap.offset","tensorstore.OutputIndexMap.stride","tensorstore.OutputIndexMaps","tensorstore.OutputIndexMaps.__getitem__","tensorstore.OutputIndexMaps.__len__","tensorstore.OutputIndexMaps.rank","tensorstore.OutputIndexMethod","tensorstore.OutputIndexMethod.__init__","tensorstore.OutputIndexMethod.__str__","tensorstore.OutputIndexMethod.array","tensorstore.OutputIndexMethod.constant","tensorstore.OutputIndexMethod.name","tensorstore.OutputIndexMethod.single_input_dimension","tensorstore.OutputIndexMethod.value","tensorstore.Promise","tensorstore.Promise.new","tensorstore.Promise.set_exception","tensorstore.Promise.set_result","tensorstore.Schema","tensorstore.Schema.T","tensorstore.Schema.__eq__","tensorstore.Schema.__getitem__(domain)","tensorstore.Schema.__getitem__(expr)","tensorstore.Schema.__getitem__(indices)","tensorstore.Schema.__getitem__(transform)","tensorstore.Schema.__init__(components)","tensorstore.Schema.__init__(json)","tensorstore.Schema.__repr__","tensorstore.Schema.chunk_layout","tensorstore.Schema.codec","tensorstore.Schema.copy","tensorstore.Schema.dimension_units","tensorstore.Schema.domain","tensorstore.Schema.dtype","tensorstore.Schema.fill_value","tensorstore.Schema.ndim","tensorstore.Schema.oindex","tensorstore.Schema.origin","tensorstore.Schema.rank","tensorstore.Schema.shape","tensorstore.Schema.size","tensorstore.Schema.to_json","tensorstore.Schema.update","tensorstore.Schema.vindex","tensorstore.Spec","tensorstore.Spec.T","tensorstore.Spec.__eq__","tensorstore.Spec.__getitem__(domain)","tensorstore.Spec.__getitem__(expr)","tensorstore.Spec.__getitem__(indices)","tensorstore.Spec.__getitem__(transform)","tensorstore.Spec.__new__","tensorstore.Spec.__repr__","tensorstore.Spec.chunk_layout","tensorstore.Spec.codec","tensorstore.Spec.copy","tensorstore.Spec.dimension_units","tensorstore.Spec.domain","tensorstore.Spec.dtype","tensorstore.Spec.fill_value","tensorstore.Spec.kvstore","tensorstore.Spec.ndim","tensorstore.Spec.oindex","tensorstore.Spec.origin","tensorstore.Spec.rank","tensorstore.Spec.schema","tensorstore.Spec.shape","tensorstore.Spec.size","tensorstore.Spec.to_json","tensorstore.Spec.transform","tensorstore.Spec.update","tensorstore.Spec.vindex","tensorstore.TensorStore","tensorstore.TensorStore.T","tensorstore.TensorStore.__array__","tensorstore.TensorStore.__getitem__(domain)","tensorstore.TensorStore.__getitem__(expr)","tensorstore.TensorStore.__getitem__(indices)","tensorstore.TensorStore.__getitem__(transform)","tensorstore.TensorStore.__setitem__(domain)","tensorstore.TensorStore.__setitem__(expr)","tensorstore.TensorStore.__setitem__(indices)","tensorstore.TensorStore.__setitem__(transform)","tensorstore.TensorStore.astype","tensorstore.TensorStore.chunk_layout","tensorstore.TensorStore.codec","tensorstore.TensorStore.dimension_units","tensorstore.TensorStore.domain","tensorstore.TensorStore.dtype","tensorstore.TensorStore.fill_value","tensorstore.TensorStore.kvstore","tensorstore.TensorStore.mode","tensorstore.TensorStore.ndim","tensorstore.TensorStore.oindex","tensorstore.TensorStore.oindex.__setitem__","tensorstore.TensorStore.origin","tensorstore.TensorStore.rank","tensorstore.TensorStore.read","tensorstore.TensorStore.readable","tensorstore.TensorStore.resolve","tensorstore.TensorStore.schema","tensorstore.TensorStore.shape","tensorstore.TensorStore.size","tensorstore.TensorStore.spec","tensorstore.TensorStore.transaction","tensorstore.TensorStore.vindex","tensorstore.TensorStore.vindex.__setitem__","tensorstore.TensorStore.with_transaction","tensorstore.TensorStore.writable","tensorstore.TensorStore.write","tensorstore.Transaction","tensorstore.Transaction.__init__","tensorstore.Transaction.abort","tensorstore.Transaction.aborted","tensorstore.Transaction.atomic","tensorstore.Transaction.commit_async","tensorstore.Transaction.commit_started","tensorstore.Transaction.commit_sync","tensorstore.Transaction.future","tensorstore.Transaction.open","tensorstore.Unit","tensorstore.Unit.__eq__","tensorstore.Unit.__init__(components)","tensorstore.Unit.__init__(json)","tensorstore.Unit.__init__(multiplier)","tensorstore.Unit.__init__(pair)","tensorstore.Unit.__init__(unit)","tensorstore.Unit.__mul__","tensorstore.Unit.__truediv__","tensorstore.Unit.base_unit","tensorstore.Unit.multiplier","tensorstore.Unit.to_json","tensorstore.VirtualChunkedReadParameters","tensorstore.VirtualChunkedReadParameters.if_not_equal","tensorstore.VirtualChunkedReadParameters.staleness_bound","tensorstore.VirtualChunkedWriteParameters","tensorstore.VirtualChunkedWriteParameters.if_equal","tensorstore.WriteFutures","tensorstore.WriteFutures.add_done_callback","tensorstore.WriteFutures.cancel","tensorstore.WriteFutures.cancelled","tensorstore.WriteFutures.commit","tensorstore.WriteFutures.copy","tensorstore.WriteFutures.done","tensorstore.WriteFutures.exception","tensorstore.WriteFutures.remove_done_callback","tensorstore.WriteFutures.result","tensorstore.array","tensorstore.bfloat16","tensorstore.bool","tensorstore.cast","tensorstore.complex128","tensorstore.complex64","tensorstore.d","tensorstore.d.__class_getitem__","tensorstore.downsample(spec)","tensorstore.downsample(store)","tensorstore.dtype","tensorstore.dtype.__call__","tensorstore.dtype.__init__(dtype)","tensorstore.dtype.__init__(name)","tensorstore.dtype.name","tensorstore.dtype.numpy_dtype","tensorstore.dtype.to_json","tensorstore.dtype.type","tensorstore.float16","tensorstore.float32","tensorstore.float64","tensorstore.inf","tensorstore.int16","tensorstore.int32","tensorstore.int64","tensorstore.int8","tensorstore.json","tensorstore.newaxis","tensorstore.open","tensorstore.string","tensorstore.uint16","tensorstore.uint32","tensorstore.uint64","tensorstore.uint8","tensorstore.ustring","tensorstore.virtual_chunked","Indexing","Tutorial","Schema","JSON Spec"],titleterms:{"boolean":[89,399],"class":[18,52,167,401],"new":[6,7,8,391],"public":[19,49,64,99,175,208,218,222,230,348,351,353,373],accessor:[18,52,53,55,64,99,110,136,167,168,180,189,234,260,288,326,336],ad:[89,399],align:11,all:[111,139],an:391,api:[12,17],arithmet:336,arrai:[1,6,7,8,89,399],aspect:[6,8],asynchron:17,authent:14,block:99,broadcast:11,build:12,c:[8,12],ca:[9,14],cach:398,callback:99,cast:2,certif:[9,14],checkout:12,chunk:[4,6,7,8,18,401],cloud:9,codec:[6,7,8,401],compar:399,comparison:[18,19,168,189,234,260,336],compress:[6,7],compressor:8,concept:10,configur:9,constraint:[6,7,8],construct:399,constructor:[18,19,49,52,55,64,99,110,136,167,168,175,180,189,208,222,230,234,260,326,336,369,373],context:0,core:17,creat:[6,7,8,391],credenti:9,data:[6,7,8,17,288],dataset:400,debug:9,depend:12,develop:12,differ:399,dimens:[6,7,89,111,139,399,401],document:12,domain:[6,7,8,11],downsampl:3,driver:[1,2,3,4,5,6,7,8,13,14,15,16],element:[6,8],ellipsi:[89,399],encod:7,environ:9,error:89,exampl:[0,1,2,3,4,5,6,7,8,11,41,42,44,45,48,54,58,59,60,62,63,64,65,66,68,69,70,71,72,77,78,79,80,81,82,83,84,85,86,87,89,90,91,92,93,94,95,96,98,100,103,111,112,113,114,115,116,117,118,119,121,122,123,124,125,126,127,128,129,130,131,132,133,134,138,139,140,141,142,143,144,145,147,148,149,150,151,152,153,154,155,156,157,158,161,164,165,167,172,181,182,183,184,185,187,188,194,195,196,197,198,199,200,201,203,204,206,207,209,210,211,232,233,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,254,257,258,259,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,280,281,284,285,286,287,288,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,308,312,313,316,319,325,337,338,339,340,341,342,343,344,345,346,347,366,370,384,390,391,401],exist:391,explicit:[6,7,8],express:399,file:[4,13],fill:[6,7,8],flyem:400,fortran:8,framework:0,from:12,fulli:[111,139],gc:14,geometr:110,get:10,googl:9,hemibrain:400,highlight:10,http:9,i:[167,288],index:[11,17,89,110,136,234,260,288,399],instal:12,integ:[89,399],interfac:99,interv:[89,399],ipython:12,janelia:400,json:[5,7,402],kei:[13,14,15,16],label:[111,139],layer:15,layout:[6,7,8,401],librari:12,limit:[6,7,8,13],local:[12,400],map:[6,7,8],member:[19,49,64,99,175,208,218,222,230,348,351,353,373],memori:16,method:11,mix:[111,139],mode:399,mutat:[180,234,260],n5:[6,400],neuroglancer_precomput:7,non:325,numpi:399,o:[167,288],oindex:399,open:391,oper:[18,19,64,88,110,168,180,189,234,260,326,336,369],order:8,outer:399,output:11,packag:12,parti:12,pickl:398,proxi:9,publish:12,pypi:12,python:12,ratio:[6,8],raw:7,read:[7,400],refer:17,represent:[64,110,136,167,180,222,234,260],request:9,requir:12,run:12,scalar:8,schema:[6,7,8,401],segment:7,select:[6,7,8,399],semant:325,separ:7,sequenc:110,setter:18,shape:[6,7,8],shard:7,shell:12,singl:4,singleton:[89,399],space:11,spec:[17,402],specif:7,start:10,storag:[4,9,15],store:[13,14,16],string:[64,110,136,167,180,222,234,260],structur:8,style:399,support:[8,17,398],synchron:167,templat:18,tensorstor:[6,7,8,10,391],test:[12,14],third:12,tl:[9,14],transact:[167,288,325,398],transform:[11,399],tutori:400,type:[6,7,8,17,288],unconstrain:[6,7,8],unit:[6,7,401],unlabel:[111,139],unshard:7,valu:[6,7,8,13,14,15,16],variabl:9,vector:399,view:17,vindex:399,virtual:17,when:[6,7,8],without:12,write:[7,400],zarr:8}})