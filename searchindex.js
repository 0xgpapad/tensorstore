Search.setIndex({docurls:["context.html","driver/array/index.html","driver/cast/index.html","driver/downsample/index.html","driver/index.html","driver/json/index.html","driver/n5/index.html","driver/neuroglancer_precomputed/index.html","driver/zarr/index.html","environment.html","index.html","index_space.html","installation.html","kvstore/file/index.html","kvstore/gcs/index.html","kvstore/index.html","kvstore/memory/index.html","python/api/index.html","python/api/tensorstore.ChunkLayout.html","python/api/tensorstore.ChunkLayout.Grid.html","python/api/tensorstore.ChunkLayout.Grid.__eq__.html","python/api/tensorstore.ChunkLayout.Grid.__init__-components.html","python/api/tensorstore.ChunkLayout.Grid.__init__-json.html","python/api/tensorstore.ChunkLayout.Grid.aspect_ratio.html","python/api/tensorstore.ChunkLayout.Grid.aspect_ratio_soft_constraint.html","python/api/tensorstore.ChunkLayout.Grid.elements.html","python/api/tensorstore.ChunkLayout.Grid.elements_soft_constraint.html","python/api/tensorstore.ChunkLayout.Grid.ndim.html","python/api/tensorstore.ChunkLayout.Grid.rank.html","python/api/tensorstore.ChunkLayout.Grid.shape.html","python/api/tensorstore.ChunkLayout.Grid.shape_soft_constraint.html","python/api/tensorstore.ChunkLayout.Grid.to_json.html","python/api/tensorstore.ChunkLayout.Grid.update.html","python/api/tensorstore.ChunkLayout.__eq__.html","python/api/tensorstore.ChunkLayout.__init__-components.html","python/api/tensorstore.ChunkLayout.__init__-json.html","python/api/tensorstore.ChunkLayout.codec_chunk.html","python/api/tensorstore.ChunkLayout.grid_origin.html","python/api/tensorstore.ChunkLayout.grid_origin_soft_constraint.html","python/api/tensorstore.ChunkLayout.inner_order.html","python/api/tensorstore.ChunkLayout.inner_order_soft_constraint.html","python/api/tensorstore.ChunkLayout.ndim.html","python/api/tensorstore.ChunkLayout.rank.html","python/api/tensorstore.ChunkLayout.read_chunk.html","python/api/tensorstore.ChunkLayout.read_chunk_template.html","python/api/tensorstore.ChunkLayout.to_json.html","python/api/tensorstore.ChunkLayout.update.html","python/api/tensorstore.ChunkLayout.write_chunk.html","python/api/tensorstore.ChunkLayout.write_chunk_template.html","python/api/tensorstore.CodecSpec.html","python/api/tensorstore.CodecSpec.__init__.html","python/api/tensorstore.CodecSpec.to_json.html","python/api/tensorstore.Context.html","python/api/tensorstore.Context.Resource.html","python/api/tensorstore.Context.Resource.to_json.html","python/api/tensorstore.Context.Spec.html","python/api/tensorstore.Context.Spec.__init__.html","python/api/tensorstore.Context.Spec.to_json.html","python/api/tensorstore.Context.__getitem__.html","python/api/tensorstore.Context.__init__-default.html","python/api/tensorstore.Context.__init__-json.html","python/api/tensorstore.Context.__init__-spec.html","python/api/tensorstore.Context.parent.html","python/api/tensorstore.Context.spec.html","python/api/tensorstore.Dim.html","python/api/tensorstore.Dim.__contains__-dim.html","python/api/tensorstore.Dim.__contains__-index.html","python/api/tensorstore.Dim.__eq__.html","python/api/tensorstore.Dim.__init__-exclusive_max.html","python/api/tensorstore.Dim.__init__-inclusive_max.html","python/api/tensorstore.Dim.__init__-size.html","python/api/tensorstore.Dim.__init__-unbounded.html","python/api/tensorstore.Dim.__iter__.html","python/api/tensorstore.Dim.__len__.html","python/api/tensorstore.Dim.__repr__.html","python/api/tensorstore.Dim.__str__.html","python/api/tensorstore.Dim.empty.html","python/api/tensorstore.Dim.exclusive_max.html","python/api/tensorstore.Dim.exclusive_min.html","python/api/tensorstore.Dim.finite.html","python/api/tensorstore.Dim.hull.html","python/api/tensorstore.Dim.implicit_lower.html","python/api/tensorstore.Dim.implicit_upper.html","python/api/tensorstore.Dim.inclusive_max.html","python/api/tensorstore.Dim.inclusive_min.html","python/api/tensorstore.Dim.intersect.html","python/api/tensorstore.Dim.label.html","python/api/tensorstore.Dim.size.html","python/api/tensorstore.DimExpression.html","python/api/tensorstore.DimExpression.__getitem__.html","python/api/tensorstore.DimExpression.diagonal.html","python/api/tensorstore.DimExpression.label.html","python/api/tensorstore.DimExpression.oindex.html","python/api/tensorstore.DimExpression.stride.html","python/api/tensorstore.DimExpression.translate_backward_by.html","python/api/tensorstore.DimExpression.translate_by.html","python/api/tensorstore.DimExpression.translate_to.html","python/api/tensorstore.DimExpression.transpose.html","python/api/tensorstore.DimExpression.vindex.html","python/api/tensorstore.Future.html","python/api/tensorstore.Future.__new__.html","python/api/tensorstore.Future.add_done_callback.html","python/api/tensorstore.Future.cancel.html","python/api/tensorstore.Future.cancelled.html","python/api/tensorstore.Future.done.html","python/api/tensorstore.Future.exception.html","python/api/tensorstore.Future.force.html","python/api/tensorstore.Future.remove_done_callback.html","python/api/tensorstore.Future.result.html","python/api/tensorstore.FutureLike.html","python/api/tensorstore.FutureLike.__weakref__.html","python/api/tensorstore.IndexDomain.html","python/api/tensorstore.IndexDomain.__getitem__-domain.html","python/api/tensorstore.IndexDomain.__getitem__-expr.html","python/api/tensorstore.IndexDomain.__getitem__-identifier.html","python/api/tensorstore.IndexDomain.__getitem__-selection.html","python/api/tensorstore.IndexDomain.__getitem__-transform.html","python/api/tensorstore.IndexDomain.__init__-components.html","python/api/tensorstore.IndexDomain.__init__-dimensions.html","python/api/tensorstore.IndexDomain.__init__-json.html","python/api/tensorstore.IndexDomain.__len__.html","python/api/tensorstore.IndexDomain.__repr__.html","python/api/tensorstore.IndexDomain.exclusive_max.html","python/api/tensorstore.IndexDomain.hull.html","python/api/tensorstore.IndexDomain.implicit_lower_bounds.html","python/api/tensorstore.IndexDomain.implicit_upper_bounds.html","python/api/tensorstore.IndexDomain.inclusive_max.html","python/api/tensorstore.IndexDomain.inclusive_min.html","python/api/tensorstore.IndexDomain.index_exp.html","python/api/tensorstore.IndexDomain.intersect.html","python/api/tensorstore.IndexDomain.labels.html","python/api/tensorstore.IndexDomain.ndim.html","python/api/tensorstore.IndexDomain.origin.html","python/api/tensorstore.IndexDomain.rank.html","python/api/tensorstore.IndexDomain.shape.html","python/api/tensorstore.IndexDomain.size.html","python/api/tensorstore.IndexDomain.to_json.html","python/api/tensorstore.IndexTransform.html","python/api/tensorstore.IndexTransform.T.html","python/api/tensorstore.IndexTransform.__call__.html","python/api/tensorstore.IndexTransform.__getitem__-domain.html","python/api/tensorstore.IndexTransform.__getitem__-expr.html","python/api/tensorstore.IndexTransform.__getitem__-indices.html","python/api/tensorstore.IndexTransform.__getitem__-transform.html","python/api/tensorstore.IndexTransform.__init__-components.html","python/api/tensorstore.IndexTransform.__init__-domain.html","python/api/tensorstore.IndexTransform.__init__-json.html","python/api/tensorstore.IndexTransform.__repr__.html","python/api/tensorstore.IndexTransform.domain.html","python/api/tensorstore.IndexTransform.implicit_lower_bounds.html","python/api/tensorstore.IndexTransform.implicit_upper_bounds.html","python/api/tensorstore.IndexTransform.input_exclusive_max.html","python/api/tensorstore.IndexTransform.input_inclusive_max.html","python/api/tensorstore.IndexTransform.input_inclusive_min.html","python/api/tensorstore.IndexTransform.input_labels.html","python/api/tensorstore.IndexTransform.input_origin.html","python/api/tensorstore.IndexTransform.input_rank.html","python/api/tensorstore.IndexTransform.input_shape.html","python/api/tensorstore.IndexTransform.ndim.html","python/api/tensorstore.IndexTransform.oindex.html","python/api/tensorstore.IndexTransform.origin.html","python/api/tensorstore.IndexTransform.output.html","python/api/tensorstore.IndexTransform.output_rank.html","python/api/tensorstore.IndexTransform.shape.html","python/api/tensorstore.IndexTransform.size.html","python/api/tensorstore.IndexTransform.to_json.html","python/api/tensorstore.IndexTransform.vindex.html","python/api/tensorstore.Indexable.html","python/api/tensorstore.Indexable.__weakref__.html","python/api/tensorstore.KvStore.html","python/api/tensorstore.KvStore.KeyRange.html","python/api/tensorstore.KvStore.KeyRange.__eq__.html","python/api/tensorstore.KvStore.KeyRange.__init__.html","python/api/tensorstore.KvStore.KeyRange.copy.html","python/api/tensorstore.KvStore.KeyRange.empty.html","python/api/tensorstore.KvStore.KeyRange.exclusive_max.html","python/api/tensorstore.KvStore.KeyRange.inclusive_min.html","python/api/tensorstore.KvStore.ReadResult.html","python/api/tensorstore.KvStore.ReadResult.__init__.html","python/api/tensorstore.KvStore.ReadResult.stamp.html","python/api/tensorstore.KvStore.ReadResult.state.html","python/api/tensorstore.KvStore.ReadResult.value.html","python/api/tensorstore.KvStore.Spec.html","python/api/tensorstore.KvStore.Spec.__add__.html","python/api/tensorstore.KvStore.Spec.__new__.html","python/api/tensorstore.KvStore.Spec.__repr__.html","python/api/tensorstore.KvStore.Spec.__truediv__.html","python/api/tensorstore.KvStore.Spec.copy.html","python/api/tensorstore.KvStore.Spec.path.html","python/api/tensorstore.KvStore.Spec.to_json.html","python/api/tensorstore.KvStore.Spec.update.html","python/api/tensorstore.KvStore.TimestampedStorageGeneration.html","python/api/tensorstore.KvStore.TimestampedStorageGeneration.__eq__.html","python/api/tensorstore.KvStore.TimestampedStorageGeneration.__init__.html","python/api/tensorstore.KvStore.TimestampedStorageGeneration.generation.html","python/api/tensorstore.KvStore.TimestampedStorageGeneration.time.html","python/api/tensorstore.KvStore.__delitem__.html","python/api/tensorstore.KvStore.__getitem__.html","python/api/tensorstore.KvStore.__repr__.html","python/api/tensorstore.KvStore.__setitem__.html","python/api/tensorstore.KvStore.copy.html","python/api/tensorstore.KvStore.delete_range.html","python/api/tensorstore.KvStore.list.html","python/api/tensorstore.KvStore.open.html","python/api/tensorstore.KvStore.path.html","python/api/tensorstore.KvStore.read.html","python/api/tensorstore.KvStore.spec.html","python/api/tensorstore.KvStore.transaction.html","python/api/tensorstore.KvStore.with_transaction.html","python/api/tensorstore.KvStore.write.html","python/api/tensorstore.OutputIndexMap.html","python/api/tensorstore.OutputIndexMap.__init__-constant.html","python/api/tensorstore.OutputIndexMap.__init__-index_array.html","python/api/tensorstore.OutputIndexMap.__init__-input_dimension.html","python/api/tensorstore.OutputIndexMap.index_array.html","python/api/tensorstore.OutputIndexMap.index_range.html","python/api/tensorstore.OutputIndexMap.input_dimension.html","python/api/tensorstore.OutputIndexMap.method.html","python/api/tensorstore.OutputIndexMap.offset.html","python/api/tensorstore.OutputIndexMap.stride.html","python/api/tensorstore.OutputIndexMaps.html","python/api/tensorstore.OutputIndexMaps.__getitem__.html","python/api/tensorstore.OutputIndexMaps.__len__.html","python/api/tensorstore.OutputIndexMaps.rank.html","python/api/tensorstore.OutputIndexMethod.html","python/api/tensorstore.OutputIndexMethod.__init__.html","python/api/tensorstore.OutputIndexMethod.__str__.html","python/api/tensorstore.OutputIndexMethod.array.html","python/api/tensorstore.OutputIndexMethod.constant.html","python/api/tensorstore.OutputIndexMethod.name.html","python/api/tensorstore.OutputIndexMethod.single_input_dimension.html","python/api/tensorstore.OutputIndexMethod.value.html","python/api/tensorstore.Promise.html","python/api/tensorstore.Promise.new.html","python/api/tensorstore.Promise.set_exception.html","python/api/tensorstore.Promise.set_result.html","python/api/tensorstore.Schema.html","python/api/tensorstore.Schema.T.html","python/api/tensorstore.Schema.__eq__.html","python/api/tensorstore.Schema.__getitem__-domain.html","python/api/tensorstore.Schema.__getitem__-expr.html","python/api/tensorstore.Schema.__getitem__-indices.html","python/api/tensorstore.Schema.__getitem__-transform.html","python/api/tensorstore.Schema.__init__-components.html","python/api/tensorstore.Schema.__init__-json.html","python/api/tensorstore.Schema.__repr__.html","python/api/tensorstore.Schema.chunk_layout.html","python/api/tensorstore.Schema.codec.html","python/api/tensorstore.Schema.copy.html","python/api/tensorstore.Schema.dimension_units.html","python/api/tensorstore.Schema.domain.html","python/api/tensorstore.Schema.dtype.html","python/api/tensorstore.Schema.fill_value.html","python/api/tensorstore.Schema.ndim.html","python/api/tensorstore.Schema.oindex.html","python/api/tensorstore.Schema.origin.html","python/api/tensorstore.Schema.rank.html","python/api/tensorstore.Schema.shape.html","python/api/tensorstore.Schema.size.html","python/api/tensorstore.Schema.to_json.html","python/api/tensorstore.Schema.update.html","python/api/tensorstore.Schema.vindex.html","python/api/tensorstore.Spec.html","python/api/tensorstore.Spec.T.html","python/api/tensorstore.Spec.__eq__.html","python/api/tensorstore.Spec.__getitem__-domain.html","python/api/tensorstore.Spec.__getitem__-expr.html","python/api/tensorstore.Spec.__getitem__-indices.html","python/api/tensorstore.Spec.__getitem__-transform.html","python/api/tensorstore.Spec.__new__.html","python/api/tensorstore.Spec.__repr__.html","python/api/tensorstore.Spec.chunk_layout.html","python/api/tensorstore.Spec.codec.html","python/api/tensorstore.Spec.copy.html","python/api/tensorstore.Spec.dimension_units.html","python/api/tensorstore.Spec.domain.html","python/api/tensorstore.Spec.dtype.html","python/api/tensorstore.Spec.fill_value.html","python/api/tensorstore.Spec.kvstore.html","python/api/tensorstore.Spec.ndim.html","python/api/tensorstore.Spec.oindex.html","python/api/tensorstore.Spec.origin.html","python/api/tensorstore.Spec.rank.html","python/api/tensorstore.Spec.schema.html","python/api/tensorstore.Spec.shape.html","python/api/tensorstore.Spec.size.html","python/api/tensorstore.Spec.to_json.html","python/api/tensorstore.Spec.transform.html","python/api/tensorstore.Spec.update.html","python/api/tensorstore.Spec.vindex.html","python/api/tensorstore.TensorStore.html","python/api/tensorstore.TensorStore.T.html","python/api/tensorstore.TensorStore.__array__.html","python/api/tensorstore.TensorStore.__getitem__-domain.html","python/api/tensorstore.TensorStore.__getitem__-expr.html","python/api/tensorstore.TensorStore.__getitem__-indices.html","python/api/tensorstore.TensorStore.__getitem__-transform.html","python/api/tensorstore.TensorStore.__setitem__-domain.html","python/api/tensorstore.TensorStore.__setitem__-expr.html","python/api/tensorstore.TensorStore.__setitem__-indices.html","python/api/tensorstore.TensorStore.__setitem__-transform.html","python/api/tensorstore.TensorStore.astype.html","python/api/tensorstore.TensorStore.chunk_layout.html","python/api/tensorstore.TensorStore.codec.html","python/api/tensorstore.TensorStore.dimension_units.html","python/api/tensorstore.TensorStore.domain.html","python/api/tensorstore.TensorStore.dtype.html","python/api/tensorstore.TensorStore.fill_value.html","python/api/tensorstore.TensorStore.kvstore.html","python/api/tensorstore.TensorStore.mode.html","python/api/tensorstore.TensorStore.ndim.html","python/api/tensorstore.TensorStore.oindex.html","python/api/tensorstore.TensorStore.oindex.__setitem__.html","python/api/tensorstore.TensorStore.origin.html","python/api/tensorstore.TensorStore.rank.html","python/api/tensorstore.TensorStore.read.html","python/api/tensorstore.TensorStore.readable.html","python/api/tensorstore.TensorStore.resolve.html","python/api/tensorstore.TensorStore.schema.html","python/api/tensorstore.TensorStore.shape.html","python/api/tensorstore.TensorStore.size.html","python/api/tensorstore.TensorStore.spec.html","python/api/tensorstore.TensorStore.transaction.html","python/api/tensorstore.TensorStore.vindex.html","python/api/tensorstore.TensorStore.vindex.__setitem__.html","python/api/tensorstore.TensorStore.with_transaction.html","python/api/tensorstore.TensorStore.writable.html","python/api/tensorstore.TensorStore.write.html","python/api/tensorstore.Transaction.html","python/api/tensorstore.Transaction.__init__.html","python/api/tensorstore.Transaction.abort.html","python/api/tensorstore.Transaction.aborted.html","python/api/tensorstore.Transaction.atomic.html","python/api/tensorstore.Transaction.commit_async.html","python/api/tensorstore.Transaction.commit_started.html","python/api/tensorstore.Transaction.commit_sync.html","python/api/tensorstore.Transaction.future.html","python/api/tensorstore.Transaction.open.html","python/api/tensorstore.Unit.html","python/api/tensorstore.Unit.__eq__.html","python/api/tensorstore.Unit.__init__-components.html","python/api/tensorstore.Unit.__init__-json.html","python/api/tensorstore.Unit.__init__-multiplier.html","python/api/tensorstore.Unit.__init__-pair.html","python/api/tensorstore.Unit.__init__-unit.html","python/api/tensorstore.Unit.__mul__.html","python/api/tensorstore.Unit.__truediv__.html","python/api/tensorstore.Unit.base_unit.html","python/api/tensorstore.Unit.multiplier.html","python/api/tensorstore.Unit.to_json.html","python/api/tensorstore.WriteFutures.html","python/api/tensorstore.WriteFutures.add_done_callback.html","python/api/tensorstore.WriteFutures.cancel.html","python/api/tensorstore.WriteFutures.cancelled.html","python/api/tensorstore.WriteFutures.commit.html","python/api/tensorstore.WriteFutures.copy.html","python/api/tensorstore.WriteFutures.done.html","python/api/tensorstore.WriteFutures.exception.html","python/api/tensorstore.WriteFutures.remove_done_callback.html","python/api/tensorstore.WriteFutures.result.html","python/api/tensorstore.array.html","python/api/tensorstore.bfloat16.html","python/api/tensorstore.bool.html","python/api/tensorstore.cast.html","python/api/tensorstore.complex128.html","python/api/tensorstore.complex64.html","python/api/tensorstore.d.html","python/api/tensorstore.d.__class_getitem__.html","python/api/tensorstore.downsample-spec.html","python/api/tensorstore.downsample-store.html","python/api/tensorstore.dtype.html","python/api/tensorstore.dtype.__call__.html","python/api/tensorstore.dtype.__init__-dtype.html","python/api/tensorstore.dtype.__init__-name.html","python/api/tensorstore.dtype.name.html","python/api/tensorstore.dtype.numpy_dtype.html","python/api/tensorstore.dtype.to_json.html","python/api/tensorstore.dtype.type.html","python/api/tensorstore.float16.html","python/api/tensorstore.float32.html","python/api/tensorstore.float64.html","python/api/tensorstore.inf.html","python/api/tensorstore.int16.html","python/api/tensorstore.int32.html","python/api/tensorstore.int64.html","python/api/tensorstore.int8.html","python/api/tensorstore.json.html","python/api/tensorstore.newaxis.html","python/api/tensorstore.open.html","python/api/tensorstore.string.html","python/api/tensorstore.uint16.html","python/api/tensorstore.uint32.html","python/api/tensorstore.uint64.html","python/api/tensorstore.uint8.html","python/api/tensorstore.ustring.html","python/indexing.html","python/tutorial.html","schema.html","spec.html"],envversion:{"sphinx.domains.c":2,"sphinx.domains.changeset":1,"sphinx.domains.citation":1,"sphinx.domains.cpp":4,"sphinx.domains.index":1,"sphinx.domains.javascript":2,"sphinx.domains.math":2,"sphinx.domains.python":3,"sphinx.domains.rst":2,"sphinx.domains.std":2,"sphinx.ext.intersphinx":1,sphinx:56},objects:{"":{"ChunkLayout/Grid":[397,0,1,"json-ChunkLayout/Grid","Constraints on the write/read/codec chunk grids."],"driver/array":[1,0,1,"json-driver/array",""],"driver/cast":[2,0,1,"json-driver/cast",""],"driver/downsample":[3,0,1,"json-driver/downsample",""],"driver/json":[5,0,1,"json-driver/json",""],"driver/n5":[6,0,1,"json-driver/n5",""],"driver/n5/Codec":[6,0,1,"json-driver/n5/Codec",""],"driver/n5/Compression":[6,0,1,"json-driver/n5/Compression",""],"driver/n5/Compression/blosc":[6,0,1,"json-driver/n5/Compression/blosc",""],"driver/n5/Compression/bzip2":[6,0,1,"json-driver/n5/Compression/bzip2",""],"driver/n5/Compression/gzip":[6,0,1,"json-driver/n5/Compression/gzip",""],"driver/n5/Compression/raw":[6,0,1,"json-driver/n5/Compression/raw",""],"driver/n5/Compression/xz":[6,0,1,"json-driver/n5/Compression/xz",""],"driver/neuroglancer_precomputed":[7,0,1,"json-driver/neuroglancer_precomputed",""],"driver/neuroglancer_precomputed/Codec":[7,0,1,"json-driver/neuroglancer_precomputed/Codec","Neuroglancer Precomputed Codec"],"driver/neuroglancer_precomputed/ShardingSpec":[7,0,1,"json-driver/neuroglancer_precomputed/ShardingSpec","Sharding"],"driver/zarr":[8,0,1,"json-driver/zarr",""],"driver/zarr/Codec":[8,0,1,"json-driver/zarr/Codec",""],"driver/zarr/Compressor":[8,0,1,"json-driver/zarr/Compressor","Compressor"],"driver/zarr/Compressor/blosc":[8,0,1,"json-driver/zarr/Compressor/blosc",""],"driver/zarr/Compressor/bz2":[8,0,1,"json-driver/zarr/Compressor/bz2",""],"driver/zarr/Compressor/zlib":[8,0,1,"json-driver/zarr/Compressor/zlib",""],"kvstore/file":[13,0,1,"json-kvstore/file",""],"kvstore/gcs":[14,0,1,"json-kvstore/gcs",""],"kvstore/memory":[16,0,1,"json-kvstore/memory",""],BAZELISK_HOME:[12,9,1,"-",""],CacheRevalidationBound:[4,0,1,"json-CacheRevalidationBound",""],ChunkLayout:[397,0,1,"json-ChunkLayout",""],Codec:[397,0,1,"json-Codec",""],Context:[0,0,1,"json-Context",""],ContextResource:[0,0,1,"json-ContextResource",""],DownsampleMethod:[3,0,1,"json-DownsampleMethod","Downsample method"],GOOGLE_APPLICATION_CREDENTIALS:[9,9,1,"-",""],IndexDomain:[11,0,1,"json-IndexDomain",""],IndexInterval:[11,0,1,"json-IndexInterval","Specifies a closed interval of integer index values."],IndexTransform:[11,0,1,"json-IndexTransform",""],KeyValueStoreBackedChunkDriver:[4,0,1,"json-KeyValueStoreBackedChunkDriver",""],KvStore:[15,0,1,"json-KvStore",""],OutputIndexMap:[11,0,1,"json-OutputIndexMap","Specifies a transform from an input space to a single output index."],SSLKEYLOGFILE:[9,9,1,"-",""],Schema:[397,0,1,"json-Schema",""],TENSORSTORE_BAZELISK:[12,9,1,"-",""],TENSORSTORE_BAZEL_BUILD_OPTIONS:[12,9,1,"-",""],TENSORSTORE_BAZEL_COMPILATION_MODE:[12,9,1,"-",""],TENSORSTORE_BAZEL_STARTUP_OPTIONS:[12,9,1,"-",""],TENSORSTORE_CA_BUNDLE:[9,9,1,"-",""],TENSORSTORE_CA_PATH:[9,9,1,"-",""],TENSORSTORE_CURL_VERBOSE:[9,9,1,"-",""],TENSORSTORE_GCS_HTTP_URL:[9,9,1,"-",""],TENSORSTORE_PREBUILT_DIR:[12,9,1,"-",""],TENSORSTORE_SYSTEM_LIBS:[12,9,1,"-",""],TensorStore:[398,0,1,"json-TensorStore","Specifies a TensorStore to open/create."],Unit:[397,0,1,"json-Unit","Specifies a physical quantity/unit."],all_proxy:[9,9,1,"-",""],dtype:[398,0,1,"json-dtype","Specifies a TensorStore data type."],http_proxy:[9,9,1,"-",""],https_proxy:[9,9,1,"-",""],no_proxy:[9,9,1,"-",""]},"ChunkLayout/Grid":{aspect_ratio:[397,1,2,"json-ChunkLayout/Grid.aspect_ratio","Aspect ratio of the chunk shape."],aspect_ratio_soft_constraint:[397,1,2,"json-ChunkLayout/Grid.aspect_ratio_soft_constraint","Soft constraint on aspect ratio, lower precedence than aspect_ratio."],elements:[397,1,2,"json-ChunkLayout/Grid.elements","Preferred number of elements per chunk."],elements_soft_constraint:[397,1,2,"json-ChunkLayout/Grid.elements_soft_constraint","Preferred number of elements per chunk, lower precedence than\nelements."],shape:[397,1,2,"json-ChunkLayout/Grid.shape","Hard constraints on the chunk size for each dimension."],shape_soft_constraint:[397,1,2,"json-ChunkLayout/Grid.shape_soft_constraint","Preferred chunk sizes for each dimension."]},"Context.cache_pool":{queued_for_writeback_bytes_limit:[0,1,2,"json-Context.cache_pool.queued_for_writeback_bytes_limit",""],total_bytes_limit:[0,1,2,"json-Context.cache_pool.total_bytes_limit",""]},"Context.data_copy_concurrency":{limit:[0,1,2,"json-Context.data_copy_concurrency.limit",""]},"Context.file_io_concurrency":{limit:[0,1,2,"json-Context.file_io_concurrency.limit",""]},"Context.gcs_request_concurrency":{limit:[14,1,2,"json-Context.gcs_request_concurrency.limit",""]},"Context.gcs_request_retries":{max_retries:[14,1,2,"json-Context.gcs_request_retries.max_retries",""]},"Context.gcs_user_project":{project_id:[14,1,2,"json-Context.gcs_user_project.project_id","Google Cloud project id, e.g. \"my-project\".  The Google Cloud\naccount that is used must have appropriate permissions to bill to the\nspecified project."]},"driver/array":{array:[1,1,2,"json-driver/array.array","Nested array of rank equal to rank specifying the initial value."],context:[1,1,2,"json-driver/array.context","Specifies context resources that augment/override the parent context."],driver:[1,1,2,"json-driver/array.driver",""],dtype:[1,1,2,"json-driver/array.dtype","Specifies the data type."],rank:[1,1,2,"json-driver/array.rank","Specifies the rank of the TensorStore."],transform:[1,1,2,"json-driver/array.transform","Specifies a transform."]},"driver/cast":{base:[2,1,2,"json-driver/cast.base","Base TensorStore to convert."],context:[2,1,2,"json-driver/cast.context","Specifies context resources that augment/override the parent context."],driver:[2,1,2,"json-driver/cast.driver",""],dtype:[2,1,2,"json-driver/cast.dtype","Specifies the data type under which to view the base TensorStore."],rank:[2,1,2,"json-driver/cast.rank","Specifies the rank of the TensorStore."],transform:[2,1,2,"json-driver/cast.transform","Specifies a transform."]},"driver/downsample":{base:[3,1,2,"json-driver/downsample.base","Base TensorStore to downsample."],context:[3,1,2,"json-driver/downsample.context","Specifies context resources that augment/override the parent context."],downsample_factors:[3,1,2,"json-driver/downsample.downsample_factors",""],downsample_method:[3,1,2,"json-driver/downsample.downsample_method",""],driver:[3,1,2,"json-driver/downsample.driver",""],dtype:[3,1,2,"json-driver/downsample.dtype","Specifies the data type."],rank:[3,1,2,"json-driver/downsample.rank","Specifies the rank of the TensorStore."],transform:[3,1,2,"json-driver/downsample.transform","Specifies a transform."]},"driver/json":{cache_pool:[5,1,2,"json-driver/json.cache_pool",""],context:[5,1,2,"json-driver/json.context","Specifies context resources that augment/override the parent context."],data_copy_concurrency:[5,1,2,"json-driver/json.data_copy_concurrency",""],driver:[5,1,2,"json-driver/json.driver",""],dtype:[5,1,2,"json-driver/json.dtype",""],json_pointer:[5,1,2,"json-driver/json.json_pointer",""],kvstore:[5,1,2,"json-driver/json.kvstore",""],path:[5,1,2,"json-driver/json.path","Additional path to the JSON file within the KvStore specified by\nkvstore."],rank:[5,1,2,"json-driver/json.rank",""],recheck_cached_data:[5,1,2,"json-driver/json.recheck_cached_data",""],transform:[5,1,2,"json-driver/json.transform","Specifies a transform."]},"driver/n5":{cache_pool:[6,1,2,"json-driver/n5.cache_pool",""],context:[6,1,2,"json-driver/n5.context","Specifies context resources that augment/override the parent context."],create:[6,1,2,"json-driver/n5.create",""],data_copy_concurrency:[6,1,2,"json-driver/n5.data_copy_concurrency",""],delete_existing:[6,1,2,"json-driver/n5.delete_existing",""],driver:[6,1,2,"json-driver/n5.driver",""],dtype:[6,1,2,"json-driver/n5.dtype","Specifies the data type."],kvstore:[6,1,2,"json-driver/n5.kvstore",""],metadata:[6,1,2,"json-driver/n5.metadata","N5 array metadata."],open:[6,1,2,"json-driver/n5.open",""],path:[6,1,2,"json-driver/n5.path","Additional path within the KvStore specified by\nkvstore."],rank:[6,1,2,"json-driver/n5.rank","Specifies the rank of the TensorStore."],recheck_cached_data:[6,1,2,"json-driver/n5.recheck_cached_data",""],recheck_cached_metadata:[6,1,2,"json-driver/n5.recheck_cached_metadata",""],transform:[6,1,2,"json-driver/n5.transform","Specifies a transform."]},"driver/n5.metadata":{axes:[6,1,2,"json-driver/n5.metadata.axes","Specifies a label for each dimension of the dataset."],blockSize:[6,1,2,"json-driver/n5.metadata.blockSize","Chunk dimensions."],compression:[6,1,2,"json-driver/n5.metadata.compression","Specifies the chunk compression method."],dataType:[6,1,2,"json-driver/n5.metadata.dataType","Specifies the data type."],dimensions:[6,1,2,"json-driver/n5.metadata.dimensions","Dimensions of the dataset."],resolution:[6,1,2,"json-driver/n5.metadata.resolution","Specifies the multiplier for the physical units."],units:[6,1,2,"json-driver/n5.metadata.units","Specifies the base physical unit for each dimension."]},"driver/n5/Codec":{compression:[6,1,2,"json-driver/n5/Codec.compression","Specifies the chunk compression method."],driver:[6,1,2,"json-driver/n5/Codec.driver",""]},"driver/n5/Compression":{type:[6,1,2,"json-driver/n5/Compression.type",""]},"driver/n5/Compression/blosc":{clevel:[6,1,2,"json-driver/n5/Compression/blosc.clevel","Specifies the Blosc compression level to use."],cname:[6,1,2,"json-driver/n5/Compression/blosc.cname",""],shuffle:[6,1,2,"json-driver/n5/Compression/blosc.shuffle",""],type:[6,1,2,"json-driver/n5/Compression/blosc.type",""]},"driver/n5/Compression/bzip2":{blockSize:[6,1,2,"json-driver/n5/Compression/bzip2.blockSize","Specifies the bzip2 block size to use (in units of 100KB), which also determine the compression level."],type:[6,1,2,"json-driver/n5/Compression/bzip2.type",""]},"driver/n5/Compression/gzip":{level:[6,1,2,"json-driver/n5/Compression/gzip.level","Specifies the zlib compression level to use."],type:[6,1,2,"json-driver/n5/Compression/gzip.type",""],useZlib:[6,1,2,"json-driver/n5/Compression/gzip.useZlib",""]},"driver/n5/Compression/raw":{type:[6,1,2,"json-driver/n5/Compression/raw.type",""]},"driver/n5/Compression/xz":{preset:[6,1,2,"json-driver/n5/Compression/xz.preset",""],type:[6,1,2,"json-driver/n5/Compression/xz.type",""]},"driver/neuroglancer_precomputed":{cache_pool:[7,1,2,"json-driver/neuroglancer_precomputed.cache_pool",""],context:[7,1,2,"json-driver/neuroglancer_precomputed.context","Specifies context resources that augment/override the parent context."],create:[7,1,2,"json-driver/neuroglancer_precomputed.create",""],data_copy_concurrency:[7,1,2,"json-driver/neuroglancer_precomputed.data_copy_concurrency",""],delete_existing:[7,1,2,"json-driver/neuroglancer_precomputed.delete_existing",""],driver:[7,1,2,"json-driver/neuroglancer_precomputed.driver",""],dtype:[7,1,2,"json-driver/neuroglancer_precomputed.dtype","Specifies the data type."],kvstore:[7,1,2,"json-driver/neuroglancer_precomputed.kvstore",""],multiscale_metadata:[7,1,2,"json-driver/neuroglancer_precomputed.multiscale_metadata","Scale-independent metadata."],open:[7,1,2,"json-driver/neuroglancer_precomputed.open",""],path:[7,1,2,"json-driver/neuroglancer_precomputed.path","Additional path within the KvStore specified by\nkvstore."],rank:[7,1,2,"json-driver/neuroglancer_precomputed.rank","Specifies the rank of the TensorStore."],recheck_cached_data:[7,1,2,"json-driver/neuroglancer_precomputed.recheck_cached_data",""],recheck_cached_metadata:[7,1,2,"json-driver/neuroglancer_precomputed.recheck_cached_metadata",""],scale_index:[7,1,2,"json-driver/neuroglancer_precomputed.scale_index","Zero-based index of the scale to open or create."],scale_metadata:[7,1,2,"json-driver/neuroglancer_precomputed.scale_metadata","Per-scale metadata."],transform:[7,1,2,"json-driver/neuroglancer_precomputed.transform","Specifies a transform."]},"driver/neuroglancer_precomputed.multiscale_metadata":{data_type:[7,1,2,"json-driver/neuroglancer_precomputed.multiscale_metadata.data_type","Specifies the data type."],num_channels:[7,1,2,"json-driver/neuroglancer_precomputed.multiscale_metadata.num_channels","Number of channels."],type:[7,1,2,"json-driver/neuroglancer_precomputed.multiscale_metadata.type","Specifying the type of volume."]},"driver/neuroglancer_precomputed.scale_metadata":{chunk_size:[7,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.chunk_size","Chunk dimensions (XYZ order)."],compressed_segmentation_block_size:[7,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.compressed_segmentation_block_size","Block size for compressed segmentation encoding."],encoding:[7,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.encoding","Specifies the chunk encoding."],jpeg_quality:[7,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.jpeg_quality","JPEG encoding quality."],key:[7,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.key","Specifies the scale key (relative to path)."],resolution:[7,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.resolution","Voxel size in nanometers (XYZ order)."],sharding:[7,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.sharding",""],size:[7,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.size","Voxel dimensions of the volume (XYZ order)."],voxel_offset:[7,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.voxel_offset","Voxel origin of the volume (XYZ order)."]},"driver/neuroglancer_precomputed/Codec":{driver:[7,1,2,"json-driver/neuroglancer_precomputed/Codec.driver",""],encoding:[7,1,2,"json-driver/neuroglancer_precomputed/Codec.encoding","Specifies the chunk encoding."],jpeg_quality:[7,1,2,"json-driver/neuroglancer_precomputed/Codec.jpeg_quality","JPEG encoding quality."],shard_data_encoding:[7,1,2,"json-driver/neuroglancer_precomputed/Codec.shard_data_encoding","Additional data compression when using the sharded format."]},"driver/neuroglancer_precomputed/ShardingSpec":{"@type":[7,1,2,"json-driver/neuroglancer_precomputed/ShardingSpec.@type",""],data_encoding:[7,1,2,"json-driver/neuroglancer_precomputed/ShardingSpec.data_encoding","Specifies the encoding of the data chunks."],hash:[7,1,2,"json-driver/neuroglancer_precomputed/ShardingSpec.hash","Specifies the hash function used to map chunk IDs to shards."],minishard_bits:[7,1,2,"json-driver/neuroglancer_precomputed/ShardingSpec.minishard_bits","Number of bits of the hashed chunk ID that determine the minishard number."],minishard_index_encoding:[7,1,2,"json-driver/neuroglancer_precomputed/ShardingSpec.minishard_index_encoding","Specifies the encoding of the minishard index."],preshift_bits:[7,1,2,"json-driver/neuroglancer_precomputed/ShardingSpec.preshift_bits","Number of low-order bits of the chunk ID that do not contribute to the hashed chunk ID."],shard_bits:[7,1,2,"json-driver/neuroglancer_precomputed/ShardingSpec.shard_bits","Number of bits of the hashed chunk ID that determine the shard number."]},"driver/zarr":{cache_pool:[8,1,2,"json-driver/zarr.cache_pool",""],context:[8,1,2,"json-driver/zarr.context","Specifies context resources that augment/override the parent context."],create:[8,1,2,"json-driver/zarr.create",""],data_copy_concurrency:[8,1,2,"json-driver/zarr.data_copy_concurrency",""],delete_existing:[8,1,2,"json-driver/zarr.delete_existing",""],driver:[8,1,2,"json-driver/zarr.driver",""],dtype:[8,1,2,"json-driver/zarr.dtype","Specifies the data type."],field:[8,1,2,"json-driver/zarr.field","Name of field to open."],key_encoding:[8,1,2,"json-driver/zarr.key_encoding","Specifies the encoding of chunk indices into key-value store keys."],kvstore:[8,1,2,"json-driver/zarr.kvstore",""],metadata:[8,1,2,"json-driver/zarr.metadata","Zarr array metadata."],open:[8,1,2,"json-driver/zarr.open",""],path:[8,1,2,"json-driver/zarr.path","Additional path within the KvStore specified by\nkvstore."],rank:[8,1,2,"json-driver/zarr.rank","Specifies the rank of the TensorStore."],recheck_cached_data:[8,1,2,"json-driver/zarr.recheck_cached_data",""],recheck_cached_metadata:[8,1,2,"json-driver/zarr.recheck_cached_metadata",""],transform:[8,1,2,"json-driver/zarr.transform","Specifies a transform."]},"driver/zarr.metadata":{chunks:[8,1,2,"json-driver/zarr.metadata.chunks","Chunk dimensions."],compressor:[8,1,2,"json-driver/zarr.metadata.compressor","Specifies the chunk compression method."],dimension_separator:[8,1,2,"json-driver/zarr.metadata.dimension_separator","Specifies the encoding of chunk indices into key-value store keys."],dtype:[8,1,2,"json-driver/zarr.metadata.dtype","Specifies the scalar or structured data type."],fill_value:[8,1,2,"json-driver/zarr.metadata.fill_value","Specifies the fill value."],filters:[8,1,2,"json-driver/zarr.metadata.filters","Specifies the filters to apply to chunks."],order:[8,1,2,"json-driver/zarr.metadata.order","Specifies the data layout for encoded chunks."],shape:[8,1,2,"json-driver/zarr.metadata.shape","Chunked dimensions of the array."],zarr_format:[8,1,2,"json-driver/zarr.metadata.zarr_format",""]},"driver/zarr/Codec":{compressor:[8,1,2,"json-driver/zarr/Codec.compressor","Specifies the chunk compression method."],driver:[8,1,2,"json-driver/zarr/Codec.driver",""],filters:[8,1,2,"json-driver/zarr/Codec.filters","Specifies the filters to apply to chunks."]},"driver/zarr/Compressor":{id:[8,1,2,"json-driver/zarr/Compressor.id",""]},"driver/zarr/Compressor/blosc":{blocksize:[8,1,2,"json-driver/zarr/Compressor/blosc.blocksize","Specifies the Blosc blocksize."],clevel:[8,1,2,"json-driver/zarr/Compressor/blosc.clevel","Specifies the Blosc compression level to use."],cname:[8,1,2,"json-driver/zarr/Compressor/blosc.cname",""],id:[8,1,2,"json-driver/zarr/Compressor/blosc.id",""],shuffle:[8,1,2,"json-driver/zarr/Compressor/blosc.shuffle",""]},"driver/zarr/Compressor/bz2":{id:[8,1,2,"json-driver/zarr/Compressor/bz2.id",""],level:[8,1,2,"json-driver/zarr/Compressor/bz2.level","Specifies the bzip2 buffer size/compression level to use."]},"driver/zarr/Compressor/zlib":{id:[8,1,2,"json-driver/zarr/Compressor/zlib.id",""],level:[8,1,2,"json-driver/zarr/Compressor/zlib.level","Specifies the zlib compression level to use."]},"kvstore/file":{context:[13,1,2,"json-kvstore/file.context",""],driver:[13,1,2,"json-kvstore/file.driver",""],file_io_concurrency:[13,1,2,"json-kvstore/file.file_io_concurrency",""],path:[13,1,2,"json-kvstore/file.path","Path to root directory on local filesystem."]},"kvstore/gcs":{bucket:[14,1,2,"json-kvstore/gcs.bucket","Google Cloud Storage bucket to use."],context:[14,1,2,"json-kvstore/gcs.context",""],driver:[14,1,2,"json-kvstore/gcs.driver",""],gcs_request_concurrency:[14,1,2,"json-kvstore/gcs.gcs_request_concurrency",""],gcs_request_retries:[14,1,2,"json-kvstore/gcs.gcs_request_retries",""],gcs_user_project:[14,1,2,"json-kvstore/gcs.gcs_user_project",""],path:[14,1,2,"json-kvstore/gcs.path","Key prefix within the key-value store."]},"kvstore/memory":{atomic:[16,1,2,"json-kvstore/memory.atomic",""],context:[16,1,2,"json-kvstore/memory.context",""],driver:[16,1,2,"json-kvstore/memory.driver",""],memory_key_value_store:[16,1,2,"json-kvstore/memory.memory_key_value_store",""],path:[16,1,2,"json-kvstore/memory.path","Key prefix within the key-value store."]},"tensorstore.ChunkLayout":{"__init__(components)":[34,3,1,"","Constructs from component parts."],"__init__(json)":[35,3,1,"","Constructs from the JSON representation."],Grid:[19,2,1,"","Describes a regular grid layout for write/read/codec chunks."],__eq__:[33,3,1,"","Compares two chunk layouts for equality."],codec_chunk:[36,5,1,"","Chunk grid used by the codec."],grid_origin:[37,5,1,"","Hard constraints on the grid origin."],grid_origin_soft_constraint:[38,5,1,"","Soft constraints on the grid origin."],inner_order:[39,5,1,"","Permutation specifying the element storage order within the innermost chunks."],inner_order_soft_constraint:[40,5,1,"","Permutation specifying soft constraint on the element storage order."],ndim:[41,5,1,"","Alias for rank."],rank:[42,5,1,"","Number of dimensions in the index space."],read_chunk:[43,5,1,"","Chunk grid for efficient reads."],read_chunk_template:[44,5,1,"","Chunk offset and shape for efficient reads."],to_json:[45,3,1,"","Converts to the JSON representation."],update:[46,3,1,"","Adds additional constraints."],write_chunk:[47,5,1,"","Chunk grid for efficient writes."],write_chunk_template:[48,5,1,"","Chunk offset and shape for efficient writes."]},"tensorstore.ChunkLayout.Grid":{"__init__(components)":[21,3,1,"","Constructs a chunk grid."],"__init__(json)":[22,3,1,"","Constructs from the JSON representation."],__eq__:[20,3,1,"","Compares two chunk grids for equality."],aspect_ratio:[23,5,1,"","Chunk shape aspect ratio."],aspect_ratio_soft_constraint:[24,5,1,"","Soft constraints on chunk shape aspect ratio."],elements:[25,5,1,"","Target number of elements per chunk."],elements_soft_constraint:[26,5,1,"","Soft constraint on target number of elements per chunk."],ndim:[27,5,1,"","Alias for rank."],rank:[28,5,1,"","Number of dimensions, or None if unspecified."],shape:[29,5,1,"","Hard constraints on chunk shape."],shape_soft_constraint:[30,5,1,"","Soft constraints on chunk shape."],to_json:[31,3,1,"","Converts to the JSON representation."],update:[32,3,1,"","Adds additional constraints."]},"tensorstore.ChunkLayout.Grid.__init__(components)":{aspect_ratio:[21,4,2,"p-aspect_ratio","Aspect ratio for each dimension."],aspect_ratio_soft_constraint:[21,4,2,"p-aspect_ratio_soft_constraint","Soft constraints on the aspect ratio for each dimension."],elements:[21,4,2,"p-elements","Target number of elements per chunk."],elements_soft_constraint:[21,4,2,"p-elements_soft_constraint","Soft constraint on the target number of elements per chunk."],grid:[21,4,2,"p-grid","Other grid constraints to merge in."],grid_soft_constraint:[21,4,2,"p-grid_soft_constraint","Other grid constraints to merge in as soft constraints."],rank:[21,4,2,"p-rank","Specifies the number of dimensions."],shape:[21,4,2,"p-shape","Hard constraints on the chunk size for each dimension."],shape_soft_constraint:[21,4,2,"p-shape_soft_constraint","Soft constraints on the chunk size for each dimension."]},"tensorstore.ChunkLayout.Grid.update":{aspect_ratio:[32,4,2,"p-aspect_ratio","Aspect ratio for each dimension."],aspect_ratio_soft_constraint:[32,4,2,"p-aspect_ratio_soft_constraint","Soft constraints on the aspect ratio for each dimension."],elements:[32,4,2,"p-elements","Target number of elements per chunk."],elements_soft_constraint:[32,4,2,"p-elements_soft_constraint","Soft constraint on the target number of elements per chunk."],grid:[32,4,2,"p-grid","Other grid constraints to merge in."],grid_soft_constraint:[32,4,2,"p-grid_soft_constraint","Other grid constraints to merge in as soft constraints."],rank:[32,4,2,"p-rank","Specifies the number of dimensions."],shape:[32,4,2,"p-shape","Hard constraints on the chunk size for each dimension."],shape_soft_constraint:[32,4,2,"p-shape_soft_constraint","Soft constraints on the chunk size for each dimension."]},"tensorstore.ChunkLayout.__init__(components)":{chunk:[34,4,2,"p-chunk","Common constraints on write, read, and codec chunks."],chunk_aspect_ratio:[34,4,2,"p-chunk_aspect_ratio","Hard constraints on the write, read, and codec chunk aspect ratio."],chunk_aspect_ratio_soft_constraint:[34,4,2,"p-chunk_aspect_ratio_soft_constraint","Soft constraints on the write, read, and codec chunk aspect ratio."],chunk_elements:[34,4,2,"p-chunk_elements","Hard constraints on the target number of elements for write and read chunks.\nCorresponds to the JSON elements member of\nChunkLayout.chunk."],chunk_elements_soft_constraint:[34,4,2,"p-chunk_elements_soft_constraint","Soft constraints on the target number of elements for write and read chunks.\nCorresponds to the JSON\nelements_soft_constraint member of\nChunkLayout.chunk."],chunk_shape:[34,4,2,"p-chunk_shape","Hard constraints on both the write and read chunk shape."],chunk_shape_soft_constraint:[34,4,2,"p-chunk_shape_soft_constraint","Soft constraints on both the write and read chunk shape."],codec_chunk:[34,4,2,"p-codec_chunk","Constraints on codec chunks."],codec_chunk_aspect_ratio:[34,4,2,"p-codec_chunk_aspect_ratio","Soft constraints on the codec chunk aspect ratio."],codec_chunk_aspect_ratio_soft_constraint:[34,4,2,"p-codec_chunk_aspect_ratio_soft_constraint","Soft constraints on the codec chunk aspect ratio."],codec_chunk_elements:[34,4,2,"p-codec_chunk_elements","Hard constraints on the target number of elements for codec chunks."],codec_chunk_elements_soft_constraint:[34,4,2,"p-codec_chunk_elements_soft_constraint","Soft constraints on the target number of elements for codec chunks."],codec_chunk_shape:[34,4,2,"p-codec_chunk_shape","Soft constraints on the codec chunk shape."],codec_chunk_shape_soft_constraint:[34,4,2,"p-codec_chunk_shape_soft_constraint","Soft constraints on the codec chunk shape."],finalize:[34,4,2,"p-finalize","Validates and converts the layout into a precise chunk\nlayout."],grid_origin:[34,4,2,"p-grid_origin","Hard constraints on the origin of the chunk grid.\nCorresponds to the JSON ChunkLayout.grid_origin member."],grid_origin_soft_constraint:[34,4,2,"p-grid_origin_soft_constraint","Soft constraints on the origin of the chunk grid."],inner_order:[34,4,2,"p-inner_order","Permutation specifying the element storage order within the innermost chunks.\nCorresponds to the JSON ChunkLayout.inner_order member."],inner_order_soft_constraint:[34,4,2,"p-inner_order_soft_constraint","Specifies a preferred value for inner_order rather than a\nhard constraint."],rank:[34,4,2,"p-rank","Specifies the number of dimensions."],read_chunk:[34,4,2,"p-read_chunk","Constraints on read chunks."],read_chunk_aspect_ratio:[34,4,2,"p-read_chunk_aspect_ratio","Hard constraints on the read chunk aspect ratio."],read_chunk_aspect_ratio_soft_constraint:[34,4,2,"p-read_chunk_aspect_ratio_soft_constraint","Soft constraints on the read chunk aspect ratio."],read_chunk_elements:[34,4,2,"p-read_chunk_elements","Hard constraints on the target number of elements for read chunks."],read_chunk_elements_soft_constraint:[34,4,2,"p-read_chunk_elements_soft_constraint","Soft constraints on the target number of elements for read chunks."],read_chunk_shape:[34,4,2,"p-read_chunk_shape","Hard constraints on the read chunk shape."],read_chunk_shape_soft_constraint:[34,4,2,"p-read_chunk_shape_soft_constraint","Soft constraints on the read chunk shape."],write_chunk:[34,4,2,"p-write_chunk","Constraints on write chunks."],write_chunk_aspect_ratio:[34,4,2,"p-write_chunk_aspect_ratio","Hard constraints on the write chunk aspect ratio."],write_chunk_aspect_ratio_soft_constraint:[34,4,2,"p-write_chunk_aspect_ratio_soft_constraint","Soft constraints on the write chunk aspect ratio."],write_chunk_elements:[34,4,2,"p-write_chunk_elements","Hard constraints on the target number of elements for write chunks."],write_chunk_elements_soft_constraint:[34,4,2,"p-write_chunk_elements_soft_constraint","Soft constraints on the target number of elements for write chunks."],write_chunk_shape:[34,4,2,"p-write_chunk_shape","Hard constraints on the write chunk shape."],write_chunk_shape_soft_constraint:[34,4,2,"p-write_chunk_shape_soft_constraint","Soft constraints on the write chunk shape."]},"tensorstore.ChunkLayout.update":{chunk:[46,4,2,"p-chunk","Common constraints on write, read, and codec chunks."],chunk_aspect_ratio:[46,4,2,"p-chunk_aspect_ratio","Hard constraints on the write, read, and codec chunk aspect ratio."],chunk_aspect_ratio_soft_constraint:[46,4,2,"p-chunk_aspect_ratio_soft_constraint","Soft constraints on the write, read, and codec chunk aspect ratio."],chunk_elements:[46,4,2,"p-chunk_elements","Hard constraints on the target number of elements for write and read chunks.\nCorresponds to the JSON elements member of\nChunkLayout.chunk."],chunk_elements_soft_constraint:[46,4,2,"p-chunk_elements_soft_constraint","Soft constraints on the target number of elements for write and read chunks.\nCorresponds to the JSON\nelements_soft_constraint member of\nChunkLayout.chunk."],chunk_shape:[46,4,2,"p-chunk_shape","Hard constraints on both the write and read chunk shape."],chunk_shape_soft_constraint:[46,4,2,"p-chunk_shape_soft_constraint","Soft constraints on both the write and read chunk shape."],codec_chunk:[46,4,2,"p-codec_chunk","Constraints on codec chunks."],codec_chunk_aspect_ratio:[46,4,2,"p-codec_chunk_aspect_ratio","Soft constraints on the codec chunk aspect ratio."],codec_chunk_aspect_ratio_soft_constraint:[46,4,2,"p-codec_chunk_aspect_ratio_soft_constraint","Soft constraints on the codec chunk aspect ratio."],codec_chunk_elements:[46,4,2,"p-codec_chunk_elements","Hard constraints on the target number of elements for codec chunks."],codec_chunk_elements_soft_constraint:[46,4,2,"p-codec_chunk_elements_soft_constraint","Soft constraints on the target number of elements for codec chunks."],codec_chunk_shape:[46,4,2,"p-codec_chunk_shape","Soft constraints on the codec chunk shape."],codec_chunk_shape_soft_constraint:[46,4,2,"p-codec_chunk_shape_soft_constraint","Soft constraints on the codec chunk shape."],finalize:[46,4,2,"p-finalize","Validates and converts the layout into a precise chunk\nlayout."],grid_origin:[46,4,2,"p-grid_origin","Hard constraints on the origin of the chunk grid.\nCorresponds to the JSON ChunkLayout.grid_origin member."],grid_origin_soft_constraint:[46,4,2,"p-grid_origin_soft_constraint","Soft constraints on the origin of the chunk grid."],inner_order:[46,4,2,"p-inner_order","Permutation specifying the element storage order within the innermost chunks.\nCorresponds to the JSON ChunkLayout.inner_order member."],inner_order_soft_constraint:[46,4,2,"p-inner_order_soft_constraint","Specifies a preferred value for inner_order rather than a\nhard constraint."],rank:[46,4,2,"p-rank","Specifies the number of dimensions."],read_chunk:[46,4,2,"p-read_chunk","Constraints on read chunks."],read_chunk_aspect_ratio:[46,4,2,"p-read_chunk_aspect_ratio","Hard constraints on the read chunk aspect ratio."],read_chunk_aspect_ratio_soft_constraint:[46,4,2,"p-read_chunk_aspect_ratio_soft_constraint","Soft constraints on the read chunk aspect ratio."],read_chunk_elements:[46,4,2,"p-read_chunk_elements","Hard constraints on the target number of elements for read chunks."],read_chunk_elements_soft_constraint:[46,4,2,"p-read_chunk_elements_soft_constraint","Soft constraints on the target number of elements for read chunks."],read_chunk_shape:[46,4,2,"p-read_chunk_shape","Hard constraints on the read chunk shape."],read_chunk_shape_soft_constraint:[46,4,2,"p-read_chunk_shape_soft_constraint","Soft constraints on the read chunk shape."],write_chunk:[46,4,2,"p-write_chunk","Constraints on write chunks."],write_chunk_aspect_ratio:[46,4,2,"p-write_chunk_aspect_ratio","Hard constraints on the write chunk aspect ratio."],write_chunk_aspect_ratio_soft_constraint:[46,4,2,"p-write_chunk_aspect_ratio_soft_constraint","Soft constraints on the write chunk aspect ratio."],write_chunk_elements:[46,4,2,"p-write_chunk_elements","Hard constraints on the target number of elements for write chunks."],write_chunk_elements_soft_constraint:[46,4,2,"p-write_chunk_elements_soft_constraint","Soft constraints on the target number of elements for write chunks."],write_chunk_shape:[46,4,2,"p-write_chunk_shape","Hard constraints on the write chunk shape."],write_chunk_shape_soft_constraint:[46,4,2,"p-write_chunk_shape_soft_constraint","Soft constraints on the write chunk shape."]},"tensorstore.CodecSpec":{__init__:[50,3,1,"","Constructs from the JSON representation."],to_json:[51,3,1,"","Converts to the JSON representation."]},"tensorstore.Context":{"__init__(default)":[59,3,1,"","Constructs a default context."],"__init__(json)":[60,3,1,"","Constructs a context from its JSON representation."],"__init__(spec)":[61,3,1,"","Constructs a context from a parsed spec."],Resource:[53,2,1,"","Handle to a context resource."],Spec:[55,2,1,"","Parsed representation of a JSON Context specification."],__getitem__:[58,3,1,"","Creates or retrieves the context resource for the given key."],parent:[62,5,1,"","Parent context from which this context inherits."],spec:[63,5,1,"","Spec from which this context was constructed."]},"tensorstore.Context.Resource":{to_json:[54,3,1,"","Returns the JSON representation of the context resource."]},"tensorstore.Context.Spec":{__init__:[56,3,1,"","Creates a context specification from its JSON representation."],to_json:[57,3,1,"","Returns the JSON representation."]},"tensorstore.Context.Spec.to_json":{include_defaults:[57,4,2,"p-include_defaults","Indicates whether to include members even if they are equal to the default value."]},"tensorstore.Context.__getitem__":{key:[58,4,2,"p-key","Resource key, of the form '<resource-type>' or\n<resource-type>#<id>."]},"tensorstore.Context.__init__(json)":{json:[60,4,2,"p-json","JSON representation of the context."],parent:[60,4,2,"p-parent","Parent context from which to inherit."]},"tensorstore.Context.__init__(spec)":{parent:[61,4,2,"p-parent","Parent context from which to inherit."],spec:[61,4,2,"p-spec","Parsed context spec."]},"tensorstore.Dim":{"__contains__(dim)":[65,3,1,"","Checks if the interval contains another interval."],"__contains__(index)":[66,3,1,"","Checks if the interval contains a given index."],"__init__(exclusive_max)":[68,3,1,"","Constructs a half-open interval [inclusive_min, exclusive_max)`."],"__init__(inclusive_max)":[69,3,1,"","Constructs a closed interval [inclusive_min, inclusive_max]."],"__init__(size)":[70,3,1,"","Constructs a sized interval [inclusive_min, inclusive_min+size)."],"__init__(unbounded)":[71,3,1,"","Constructs an unbounded interval (-inf, +inf)."],__eq__:[67,3,1,"","Compares for equality with another interval."],__iter__:[72,3,1,"","Enables iteration over the indices contained in the interval."],__len__:[73,3,1,"","Size of the interval, equivalent to size."],__repr__:[74,3,1,"","Returns the string representation as a Python expression."],__str__:[75,3,1,"","Returns the string representation of the interval."],empty:[76,5,1,"","Returns True if size is zero."],exclusive_max:[77,5,1,"","Exclusive upper bound of the interval."],exclusive_min:[78,5,1,"","Exclusive lower bound of the interval."],finite:[79,5,1,"","Indicates if the interval is finite."],hull:[80,3,1,"","Hull with another Dim."],implicit_lower:[81,5,1,"","Indicates if the lower bound is implicit/resizeable."],implicit_upper:[82,5,1,"","Indicates if the upper bound is implicit/resizeable."],inclusive_max:[83,5,1,"","Inclusive upper bound of the interval."],inclusive_min:[84,5,1,"","Inclusive lower bound of the interval."],intersect:[85,3,1,"","Intersect with another Dim."],label:[86,5,1,"","Dimension label, or the empty string to indicate an unlabeled dimension."],size:[87,5,1,"","Size of the interval."]},"tensorstore.Dim.__init__(exclusive_max)":{exclusive_max:[68,4,2,"p-exclusive_max","Exclusive upper bound."],implicit_lower:[68,4,2,"p-implicit_lower","Indicates whether the lower bound is\nimplicit."],implicit_upper:[68,4,2,"p-implicit_upper","Indicates whether the upper bound is\nimplicit."],inclusive_min:[68,4,2,"p-inclusive_min","Inclusive lower bound."],label:[68,4,2,"p-label","Dimension label."]},"tensorstore.Dim.__init__(inclusive_max)":{implicit_lower:[69,4,2,"p-implicit_lower","Indicates whether the lower bound is\nimplicit."],implicit_upper:[69,4,2,"p-implicit_upper","Indicates whether the upper bound is\nimplicit."],inclusive_max:[69,4,2,"p-inclusive_max","Inclusive upper bound."],inclusive_min:[69,4,2,"p-inclusive_min","Inclusive lower bound."],label:[69,4,2,"p-label","Dimension label."]},"tensorstore.Dim.__init__(size)":{implicit_lower:[70,4,2,"p-implicit_lower","Indicates whether the lower bound is\nimplicit."],implicit_upper:[70,4,2,"p-implicit_upper","Indicates whether the upper bound is\nimplicit."],inclusive_min:[70,4,2,"p-inclusive_min","Inclusive lower bound."],label:[70,4,2,"p-label","Dimension label."],size:[70,4,2,"p-size","Size of the interval."]},"tensorstore.Dim.__init__(unbounded)":{implicit_lower:[71,4,2,"p-implicit_lower","Indicates whether the lower bound is\nimplicit."],implicit_upper:[71,4,2,"p-implicit_upper","Indicates whether the upper bound is\nimplicit."],label:[71,4,2,"p-label","Dimension label."]},"tensorstore.Dim.hull":{other:[80,4,2,"p-other","Object to hull with."]},"tensorstore.Dim.intersect":{other:[85,4,2,"p-other","Object to intersect with."]},"tensorstore.DimExpression":{__getitem__:[89,3,1,"","Applies a NumPy-style indexing operation with default index array semantics."],diagonal:[90,5,1,"","Extracts the diagonal of the selected dimensions."],label:[91,3,1,"","Sets (or changes) the labels of the selected dimensions."],oindex:[92,3,1,"","Applies a NumPy-style indexing operation with outer indexing semantics."],stride:[93,3,1,"","Strides the domains of the selected input dimensions by the specified amounts."],translate_backward_by:[94,3,1,"","Translates (shifts) the domains of the selected input dimensions backward by the\nspecified offsets, without affecting the output range."],translate_by:[95,3,1,"","Translates (shifts) the domains of the selected input dimensions by the\nspecified offsets, without affecting the output range."],translate_to:[96,3,1,"","Translates the domains of the selected input dimensions to the specified\norigins without affecting the output range."],transpose:[97,3,1,"","Transposes the selected dimensions to the specified target indices."],vindex:[98,3,1,"","Applies a NumPy-style indexing operation with vectorized indexing semantics."]},"tensorstore.DimExpression.label":{labels:[91,4,2,"p-labels","Dimension labels for each selected dimension."]},"tensorstore.DimExpression.stride":{strides:[93,4,2,"p-strides","Strides for each selected dimension."]},"tensorstore.DimExpression.translate_backward_by":{offsets:[94,4,2,"p-offsets","The offsets for each of the selected dimensions."]},"tensorstore.DimExpression.translate_by":{offsets:[95,4,2,"p-offsets","The offsets for each of the selected dimensions."]},"tensorstore.DimExpression.translate_to":{origins:[96,4,2,"p-origins","The new origins for each of the selected dimensions."]},"tensorstore.DimExpression.transpose":{target:[97,4,2,"p-target","Target dimension indices for the selected dimensions."]},"tensorstore.Future":{__new__:[100,3,1,"","Converts a FutureLike object to a Future."],add_done_callback:[101,3,1,"","Registers a callback to be invoked upon completion of the asynchronous operation."],cancel:[102,3,1,"","Requests cancellation of the asynchronous operation."],cancelled:[103,3,1,"","Queries whether the asynchronous operation has been cancelled."],done:[104,3,1,"","Queries whether the asynchronous operation has completed or been cancelled."],exception:[105,3,1,"","Blocks until asynchronous operation completes, and returns the error if any."],force:[106,3,1,"","Ensures the asynchronous operation begins executing."],remove_done_callback:[107,3,1,"","Unregisters a previously-registered callback."],result:[108,3,1,"","Blocks until the asynchronous operation completes, and returns the result."]},"tensorstore.Future.__new__":{future:[100,4,2,"p-future","Specifies the immediate or asynchronous result."],loop:[100,4,2,"p-loop","Event loop on which to run future if it is a\ncoroutine."]},"tensorstore.Future.exception":{deadline:[105,4,2,"p-deadline","Deadline in seconds since the Unix epoch."],timeout:[105,4,2,"p-timeout","Maximum number of seconds to block."]},"tensorstore.Future.result":{deadline:[108,4,2,"p-deadline","Deadline in seconds since the Unix epoch."],timeout:[108,4,2,"p-timeout","Maximum number of seconds to block."]},"tensorstore.FutureLike":{__weakref__:[110,6,1,"","list of weak references to the object (if defined)"]},"tensorstore.IndexDomain":{"__getitem__(domain)":[112,3,1,"","Slices this domain by another domain."],"__getitem__(expr)":[113,3,1,"","Transforms the domain by a dimension expression."],"__getitem__(identifier)":[114,3,1,"","Returns the single dimension specified by identifier."],"__getitem__(selection)":[115,3,1,"","Returns a new domain with a subset of the dimensions."],"__getitem__(transform)":[116,3,1,"","Transforms the domain using an explicit index transform."],"__init__(components)":[117,3,1,"","Constructs an index domain from component vectors."],"__init__(dimensions)":[118,3,1,"","Constructs an index domain from a :py:class`.Dim` sequence."],"__init__(json)":[119,3,1,"","Constructs an index domain from its JSON representation."],__len__:[120,3,1,"","Returns the number of dimensions (rank)."],__repr__:[121,3,1,"","Returns the string representation."],exclusive_max:[122,5,1,"","Exclusive upper bound of the domain."],hull:[123,3,1,"","Computes the hull (minimum containing box) with another domain."],implicit_lower_bounds:[124,5,1,"","Indicates whether the lower bound of each dimension is implicit or explicit."],implicit_upper_bounds:[125,5,1,"","Indicates whether the upper bound of each dimension is implicit or explicit."],inclusive_max:[126,5,1,"","Inclusive upper bound of the domain."],inclusive_min:[127,5,1,"","Inclusive lower bound of the domain, alias of origin."],index_exp:[128,5,1,"","Equivalent NumPy-compatible index expression."],intersect:[129,3,1,"","Intersects with another domain."],labels:[130,5,1,"","Dimension labels for each dimension."],ndim:[131,5,1,"","Alias for rank."],origin:[132,5,1,"","Inclusive lower bound of the domain."],rank:[133,5,1,"","Number of dimensions in the index space."],shape:[134,5,1,"","Shape of the domain."],size:[135,5,1,"","Total number of elements in the domain."],to_json:[136,3,1,"","Returns the JSON representation."]},"tensorstore.IndexDomain.__getitem__(expr)":{expr:[113,4,2,"p-expr","Dimension expression to apply."]},"tensorstore.IndexDomain.__getitem__(identifier)":{identifier:[114,4,2,"p-identifier","Specifies a dimension by integer index or label."]},"tensorstore.IndexDomain.__getitem__(selection)":{selection:[115,4,2,"p-selection","Specifies the dimensions to include, either by index or label."]},"tensorstore.IndexDomain.__getitem__(transform)":{transform:[116,4,2,"p-transform","Index transform, transform.output_rank must equal\nself.rank."]},"tensorstore.IndexDomain.__init__(components)":{exclusive_max:[117,4,2,"p-exclusive_max","Exclusive upper bounds for each dimension."],implicit_lower_bounds:[117,4,2,"p-implicit_lower_bounds","Indicates whether each lower bound is\nimplicit or explicit."],implicit_upper_bounds:[117,4,2,"p-implicit_upper_bounds","Indicates whether each upper bound is\nimplicit or explicit."],inclusive_max:[117,4,2,"p-inclusive_max","Inclusive upper bounds for each dimension."],inclusive_min:[117,4,2,"p-inclusive_min","Inclusive lower bounds for each dimension."],labels:[117,4,2,"p-labels","Dimension labels."],rank:[117,4,2,"p-rank","Number of dimensions."],shape:[117,4,2,"p-shape","Size for each dimension."]},"tensorstore.IndexDomain.__init__(dimensions)":{dimensions:[118,4,2,"p-dimensions","Sequence of :py:class`.Dim` objects."]},"tensorstore.IndexDomain.hull":{other:[123,4,2,"p-other","Object to hull with."]},"tensorstore.IndexDomain.intersect":{other:[129,4,2,"p-other","Object to intersect with."]},"tensorstore.IndexTransform":{"__getitem__(domain)":[140,3,1,"","Slices this index transform by another domain."],"__getitem__(expr)":[141,3,1,"","Applies a dimension expression to this transform."],"__getitem__(indices)":[142,3,1,"","Applies a NumPy-style indexing operation with default index array semantics."],"__getitem__(transform)":[143,3,1,"","Composes this index transform with another index transform."],"__init__(components)":[144,3,1,"","Constructs an index transform from component vectors."],"__init__(domain)":[145,3,1,"","Constructs an index transform from a domain and output index maps."],"__init__(json)":[146,3,1,"","Constructs an index transform from its JSON representation."],T:[138,5,1,"","View with transposed domain (reversed dimension order)."],__call__:[139,3,1,"","Maps an input index vector to an output index vector."],__repr__:[147,3,1,"","Returns the string representation."],domain:[148,5,1,"","Input domain of the index transform."],implicit_lower_bounds:[149,5,1,"","Indicates whether the lower bound of each input dimension is implicit or explicit."],implicit_upper_bounds:[150,5,1,"","Indicates whether the upper bound of each input dimension is implicit or explicit."],input_exclusive_max:[151,5,1,"","Exclusive upper bound of the input domain."],input_inclusive_max:[152,5,1,"","Inclusive upper bound of the input domain."],input_inclusive_min:[153,5,1,"","Inclusive lower bound of the input domain, alias for input_origin."],input_labels:[154,5,1,"","Dimension labels for each input dimension."],input_origin:[155,5,1,"","Inclusive lower bound of the input domain."],input_rank:[156,5,1,"","Rank of the input space."],input_shape:[157,5,1,"","Shape of the input domain."],ndim:[158,5,1,"","Rank of the input space, alias for input_rank."],oindex:[159,3,1,"","Applies a NumPy-style indexing operation with outer indexing semantics."],origin:[160,5,1,"","Inclusive lower bound of the domain."],output:[161,5,1,"","Output index maps."],output_rank:[162,5,1,"","Rank of the output space."],shape:[163,5,1,"","Shape of the domain."],size:[164,5,1,"","Total number of elements in the domain."],to_json:[165,3,1,"","Returns the JSON representation of the transform."],vindex:[166,3,1,"","Applies a NumPy-style indexing operation with vectorized indexing semantics."]},"tensorstore.IndexTransform.__call__":{indices:[139,4,2,"p-indices","Input vector of length input_rank."]},"tensorstore.IndexTransform.__init__(components)":{implicit_lower_bounds:[144,4,2,"p-implicit_lower_bounds","Indicates whether each lower bound is\nimplicit or explicit."],implicit_upper_bounds:[144,4,2,"p-implicit_upper_bounds","Indicates whether each upper bound is\nimplicit or explicit."],input_exclusive_max:[144,4,2,"p-input_exclusive_max","Exclusive upper bounds for each input dimension."],input_inclusive_max:[144,4,2,"p-input_inclusive_max","Inclusive upper bounds for each input dimension."],input_inclusive_min:[144,4,2,"p-input_inclusive_min","Inclusive lower bounds for each input dimension."],input_labels:[144,4,2,"p-input_labels","Dimension labels for each input\ndimension."],input_rank:[144,4,2,"p-input_rank","Number of input dimensions."],input_shape:[144,4,2,"p-input_shape","Size for each input dimension."],output:[144,4,2,"p-output","Sequence of output index maps, or OutputIndexMaps object\nfrom an existing transform."]},"tensorstore.IndexTransform.__init__(domain)":{domain:[145,4,2,"p-domain","The domain of the index transform."],output:[145,4,2,"p-output","Sequence of output index maps, or OutputIndexMaps object\nfrom an existing transform."]},"tensorstore.Indexable":{__weakref__:[168,6,1,"","list of weak references to the object (if defined)"]},"tensorstore.KvStore":{KeyRange:[170,2,1,"","Half-open interval of byte string keys, according to lexicographical order."],ReadResult:[177,2,1,"","Specifies the result of a read operation."],Spec:[182,2,1,"","Parsed representation of a JSON key-value store specification."],TimestampedStorageGeneration:[191,2,1,"","Specifies a storage generation identifier and a timestamp."],__delitem__:[196,3,1,"","Synchronously deletes a single key."],__getitem__:[197,3,1,"","Synchronously reads the value of a single key."],__repr__:[198,3,1,"","Returns a string representation based on the  JSON representation."],__setitem__:[199,3,1,"","Synchronously writes the value of a single key."],copy:[200,3,1,"","Returns a copy of the key-value store."],delete_range:[201,3,1,"","Deletes a key range."],list:[202,3,1,"","Lists the keys in the key-value store."],open:[203,3,1,"","Opens a key-value store."],path:[204,5,1,"","Path prefix within the base key-value store."],read:[205,3,1,"","Reads the value of a single key."],spec:[206,3,1,"","Spec that may be used to re-open or re-create the key-value store."],transaction:[207,5,1,"","Transaction bound to this key-value store."],with_transaction:[208,3,1,"","Returns a transaction-bound view of this key-value store."],write:[209,3,1,"","Writes or deletes a single key."]},"tensorstore.KvStore.KeyRange":{__eq__:[171,3,1,"","Compares with another range for equality."],__init__:[172,3,1,"","Constructs a key range from the specified half-open bounds."],copy:[173,3,1,"","Returns a copy of the range."],empty:[174,5,1,"","Indicates if the range contains no keys."],exclusive_max:[175,5,1,"","Exclusive upper bound of the range."],inclusive_min:[176,5,1,"","Inclusive lower bound of the range."]},"tensorstore.KvStore.KeyRange.__init__":{exclusive_max:[172,4,2,"p-exclusive_max","Exclusive upper bound of the range."],inclusive_min:[172,4,2,"p-inclusive_min","Inclusive lower bound of the range."]},"tensorstore.KvStore.ReadResult":{__init__:[178,3,1,"","Constructs a read result."],stamp:[179,5,1,"","Generation and timestamp associated with the value."],state:[180,5,1,"","Indicates the interpretation of value."],value:[181,5,1,"","Value associated with the key."]},"tensorstore.KvStore.Spec":{__add__:[183,3,1,"","Returns a key-value store with the suffix appended to the path."],__new__:[184,3,1,"","Constructs from the JSON representation."],__repr__:[185,3,1,"","Returns a string representation based on the  JSON representation."],__truediv__:[186,3,1,"","Returns a key-value store with an additional path component joined to the path."],copy:[187,3,1,"","Returns a copy of the key-value store spec."],path:[188,5,1,"","Path prefix within the base key-value store."],to_json:[189,3,1,"","Converts to the JSON representation."],update:[190,3,1,"","Modifies a spec."]},"tensorstore.KvStore.Spec.update":{context:[190,4,2,"p-context","Bind any context resource specs using the specified shared resource context."],strip_context:[190,4,2,"p-strip_context","Replace any bound context resources and unbound context resource specs by\ndefault context resource specs."],unbind_context:[190,4,2,"p-unbind_context","Convert any bound context resources to context resource specs that fully capture\nthe graph of shared context resources and interdependencies."]},"tensorstore.KvStore.TimestampedStorageGeneration":{__eq__:[192,3,1,"","Compares two timestamped storage generations for equality."],__init__:[193,3,1,"","Constructs from a storage generation and time."],generation:[194,5,1,"","Identifies a specific version of a key-value store entry."],time:[195,5,1,"","Time (seconds since Unix epoch) at which generation is valid."]},"tensorstore.KvStore.__delitem__":{key:[196,4,2,"p-key","Key to delete."]},"tensorstore.KvStore.__getitem__":{key:[197,4,2,"p-key","The key to read."]},"tensorstore.KvStore.__setitem__":{key:[199,4,2,"p-key","Key to write/delete."],value:[199,4,2,"p-value","Value to store, or None to delete."]},"tensorstore.KvStore.delete_range":{range:[201,4,2,"p-range","Key range to delete."]},"tensorstore.KvStore.list":{range:[202,4,2,"p-range","If specified, restricts to the specified key range."],strip_prefix_length:[202,4,2,"p-strip_prefix_length","Strips the specified number of bytes from the start of\nthe returned keys."]},"tensorstore.KvStore.open":{context:[203,4,2,"p-context","Bind any context resource specs using the specified shared resource context."],spec:[203,4,2,"p-spec","Key-value store spec to open."],transaction:[203,4,2,"p-transaction","Transaction to use for read/write operations."]},"tensorstore.KvStore.read":{if_not_equal:[205,4,2,"p-if_not_equal","If specified, the read is aborted if the generation associated\nwith key matches if_not_equal."],key:[205,4,2,"p-key","The key to read."],staleness_bound:[205,4,2,"p-staleness_bound","Specifies a time in (fractional) seconds since the Unix\nepoch."]},"tensorstore.KvStore.spec":{retain_context:[206,4,2,"p-retain_context","Retain all bound context resources (e.g."],unbind_context:[206,4,2,"p-unbind_context","Convert any bound context resources to context resource specs that fully capture\nthe graph of shared context resources and interdependencies."]},"tensorstore.KvStore.write":{if_equal:[209,4,2,"p-if_equal","If specified, indicates a conditional write operation."],key:[209,4,2,"p-key","Key to write/delete."],value:[209,4,2,"p-value","Value to store, or None to delete."]},"tensorstore.OutputIndexMap":{"__init__(constant)":[211,3,1,"","Constructs a constant map."],"__init__(index_array)":[212,3,1,"","Constructs an index array map."],"__init__(input_dimension)":[213,3,1,"","Constructs a single input dimension map."],index_array:[214,5,1,"",""],index_range:[215,5,1,"",""],input_dimension:[216,5,1,"",""],method:[217,5,1,"",""],offset:[218,5,1,"",""],stride:[219,5,1,"",""]},"tensorstore.OutputIndexMaps":{__getitem__:[221,3,1,"",""],__len__:[222,3,1,"","Returns the output rank."],rank:[223,5,1,"","Returns the output rank."]},"tensorstore.OutputIndexMethod":{__init__:[225,3,1,"",""],__str__:[226,3,1,"","name(self: handle) -> str"],array:[227,6,1,"",""],constant:[228,6,1,"",""],name:[229,5,1,"",""],single_input_dimension:[230,6,1,"",""],value:[231,5,1,"",""]},"tensorstore.Promise":{"new":[233,3,1,"","Creates a linked promise and future pair."],set_exception:[234,3,1,"","Marks the linked future as unsuccessfully completed with the specified error."],set_result:[235,3,1,"","Marks the linked future as successfully completed with the specified result."]},"tensorstore.Schema":{"__getitem__(domain)":[239,3,1,"","Transforms the schema using an explicit index domain."],"__getitem__(expr)":[240,3,1,"","Transforms the schema using a dimension expression."],"__getitem__(indices)":[241,3,1,"","Transforms the schema using NumPy-style indexing with default index array semantics."],"__getitem__(transform)":[242,3,1,"","Transforms the schema using an explicit index transform."],"__init__(components)":[243,3,1,"","Constructs from component parts."],"__init__(json)":[244,3,1,"","Constructs from its JSON representation."],T:[237,5,1,"","View with transposed domain (reversed dimension order)."],__eq__:[238,3,1,"","Compares with another Schema for equality based on the JSON representation."],__repr__:[245,3,1,"","Returns a string representation based on the  JSON representation."],chunk_layout:[246,5,1,"","Chunk layout constraints specified by the schema."],codec:[247,5,1,"","Codec constraints specified by the schema."],copy:[248,3,1,"","Returns a copy of the schema."],dimension_units:[249,5,1,"","Physical units of each dimension of the domain."],domain:[250,5,1,"","Domain of the schema, or None if unspecified."],dtype:[251,5,1,"","Data type, or None if unspecified."],fill_value:[252,5,1,"","Fill value specified by the schema."],ndim:[253,5,1,"","Alias for rank."],oindex:[254,3,1,"","Transforms the schema using NumPy-style indexing with outer indexing semantics."],origin:[255,5,1,"","Inclusive lower bound of the domain."],rank:[256,5,1,"","Rank of the schema, or None if unspecified."],shape:[257,5,1,"","Shape of the domain."],size:[258,5,1,"","Total number of elements in the domain."],to_json:[259,3,1,"","Converts to the JSON representation."],update:[260,3,1,"","Adds additional constraints."],vindex:[261,3,1,"","Transforms the schema using NumPy-style indexing with vectorized indexing semantics."]},"tensorstore.Schema.__getitem__(domain)":{domain:[239,4,2,"p-domain","Index domain, must have dimension labels that can be\naligned to self.domain."]},"tensorstore.Schema.__getitem__(transform)":{transform:[242,4,2,"p-transform","Index transform, transform.output_rank must equal\nself.rank."]},"tensorstore.Schema.__init__(components)":{chunk_layout:[243,4,2,"p-chunk_layout","Constrains the chunk layout."],codec:[243,4,2,"p-codec","Constrains the codec."],dimension_units:[243,4,2,"p-dimension_units","Specifies the physical units of each dimension of the domain."],domain:[243,4,2,"p-domain","Constrains the domain of the TensorStore."],dtype:[243,4,2,"p-dtype","Constrains the data type of the TensorStore."],fill_value:[243,4,2,"p-fill_value","Specifies the fill value for positions that have not been written."],rank:[243,4,2,"p-rank","Constrains the rank of the TensorStore."],schema:[243,4,2,"p-schema","Additional schema constraints to merge with existing constraints."],shape:[243,4,2,"p-shape","Constrains the shape and origin of the TensorStore."]},"tensorstore.Schema.update":{chunk_layout:[260,4,2,"p-chunk_layout","Constrains the chunk layout."],codec:[260,4,2,"p-codec","Constrains the codec."],dimension_units:[260,4,2,"p-dimension_units","Specifies the physical units of each dimension of the domain."],domain:[260,4,2,"p-domain","Constrains the domain of the TensorStore."],dtype:[260,4,2,"p-dtype","Constrains the data type of the TensorStore."],fill_value:[260,4,2,"p-fill_value","Specifies the fill value for positions that have not been written."],rank:[260,4,2,"p-rank","Constrains the rank of the TensorStore."],schema:[260,4,2,"p-schema","Additional schema constraints to merge with existing constraints."],shape:[260,4,2,"p-shape","Constrains the shape and origin of the TensorStore."]},"tensorstore.Spec":{"__getitem__(domain)":[265,3,1,"","Transforms the spec using an explicit index domain."],"__getitem__(expr)":[266,3,1,"","Transforms the spec using a dimension expression."],"__getitem__(indices)":[267,3,1,"","Transforms the spec using NumPy-style indexing with default index array semantics."],"__getitem__(transform)":[268,3,1,"","Transforms the spec using an explicit index transform."],T:[263,5,1,"","View with transposed domain (reversed dimension order)."],__eq__:[264,3,1,"","Compares with another Spec for equality based on the JSON representation."],__new__:[269,3,1,"","Constructs from the JSON representation."],__repr__:[270,3,1,"","Returns a string representation based on the JSON representation."],chunk_layout:[271,5,1,"","Effective chunk layout, including any constraints implied\nby driver-specific options."],codec:[272,5,1,"","Effective codec, including any constraints implied\nby driver-specific options."],copy:[273,3,1,"","Returns a copy of the spec."],dimension_units:[274,5,1,"","Effective physical units of each dimension of the domain, including any\nconstraints implied by driver-specific options."],domain:[275,5,1,"","Effective index domain, including any constraints implied\nby driver-specific options."],dtype:[276,5,1,"","Data type, or None if unspecified."],fill_value:[277,5,1,"","Effective fill value, including any constraints implied by driver-specific\noptions."],kvstore:[278,5,1,"","Spec of the associated key-value store used as the underlying storage."],ndim:[279,5,1,"","Alias for rank."],oindex:[280,3,1,"","Transforms the spec using NumPy-style indexing with outer indexing semantics."],origin:[281,5,1,"","Inclusive lower bound of the domain."],rank:[282,5,1,"","Returns the rank of the domain, or None if unspecified."],schema:[283,5,1,"","Effective schema, including any constraints implied by driver-specific options."],shape:[284,5,1,"","Shape of the domain."],size:[285,5,1,"","Total number of elements in the domain."],to_json:[286,3,1,"","Converts to the JSON representation."],transform:[287,5,1,"","The index transform, or None if unspecified."],update:[288,3,1,"","Adds additional constraints or changes the open mode."],vindex:[289,3,1,"","Transforms the spec using NumPy-style indexing with vectorized indexing semantics."]},"tensorstore.Spec.__getitem__(domain)":{domain:[265,4,2,"p-domain","Index domain, must have dimension labels that can be\naligned to self.domain."]},"tensorstore.Spec.__getitem__(transform)":{transform:[268,4,2,"p-transform","Index transform, transform.output_rank must equal\nself.rank."]},"tensorstore.Spec.update":{chunk_layout:[288,4,2,"p-chunk_layout","Constrains the chunk layout."],codec:[288,4,2,"p-codec","Constrains the codec."],context:[288,4,2,"p-context","Bind any context resource specs using the specified shared resource context."],create:[288,4,2,"p-create","Allow creating a new TensorStore."],delete_existing:[288,4,2,"p-delete_existing","Delete any existing data before creating a new array."],dimension_units:[288,4,2,"p-dimension_units","Specifies the physical units of each dimension of the domain."],domain:[288,4,2,"p-domain","Constrains the domain of the TensorStore."],dtype:[288,4,2,"p-dtype","Constrains the data type of the TensorStore."],fill_value:[288,4,2,"p-fill_value","Specifies the fill value for positions that have not been written."],kvstore:[288,4,2,"p-kvstore","Sets the associated key-value store used as the underlying storage."],open:[288,4,2,"p-open","Allow opening an existing TensorStore."],rank:[288,4,2,"p-rank","Constrains the rank of the TensorStore."],schema:[288,4,2,"p-schema","Additional schema constraints to merge with existing constraints."],shape:[288,4,2,"p-shape","Constrains the shape and origin of the TensorStore."],strip_context:[288,4,2,"p-strip_context","Replace any bound context resources and unbound context resource specs by\ndefault context resource specs."],unbind_context:[288,4,2,"p-unbind_context","Convert any bound context resources to context resource specs that fully capture\nthe graph of shared context resources and interdependencies."]},"tensorstore.TensorStore":{"__getitem__(domain)":[293,3,1,"","Computes a virtual view using an explicit index domain."],"__getitem__(expr)":[294,3,1,"","Computes a virtual view using a dimension expression."],"__getitem__(indices)":[295,3,1,"","Computes a virtual view using NumPy-style indexing with default index array semantics."],"__getitem__(transform)":[296,3,1,"","Computes a virtual view using an explicit index transform."],"__setitem__(domain)":[297,3,1,"","Synchronously writes using an explicit index domain."],"__setitem__(expr)":[298,3,1,"","Synchronously writes using a dimension expression."],"__setitem__(indices)":[299,3,1,"","Synchronously writes using NumPy-style indexing with default index array semantics."],"__setitem__(transform)":[300,3,1,"","Synchronously writes using an explicit index transform."],T:[291,5,1,"","View with transposed domain (reversed dimension order)."],__array__:[292,3,1,"","Automatic conversion to numpy.ndarray for interoperability with NumPy."],astype:[301,3,1,"","Returns a read/write view as the specified data type."],chunk_layout:[302,5,1,"","Chunk layout of the TensorStore."],codec:[303,5,1,"","Data codec spec."],dimension_units:[304,5,1,"","Physical units of each dimension of the domain."],domain:[305,5,1,"","Domain of the array."],dtype:[306,5,1,"","Data type of the array."],fill_value:[307,5,1,"","Fill value for positions not yet written."],kvstore:[308,5,1,"","Associated key-value store used as the underlying storage."],mode:[309,5,1,"","Read/write mode."],ndim:[310,5,1,"","Alias for rank."],oindex:[311,3,1,"","Computes a virtual view using NumPy-style indexing with outer indexing semantics."],origin:[313,5,1,"","Inclusive lower bound of the domain."],rank:[314,5,1,"","Number of dimensions in the domain."],read:[315,3,1,"","Reads the data within the current domain."],readable:[316,5,1,"","Indicates if reading is supported."],resolve:[317,3,1,"","Obtains updated bounds, subject to the cache policy."],schema:[318,5,1,"","Schema of this TensorStore."],shape:[319,5,1,"","Shape of the domain."],size:[320,5,1,"","Total number of elements in the domain."],spec:[321,3,1,"","Spec that may be used to re-open or re-create the TensorStore."],transaction:[322,5,1,"","Associated transaction used for read/write operations."],vindex:[323,3,1,"","Computes a virtual view using NumPy-style indexing with vectorized indexing semantics."],with_transaction:[325,3,1,"","Returns a transaction-bound view of this TensorStore."],writable:[326,5,1,"","Indicates if writing is supported."],write:[327,3,1,"","Writes to the current domain."]},"tensorstore.TensorStore.__getitem__(domain)":{domain:[293,4,2,"p-domain","Index domain, must have dimension labels that can be\naligned to self.domain."]},"tensorstore.TensorStore.__getitem__(transform)":{transform:[296,4,2,"p-transform","Index transform, transform.output_rank must equal\nself.rank."]},"tensorstore.TensorStore.__setitem__(domain)":{source:[297,4,2,"p-source","Source array, broadcast-compatible with\nself.domain[transform] and with a data type convertible to\nself.dtype."],transform:[297,4,2,"p-transform","Index transform, transform.output_rank must equal\nself.rank."]},"tensorstore.TensorStore.__setitem__(indices)":{indices:[299,4,2,"p-indices","NumPy-style indexing terms."],source:[299,4,2,"p-source","Source array, broadcast-compatible with\nself[indices].domain and with a data type convertible to\nself.dtype."]},"tensorstore.TensorStore.__setitem__(transform)":{source:[300,4,2,"p-source","Source array, broadcast-compatible with\nself.domain[transform] and with a data type convertible to\nself.dtype."],transform:[300,4,2,"p-transform","Index transform, transform.output_rank must equal\nself.rank."]},"tensorstore.TensorStore.oindex":{__setitem__:[312,3,1,"","Synchronously writes using NumPy-style indexing with outer indexing semantics."]},"tensorstore.TensorStore.oindex.__setitem__":{indices:[312,4,2,"p-indices","NumPy-style indexing terms."],source:[312,4,2,"p-source","Source array, broadcast-compatible with\nself.oindex[indices].domain and with a data type convertible to\nself.dtype."]},"tensorstore.TensorStore.read":{order:[315,4,2,"p-order","Contiguous layout order of the returned array:"]},"tensorstore.TensorStore.spec":{create:[321,4,2,"p-create","Allow creating a new TensorStore."],delete_existing:[321,4,2,"p-delete_existing","Delete any existing data before creating a new array."],minimal_spec:[321,4,2,"p-minimal_spec","Indicates whether to include in the returned Spec the\nmetadata necessary to re-create the TensorStore."],open:[321,4,2,"p-open","Allow opening an existing TensorStore."],retain_context:[321,4,2,"p-retain_context","Retain all bound context resources (e.g."],unbind_context:[321,4,2,"p-unbind_context","Convert any bound context resources to context resource specs that fully capture\nthe graph of shared context resources and interdependencies."]},"tensorstore.TensorStore.vindex":{__setitem__:[324,3,1,"","Synchronously writes using NumPy-style indexing with vectorized indexing semantics."]},"tensorstore.TensorStore.vindex.__setitem__":{indices:[324,4,2,"p-indices","NumPy-style indexing terms."],source:[324,4,2,"p-source","Source array, broadcast-compatible with\nself.vindex[indices].domain and with a data type convertible to\nself.dtype."]},"tensorstore.TensorStore.write":{source:[327,4,2,"p-source","Source array, broadcast-compatible with\nself.domain and with a data type convertible to\nself.dtype."]},"tensorstore.Transaction":{__init__:[329,3,1,"","Creates a new transaction."],abort:[330,3,1,"","Aborts the transaction."],aborted:[331,5,1,"","Indicates whether the transaction has been aborted."],atomic:[332,5,1,"","Indicates whether the transaction is atomic."],commit_async:[333,3,1,"","Asynchronously commits the transaction."],commit_started:[334,5,1,"","Indicates whether the commit of the transaction has already started."],commit_sync:[335,3,1,"","Synchronously commits the transaction."],future:[336,5,1,"","Commit result future."],open:[337,5,1,"","Indicates whether the transaction is still open."]},"tensorstore.Unit":{"__init__(components)":[340,3,1,"","Constructs a unit from a multiplier and base unit."],"__init__(json)":[341,3,1,"","Constructs a unit from its JSON representation."],"__init__(multiplier)":[342,3,1,"","Constructs a dimension-less quantity of the specified value."],"__init__(pair)":[343,3,1,"","Constructs a unit from a multiplier and base unit pair."],"__init__(unit)":[344,3,1,"","Constructs a unit from a string."],__eq__:[339,3,1,"","Compares two units for equality."],__mul__:[345,3,1,"","Multiplies this unit by the specified multiplier."],__truediv__:[346,3,1,"","Divides this unit by the specified divisor."],base_unit:[347,5,1,"","Base unit from which this unit is derived."],multiplier:[348,5,1,"","Multiplier for the base_unit."],to_json:[349,3,1,"","Converts to the JSON representation."]},"tensorstore.WriteFutures":{add_done_callback:[351,3,1,"",""],cancel:[352,3,1,"",""],cancelled:[353,3,1,"",""],commit:[354,5,1,"",""],copy:[355,5,1,"",""],done:[356,3,1,"",""],exception:[357,3,1,"",""],remove_done_callback:[358,3,1,"",""],result:[359,3,1,"",""]},"tensorstore.array":{array:[360,4,2,"p-array","Source array."],context:[360,4,2,"p-context","Context to use."],dtype:[360,4,2,"p-dtype","Data type to which array will be converted."]},"tensorstore.d":{__class_getitem__:[367,3,1,"","Constructs from a sequence of dimension indices, ranges, and/or labels."]},"tensorstore.dtype":{"__init__(dtype)":[372,3,1,"","Construct from an existing TensorStore or NumPy data type."],"__init__(name)":[373,3,1,"","Construct by name."],__call__:[371,3,1,"","Construct a scalar instance of this data type"],name:[374,5,1,"",""],numpy_dtype:[375,5,1,"",""],to_json:[376,3,1,"",""],type:[377,5,1,"",""]},"tensorstore.open":{chunk_layout:[388,4,2,"p-chunk_layout","Constrains the chunk layout."],codec:[388,4,2,"p-codec","Constrains the codec."],context:[388,4,2,"p-context","Shared resource context."],create:[388,4,2,"p-create","Allow creating a new TensorStore."],delete_existing:[388,4,2,"p-delete_existing","Delete any existing data before creating a new array."],dimension_units:[388,4,2,"p-dimension_units","Specifies the physical units of each dimension of the domain."],domain:[388,4,2,"p-domain","Constrains the domain of the TensorStore."],dtype:[388,4,2,"p-dtype","Constrains the data type of the TensorStore."],fill_value:[388,4,2,"p-fill_value","Specifies the fill value for positions that have not been written."],kvstore:[388,4,2,"p-kvstore","Sets the associated key-value store used as the underlying storage."],open:[388,4,2,"p-open","Allow opening an existing TensorStore."],rank:[388,4,2,"p-rank","Constrains the rank of the TensorStore."],read:[388,4,2,"p-read","Allow read access."],schema:[388,4,2,"p-schema","Additional schema constraints to merge with existing constraints."],shape:[388,4,2,"p-shape","Constrains the shape and origin of the TensorStore."],spec:[388,4,2,"p-spec","TensorStore Spec to open."],transaction:[388,4,2,"p-transaction","Transaction to use for opening/creating, and for subsequent operations."],write:[388,4,2,"p-write","Allow write access."]},ChunkLayout:{chunk:[397,1,2,"json-ChunkLayout.chunk","Combined constraints on write/read/codec chunks."],codec_chunk:[397,1,2,"json-ChunkLayout.codec_chunk","Constraints on the chunk grid used by the codec, if applicable."],grid_origin:[397,1,2,"json-ChunkLayout.grid_origin","Specifies hard constraints on the origin of the chunk grid."],grid_origin_soft_constraint:[397,1,2,"json-ChunkLayout.grid_origin_soft_constraint","Specifies preferred values for the origin of the chunk grid rather than\nhard constraints."],inner_order:[397,1,2,"json-ChunkLayout.inner_order","Permutation specifying the element storage order within the innermost\nchunks."],inner_order_soft_constraint:[397,1,2,"json-ChunkLayout.inner_order_soft_constraint","Specifies a preferred value for inner_order rather than a\nhard constraint.  If inner_order is also specified, it\ntakes precedence."],read_chunk:[397,1,2,"json-ChunkLayout.read_chunk","Constraints on the chunk grid over which reads may be efficiently\npartitioned."],write_chunk:[397,1,2,"json-ChunkLayout.write_chunk","Constraints on the chunk grid over which writes may be efficiently\npartitioned."]},Codec:{driver:[397,1,2,"json-Codec.driver","Driver identifier"]},Context:{"&lt;resource-type&gt;":[0,1,2,"json-Context.<resource-type>",null],"&lt;resource-type&gt;#&lt;id&gt;":[0,1,2,"json-Context.<resource-type>#<id>",null],cache_pool:[0,0,1,"json-Context.cache_pool",""],data_copy_concurrency:[0,0,1,"json-Context.data_copy_concurrency",""],file_io_concurrency:[0,0,1,"json-Context.file_io_concurrency",""],gcs_request_concurrency:[14,0,1,"json-Context.gcs_request_concurrency",""],gcs_request_retries:[14,0,1,"json-Context.gcs_request_retries",""],gcs_user_project:[14,0,1,"json-Context.gcs_user_project",""],memory_key_value_store:[16,0,1,"json-Context.memory_key_value_store",""]},DownsampleMethod:{max:[3,1,2,"json-DownsampleMethod.max",""],mean:[3,1,2,"json-DownsampleMethod.mean",""],median:[3,1,2,"json-DownsampleMethod.median",""],min:[3,1,2,"json-DownsampleMethod.min",""],mode:[3,1,2,"json-DownsampleMethod.mode",""],stride:[3,1,2,"json-DownsampleMethod.stride",""]},IndexDomain:{exclusive_max:[11,1,2,"json-IndexDomain.exclusive_max","Exclusive upper bounds of the domain."],inclusive_max:[11,1,2,"json-IndexDomain.inclusive_max","Inclusive upper bounds of the domain."],inclusive_min:[11,1,2,"json-IndexDomain.inclusive_min","Inclusive lower bounds of the domain."],labels:[11,1,2,"json-IndexDomain.labels","Dimension labels for each dimension."],rank:[11,1,2,"json-IndexDomain.rank","Number of dimensions."],shape:[11,1,2,"json-IndexDomain.shape","Extent of each dimension of the domain."]},IndexTransform:{input_exclusive_max:[11,1,2,"json-IndexTransform.input_exclusive_max","Exclusive upper bounds of the input domain."],input_inclusive_max:[11,1,2,"json-IndexTransform.input_inclusive_max","Inclusive upper bounds of the input domain."],input_inclusive_min:[11,1,2,"json-IndexTransform.input_inclusive_min","Inclusive lower bounds of the input domain."],input_labels:[11,1,2,"json-IndexTransform.input_labels","Dimension labels for each input domain dimension."],input_rank:[11,1,2,"json-IndexTransform.input_rank","Number of input dimensions."],input_shape:[11,1,2,"json-IndexTransform.input_shape","Extent of each dimension of the input domain."],output:[11,1,2,"json-IndexTransform.output","Specifies the output index map for each output dimension."]},KeyValueStoreBackedChunkDriver:{cache_pool:[4,1,2,"json-KeyValueStoreBackedChunkDriver.cache_pool",""],context:[4,1,2,"json-KeyValueStoreBackedChunkDriver.context","Specifies context resources that augment/override the parent context."],create:[4,1,2,"json-KeyValueStoreBackedChunkDriver.create",""],data_copy_concurrency:[4,1,2,"json-KeyValueStoreBackedChunkDriver.data_copy_concurrency",""],delete_existing:[4,1,2,"json-KeyValueStoreBackedChunkDriver.delete_existing",""],driver:[4,1,2,"json-KeyValueStoreBackedChunkDriver.driver","Driver identifier"],dtype:[4,1,2,"json-KeyValueStoreBackedChunkDriver.dtype","Specifies the data type."],kvstore:[4,1,2,"json-KeyValueStoreBackedChunkDriver.kvstore",""],open:[4,1,2,"json-KeyValueStoreBackedChunkDriver.open",""],path:[4,1,2,"json-KeyValueStoreBackedChunkDriver.path","Additional path within the KvStore specified by\nkvstore."],rank:[4,1,2,"json-KeyValueStoreBackedChunkDriver.rank","Specifies the rank of the TensorStore."],recheck_cached_data:[4,1,2,"json-KeyValueStoreBackedChunkDriver.recheck_cached_data",""],recheck_cached_metadata:[4,1,2,"json-KeyValueStoreBackedChunkDriver.recheck_cached_metadata",""],transform:[4,1,2,"json-KeyValueStoreBackedChunkDriver.transform","Specifies a transform."]},KvStore:{context:[15,1,2,"json-KvStore.context",""],driver:[15,1,2,"json-KvStore.driver","Key-value store driver identifier"],path:[15,1,2,"json-KvStore.path","Key prefix within the key-value store."]},OutputIndexMap:{index_array:[11,1,2,"json-OutputIndexMap.index_array","If present, indicates that this output dimension uses an index\narray map, with the index array specified as a nested list of rank\nequal to the input_rank."],index_array_bounds:[11,1,2,"json-OutputIndexMap.index_array_bounds",""],input_dimension:[11,1,2,"json-OutputIndexMap.input_dimension","If present, indicates that this output dimension uses a single\ninput dimension map with the specified input dimension.  Must not\nbe specified in conjunction with index_array."],offset:[11,1,2,"json-OutputIndexMap.offset","Specifies an offset for this output dimension.  If neither\ninput_dimension nor index_array is\nspecified, this specifies the constant value to which this output\ndimension maps."],stride:[11,1,2,"json-OutputIndexMap.stride","Multiplier for the input index specified by\ninput_dimension or the index array value specified by\nindex_array."]},Schema:{chunk_layout:[397,1,2,"json-Schema.chunk_layout","Data storage layout constraints."],codec:[397,1,2,"json-Schema.codec",""],dimension_units:[397,1,2,"json-Schema.dimension_units","Physical units of each dimension."],domain:[397,1,2,"json-Schema.domain","Domain of the TensorStore, including bounds and optional dimension labels."],dtype:[397,1,2,"json-Schema.dtype","Specifies the data type of the TensorStore."],fill_value:[397,1,2,"json-Schema.fill_value","Fill value to use for missing data."],rank:[397,1,2,"json-Schema.rank","Number of dimensions."]},TensorStore:{context:[398,1,2,"json-TensorStore.context","Specifies context resources that augment/override the parent context."],driver:[398,1,2,"json-TensorStore.driver","Driver identifier"],dtype:[398,1,2,"json-TensorStore.dtype","Specifies the data type."],rank:[398,1,2,"json-TensorStore.rank","Specifies the rank of the TensorStore."],transform:[398,1,2,"json-TensorStore.transform","Specifies a transform."]},dtype:{"byte":[398,1,2,"json-dtype.byte","Single byte."],"char":[398,1,2,"json-dtype.char","Single byte, interpreted as an ASCII character."],bfloat16:[398,1,2,"json-dtype.bfloat16","bfloat16 floating-point format number."],bool:[398,1,2,"json-dtype.bool","Boolean value (0 or 1)."],complex128:[398,1,2,"json-dtype.complex128","Complex number, where the real and imaginary components are each\nrepresented by a float64."],complex64:[398,1,2,"json-dtype.complex64","Complex number, where the real and imaginary components are each\nrepresented by a float32."],float16:[398,1,2,"json-dtype.float16","IEEE 754 binary16\nhalf-precision floating-point number."],float32:[398,1,2,"json-dtype.float32","IEEE 754 binary32\nsingle-precision floating-point number."],float64:[398,1,2,"json-dtype.float64","IEEE 754 binary64\ndouble-precision floating-point number."],int16:[398,1,2,"json-dtype.int16","16-bit signed two's-complement integer."],int32:[398,1,2,"json-dtype.int32","32-bit signed two's-complement integer."],int64:[398,1,2,"json-dtype.int64","64-bit signed two's-complement integer."],int8:[398,1,2,"json-dtype.int8","8-bit signed two's-complement integer."],json:[398,1,2,"json-dtype.json","JSON value."],string:[398,1,2,"json-dtype.string","Byte string."],uint16:[398,1,2,"json-dtype.uint16","16-bit unsigned integer."],uint32:[398,1,2,"json-dtype.uint32","32-bit unsigned integer."],uint64:[398,1,2,"json-dtype.uint64","64-bit unsigned integer."],uint8:[398,1,2,"json-dtype.uint8","8-bit unsigned integer."],ustring:[398,1,2,"json-dtype.ustring","Unicode string (represented in memory as UTF-8)."]},tensorstore:{"downsample(spec)":[368,7,1,"","Returns a virtual downsampled view view of a Spec."],"downsample(store)":[369,7,1,"","Returns a virtual downsampled view of a TensorStore."],ChunkLayout:[18,2,1,"","Describes the storage layout of a tensorstore.TensorStore."],CodecSpec:[49,2,1,"","Specifies driver-specific encoding/decoding parameters."],Context:[52,2,1,"","Manages shared TensorStore context resources, such as caches and credentials."],Dim:[64,2,1,"","1-d index interval with optionally-implicit bounds and dimension label."],DimExpression:[88,2,1,"","Specifies an advanced indexing operation."],Future:[99,2,1,"","Handle for consuming the result of an asynchronous operation."],FutureLike:[109,2,1,"","Abstract base class for types representing an asynchronous result."],IndexDomain:[111,2,1,"","Domain (including bounds and optional dimension labels) of an N-dimensional index space."],IndexTransform:[137,2,1,"","Represents a transform from an input index space to an output space."],Indexable:[167,2,1,"","Abstract base class for types that support TensorStore indexing operations."],KvStore:[169,2,1,"","Key-value store that maps an ordered set of byte string keys to byte string values."],OutputIndexMap:[210,2,1,"","Represents an output index map for an index transform."],OutputIndexMaps:[220,2,1,"","View of the output index maps for an index transform."],OutputIndexMethod:[224,2,1,"","Indicates the output index method of an OutputIndexMap."],Promise:[232,2,1,"","Handle for producing the result of an asynchronous operation."],Schema:[236,2,1,"","Driver-independent options for defining a TensorStore schema."],Spec:[262,2,1,"","Specification for opening or creating a TensorStore."],TensorStore:[290,2,1,"","Asynchronous multi-dimensional array handle."],Transaction:[328,2,1,"","Transactions are used to stage a group of modifications (e.g. writes to\ntensorstore.TensorStore objects) in memory, and then either commit the\ngroup all at once or abort it."],Unit:[338,2,1,"","Specifies a physical quantity/unit."],WriteFutures:[350,2,1,"","Handle for consuming the result of an asynchronous write operation."],array:[360,7,1,"","Returns a TensorStore that reads/writes from an in-memory array."],bfloat16:[361,8,1,"","bfloat16 floating-point data type."],bool:[362,8,1,"","Boolean data type (0 or 1).  Corresponds to the python:bool type and numpy.bool_."],cast:[363,7,1,"","Returns a read/write view as the specified data type."],complex128:[364,8,1,"","Complex number based on float64.  Corresponds to numpy.complex128."],complex64:[365,8,1,"","Complex number based on float32.  Corresponds to numpy.complex64."],d:[366,2,1,"","Specifies a dimension selection, for starting a dimension expression."],dtype:[370,2,1,"","TensorStore data type representation."],float16:[378,8,1,"","IEEE 754 binary16 half-precision floating-point data type.  Correspond to numpy.float16."],float32:[379,8,1,"","IEEE 754 binary32 single-precision floating-point data type.  Corresponds to numpy.float32."],float64:[380,8,1,"","IEEE 754 binary64 double-precision floating-point data type.  Corresponds to numpy.float64."],inf:[381,8,1,"","Special constant equal to 2^{62}-1 that indicates an unbounded index domain."],int16:[382,8,1,"","16-bit signed two's-complement integer data type.  Corresponds to numpy.int16."],int32:[383,8,1,"","32-bit signed two's-complement integer data type.  Corresponds to numpy.int32."],int64:[384,8,1,"","32-bit signed two's-complement integer data type.  Corresponds to numpy.int64."],int8:[385,8,1,"","8-bit signed two's-complement integer data type.  Corresponds to numpy.int8."],json:[386,8,1,"","JSON data type.  Corresponds to an arbitrary Python JSON value."],newaxis:[387,8,1,"","Alias for None used in indexing expressions to specify a new singleton dimension."],open:[388,7,1,"","Opens or creates a TensorStore from a Spec."],string:[389,8,1,"","Variable-length byte string data type.  Corresponds to the Python python:bytes type."],uint16:[390,8,1,"","16-bit unsigned integer.  Corresponds to numpy.uint16."],uint32:[391,8,1,"","32-bit unsigned integer.  Corresponds to numpy.uint32."],uint64:[392,8,1,"","64-bit unsigned integer data type.  Corresponds to numpy.uint64."],uint8:[393,8,1,"","8-bit unsigned integer.  Corresponds to numpy.uint8."],ustring:[394,8,1,"","Variable-length Unicode string data type.  Corresponds to the Python python:str type."]}},objnames:{"0":["json","schema","JSON type"],"1":["json","subschema","JSON member"],"2":["py","class","Python class"],"3":["py","method","Python method"],"4":["py","parameter","Python parameter"],"5":["py","property","Python property"],"6":["py","attribute","Python attribute"],"7":["py","function","Python function"],"8":["py","data","Python data"],"9":["std","envvar","environment variable"]},objtypes:{"0":"json:schema","1":"json:subschema","2":"py:class","3":"py:method","4":"py:parameter","5":"py:property","6":"py:attribute","7":"py:function","8":"py:data","9":"std:envvar"},terms:{"0":[0,1,2,3,4,5,6,7,8,11,12,17,34,39,41,42,45,46,70,74,80,84,89,90,91,92,93,94,95,96,97,98,99,112,113,114,115,116,117,118,123,128,139,140,141,142,143,144,145,146,148,159,165,166,202,210,211,212,213,224,228,239,240,241,242,243,244,246,250,254,256,259,261,265,266,267,268,275,280,283,286,287,288,289,290,293,294,295,296,297,298,299,300,301,302,303,305,311,312,315,318,321,323,324,327,328,349,362,363,367,387,388,395,396,397,398],"03":12,"0x":396,"0x8":[388,396],"1":[0,1,3,6,7,8,11,12,14,17,34,39,41,42,45,46,64,65,66,72,77,78,80,81,82,83,84,85,89,90,91,92,93,94,95,96,97,98,99,112,113,114,115,116,122,123,126,127,128,129,130,132,134,135,138,139,140,141,142,143,144,145,146,151,152,153,154,155,159,162,165,166,212,213,224,230,237,239,240,241,242,243,244,246,249,254,256,259,261,263,267,268,274,283,286,287,290,291,293,294,295,296,298,299,300,301,302,303,304,310,311,312,314,318,321,323,324,327,328,338,342,344,362,363,367,381,387,388,395,396,397,398],"10":[8,11,12,13,62,63,64,65,66,67,68,69,70,75,77,78,79,83,84,89,94,95,96,112,119,128,140,165,240,241,254,261,266,267,280,289,290,292,294,295,297,298,299,311,312,315,323,324,327,388,395],"100":[6,7,8,11,44,45,48,120,131,133,239,240,241,242,250,254,261,271,279,282,283,286,287,288,303,304,307,308,318,396],"1000":[6,7,8,239,240,241,242,254,261,275,283,290,302,388,396],"10000":7,"1000000":45,"10000000":[0,54,58,62,63,388],"100000000":[0,396],"1000000000":7,"100_000_000":396,"100kb":6,"100mb":396,"100x100x1":396,"102":[6,8,302,388,396],"1020":7,"1049":290,"105":[44,48,286,287],"11":[8,12,69,77,89,113,146,212,213,395],"1113":7,"1132030694":396,"1161117856":396,"1194100437":396,"12":[8,11,89,94,95,113,315,395],"1264":7,"128":[6,8],"13":[8,12,95,113,165,213],"14":[8,12,96,116],"1408314276":396,"1414":388,"15":[7,70,96,388,395,396],"15000":396,"15100":396,"159":[6,7,8],"16":[12,17,95,382,390,398],"17":[12,94,119,146],"18":95,"1nm":[7,397],"2":[1,3,5,6,7,8,11,12,17,41,42,45,64,72,89,90,91,92,93,94,95,96,97,98,99,112,113,114,115,116,117,122,123,124,125,126,127,128,129,130,132,134,135,139,140,141,142,144,145,146,149,150,151,152,153,154,155,159,165,166,212,213,224,227,239,240,241,242,243,244,246,248,254,256,259,261,268,279,282,283,287,290,295,296,298,299,300,301,302,310,311,312,314,321,323,324,327,328,345,346,363,367,381,387,388,395,396,397],"20":[7,11,79,89,94,95,96,241,254,261,267,280,289,292,295,311,323],"200":[6,7,8,44,45,48,120,131,133,239,240,241,242,250,254,261,271,274,279,282,283,286,287,288,304,308],"2000":[6,7,8,239,240,241,242,254,261,275,283,302,388],"20000":[290,396],"2000000":[6,7,8],"2019":12,"2030":7,"2048":7,"206":[44,48],"207":[44,48],"21":[12,395],"23":95,"25":96,"28":95,"29":12,"3":[1,3,6,7,8,11,12,41,42,64,72,80,85,87,89,90,91,92,93,94,95,96,97,98,99,100,112,113,114,115,116,117,120,122,123,124,125,126,127,128,129,130,131,132,133,134,135,140,141,142,143,144,145,146,148,149,150,151,152,153,154,155,156,157,158,159,162,165,166,212,238,239,240,241,242,243,244,248,249,251,253,254,256,259,260,261,267,268,280,283,289,295,296,298,300,301,310,311,314,323,324,328,339,340,341,342,343,345,346,347,348,349,363,367,387,395,396],"30":[7,89,305],"300":[6,7,8,44,48,120,131,133,239,240,241,242,250,254,261,271,274,283,288],"3000":[6,7,8,239,240,241,242,254,261,275,283,302,388],"300000":344,"30037":12,"3040":7,"307":[44,48],"32":[1,2,3,4,6,7,8,11,14,17,383,384,391,397,398],"34432":[7,388,396],"34452":7,"357":395,"37":12,"39552":[7,388,396],"39582":7,"3e5":344,"3nm":[249,339,349],"4":[0,1,3,6,7,8,11,65,72,78,83,89,92,94,95,96,97,98,112,114,115,116,122,123,124,125,126,127,128,129,130,132,134,135,140,144,145,146,148,149,150,151,152,153,154,155,156,157,158,162,165,242,249,268,296,299,300,310,314,324,328,344,363,395,396,397],"40":[6,7],"40000":7,"40nm":7,"41408":[388,396],"42":[5,8,100,238,252,277,290,297,307,318,327,328,388],"43":328,"44":328,"4443":14,"45":[12,328],"4611686018427387903":[17,83,84,381],"4611686018427387904":[77,78],"486000":397,"4_4_40":7,"4nm":[7,249,344,397],"5":[1,6,8,11,12,44,48,65,66,67,68,69,70,72,74,75,77,78,79,80,81,82,83,84,85,87,89,92,93,94,95,96,97,98,112,113,114,115,116,117,118,122,123,124,125,126,127,128,129,130,132,134,135,140,141,143,145,146,148,149,150,151,152,153,154,155,156,157,158,162,211,212,213,232,234,235,239,240,241,242,245,254,261,265,266,267,268,280,286,287,289,290,292,293,294,295,296,297,298,299,300,303,304,310,311,312,314,315,318,321,323,324,327,328,340,341,342,343,346,348,363,387,388,395,396,397],"50":305,"500":[6,7,8],"50000":7,"5000000":[60,62,63],"512":7,"51508":7,"51548":7,"5813054053":396,"5e":397,"5nm":[304,345,347,348],"6":[1,3,6,7,8,11,12,44,48,66,72,89,92,93,94,95,96,98,112,113,114,115,116,118,122,123,124,125,128,129,140,142,145,149,150,151,159,166,239,240,241,265,266,267,290,293,294,295,296,297,298,299,300,310,312,314,324,327,328,388,395,396,397],"60":[135,265,266,293,294,297,298,323,397],"62":[11,17,64,381],"62662f87cdd9":12,"632":7,"64":[6,7,8,11,17,388,392,396,398],"6901":5,"7":[11,12,44,48,87,89,94,112,113,116,119,126,128,140,142,144,145,146,152,159,165,166,212,213,254,261,280,289,311,323,345,395],"70":[265,266,267,268,280,289,292,293,294,295,296,297,298,299,300,305,306,311,312,315,321,323,324,327],"707":388,"75":7,"754":[17,378,379,380,398],"77":14,"79":[6,7,8,12],"7nm":346,"8":[0,7,11,12,17,89,93,94,95,112,113,116,119,122,128,140,142,143,144,146,151,159,165,166,239,254,261,265,280,289,290,293,297,299,304,311,312,315,323,324,327,385,388,393,395,396,398],"80":[265,266,267,268,280,289,292,293,294,295,296,297,298,299,300,305,306,311,312,315,321,323,324,327,396],"81":7,"82":396,"83":396,"8_8_8":7,"8nm":304,"9":[3,6,7,8,11,12,67,89,112,116,128,140,213,239,240,265,266,293,294,297,298,299,388,395,396,397],"90":397,"9223372036854775807":87,"9223372036854775808":397,"99":396,"9m":397,"abstract":[10,17,109,137,167],"boolean":[4,6,7,8,16,17,92,159,254,280,311,312,362,398],"byte":[0,6,8,17,169,170,177,181,191,194,197,202,389,398],"case":[3,8,9,11,12,14,93,94,95,96,112,128,137,140,172,175,205,296,395,397],"char":398,"class":[17,19,49,53,55,64,88,99,109,111,118,137,167,170,177,182,191,210,220,224,232,236,262,290,328,338,350,366,370,395],"default":[0,4,5,6,7,8,9,11,12,14,52,57,59,60,61,68,69,70,88,89,100,117,137,142,144,169,190,203,206,236,241,262,267,288,290,295,299,321,366,388,395,397],"do":[7,11,395],"export":12,"final":[7,34,46],"float":[17,19,21,23,24,32,34,46,99,105,108,191,193,195,205,338,340,342,343,345,346,348,350,357,359,361,378,379,380,397,398],"function":[3,7,11,111,396],"import":396,"int":[17,18,19,21,25,26,27,28,29,30,32,34,37,38,39,40,41,42,46,64,66,68,69,70,73,77,78,83,84,87,88,93,94,95,96,99,107,111,114,117,120,122,126,127,131,132,133,134,135,137,139,144,151,152,153,155,156,157,158,160,162,163,164,202,210,211,212,213,216,218,219,220,221,222,223,224,225,231,236,243,253,255,256,257,258,260,262,279,281,282,284,285,288,290,310,313,314,319,320,350,358,366,368,369,381,388,395],"new":[0,4,10,11,17,60,61,89,90,91,93,94,95,96,103,111,115,116,169,190,206,209,232,233,234,235,239,240,241,242,243,246,249,254,260,261,265,266,267,268,280,288,289,303,318,321,328,329,387,395,396,397],"null":[0,7,8,389,394,397],"public":[14,396],"return":[3,4,5,6,7,8,11,17,53,54,55,57,58,59,60,61,64,74,75,76,89,91,92,93,94,95,96,97,98,99,100,105,108,111,114,115,116,120,121,136,137,139,147,165,169,170,173,182,183,185,186,187,197,198,200,201,202,205,208,209,220,222,223,236,239,240,241,242,245,246,248,254,261,262,265,266,267,268,270,273,280,282,289,290,292,293,294,295,296,301,308,309,315,321,325,327,333,335,360,363,368,369,388,397],"static":[169,203,232,233],"transient":[14,16],"true":[4,5,6,7,8,16,59,64,65,66,67,68,69,70,71,74,76,79,81,82,89,103,124,125,149,150,174,189,190,206,232,234,235,288,290,292,293,294,295,296,297,298,299,300,302,303,304,305,306,307,308,311,312,315,318,321,323,324,327,328,339,388,395,396],"while":[3,6,7,8,11,12,34,39,46,196,199,292,338,389,394,395,396,397],A:[0,6,7,8,13,89,97,205,232,243,249,260,288,304,315,338,366,388,395,397],As:[6,8,11,89,114,172,175,361,395],At:[11,117,144,395],By:[11,12,169,203,321,388],For:[3,5,6,7,8,10,11,12,14,44,48,93,113,137,292,327,350,397],If:[0,1,2,3,4,5,6,7,8,9,11,12,14,15,16,34,39,40,44,46,48,72,77,78,83,84,87,90,91,93,94,95,96,97,99,100,102,105,108,112,115,117,128,140,144,145,190,196,197,199,201,202,205,209,239,240,241,242,243,254,260,261,265,266,267,268,280,288,289,308,321,327,328,344,388,395,397,398],In:[3,8,9,11,14,67,128,172,176,296,328,338,350,395,396,397],It:[3,4,5,6,7,8,11,12,16,89,112,140,288,338,388,395,397],No:[6,8],On:[8,9,12,14,112,140],One:[0,3,4,6,8,398],The:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,16,34,44,46,48,58,64,80,85,90,91,93,94,95,96,99,105,108,109,111,112,123,128,129,137,140,143,145,169,183,190,196,197,199,201,205,206,208,209,238,239,243,249,260,262,264,265,287,288,293,304,305,307,321,325,327,328,337,338,350,388,389,394,395,397,398],There:[12,386,389,394,396,398],To:[3,4,6,7,8,10,12,14,59,183,203,288,295,321,388,395],With:[4,5,6,7,8],_:7,__add__:[182,183],__array__:[290,292,315],__call__:[137,139,370,371],__contains__:[64,65,66],__delitem__:[169,196,197,199,205,209],__eq__:[18,19,20,33,64,67,170,171,191,192,236,238,262,264,338,339],__getitem__:[52,58,88,89,92,98,111,112,113,114,115,116,137,140,141,142,143,159,166,169,196,197,199,205,220,221,236,239,240,241,242,254,261,262,265,266,267,268,280,289,290,293,294,295,296,298,311,323,366],__index__:395,__iter__:[64,72],__len__:[64,73,111,120,220,222],__mul__:[338,345],__repr__:[64,74,111,121,137,147,169,182,185,198,236,245,262,270],__setitem__:[169,196,197,199,205,209,290,297,298,299,300,312,324],__str__:[64,75,224,226],__truediv__:[182,183,186,338,346],__weakref__:[109,110,167,168],_arrai:11,_bit:7,_dimens:11,_origin:11,_rank:11,_shape:11,a1:11,a2:11,aa:201,abc:[183,186,187,189,190,200,203,206,278,308],abort:[17,205,328,330,331,333,335,336,337],abov:[11,77,83,87,89,395],abstracteventloop:100,access:[5,6,7,8,10,11,13,14,15,39,40,246,350,388,395,396],accomplish:327,accord:[6,7,8,11,12,112,140,169,170,172,176],account:[14,44,48,67,397],achiev:[6,8],acid:10,acknowledg:327,actual:[128,169,196,199,201,209,243,260,288,295,327,388,395,397],ad:[12,90,91,92,93,94,95,96,97,98,166,261,289,323,324],adapt:1,add:[12,18,19,32,46,89,236,260,262,288,395],add_done_callback:[99,101,106,350,351],addit:[3,4,5,6,7,8,9,11,12,14,18,19,32,46,67,88,89,182,186,236,243,260,262,288,328,337,338,350,388,395,397],addition:[11,12,64,190,203,249,288,328,395],address:9,advanc:[10,17,88,395],advantag:[10,327],advis:7,affect:[12,88,94,95,96,113,116,246,327,366,397],after:[4,5,6,7,8,12,205,243,260,288,327,344,350,388,395,397],ag:205,against:397,alia:[17,18,19,27,41,111,127,131,137,149,150,151,152,153,154,155,157,158,236,253,262,279,290,310,387],align:[12,112,140,239,265,293,297,324,327,397],all:[0,3,4,6,7,8,9,10,11,15,16,17,34,44,46,48,89,93,94,95,96,97,117,137,144,202,206,243,260,288,296,315,321,327,328,388,395,397,398],all_proxi:9,allow:[0,8,11,12,13,14,89,288,299,300,321,327,328,388,397],allus:14,along:[7,243,249,260,288,304,388,397],alreadi:[4,6,7,8,11,12,102,190,203,243,260,288,328,330,333,334,388],also:[1,2,3,4,6,7,8,10,11,12,13,34,46,64,67,88,89,93,94,95,96,169,203,243,260,288,299,308,327,328,350,361,388,395,396,397,398],altern:[9,327,395],alwai:[3,4,5,6,7,8,89,93,297,298,299,300,312,324,395,397],among:3,amount:[88,93,202,366],amplif:397,an:[0,1,3,4,5,6,7,8,9,10,11,12,14,17,44,48,64,71,86,88,89,90,93,94,95,99,100,102,109,111,112,113,116,117,118,119,128,137,139,140,144,145,146,169,172,175,176,182,186,194,196,197,199,202,205,209,210,212,220,224,232,236,239,242,243,249,260,262,265,268,288,290,292,293,296,297,299,300,312,321,324,327,328,335,338,350,360,361,366,370,372,381,386,395,396,397,398],analog:10,ancestor:5,ani:[2,4,5,6,7,8,9,11,14,17,18,19,22,31,34,35,44,45,46,48,49,50,51,52,53,54,55,56,57,60,89,92,96,98,99,105,111,112,115,119,128,136,137,140,146,159,165,166,169,182,183,184,189,190,196,197,199,201,203,205,206,209,232,233,236,244,254,259,261,262,264,269,271,272,274,275,277,280,283,286,288,289,295,297,299,300,305,311,312,315,321,323,324,327,328,337,338,341,349,388,395,396,397],anoth:[0,64,65,67,80,85,111,112,123,129,137,140,143,170,171,236,238,262,264,395],api:[1,9,10,14],append:[182,183,196,197,199,205,209],appl:12,appli:[0,1,2,3,4,5,6,7,8,9,11,14,34,46,88,89,92,98,111,113,137,141,142,159,166,241,254,261,267,280,289,294,305,311,312,366,395,397,398],applic:[12,14,303,307,397],application_default_credenti:14,appropri:14,aqacaamabaafaayaaaagqqaameeaaebbaabqqqaaye:8,ar:[0,3,4,5,6,7,8,9,10,11,12,14,17,21,32,34,44,46,48,57,67,89,90,92,97,98,111,112,113,116,140,159,166,167,169,202,203,205,243,249,254,260,261,264,270,271,272,274,275,277,280,283,288,289,299,311,312,323,324,327,328,338,361,388,389,394,395,397,398],arbitrari:[6,11,17,386,395],archiv:12,aren:12,arg0:[220,221,370,371],arg:395,argument:395,arithmet:3,arr:128,arrai:[3,4,5,10,11,15,17,88,92,98,99,113,116,128,137,142,144,146,159,166,210,212,224,227,236,241,252,254,261,262,267,270,277,280,288,289,290,292,295,296,297,298,299,300,301,305,306,307,310,311,312,314,315,321,323,324,327,328,360,361,363,366,388,396,397,398],arrang:327,array_lik:[17,89,210,212,214,236,243,252,260,262,277,288,290,292,297,298,299,300,307,312,315,324,327,360,388,395],ascii:398,aspect:[19,21,23,24,32,34,46,397],aspect_ratio:[6,7,8,19,21,23,32,34,46,397],aspect_ratio_soft_constraint:[19,21,24,32,34,46,397],assert:[62,100,238,264,381],assign:[6,7,11,297,298,299,300,312,324,395,396],associ:[64,100,177,179,181,197,205,209,262,278,288,290,308,322,333,388],assum:[4,5,6,7,8,11,397],astyp:[290,301],async:[100,328,396],asynchron:[10,99,100,101,102,103,104,105,106,108,109,232,290,297,298,299,300,312,315,324,327,328,333,350,396],asyncio:[99,100,102,327,396],atom:[5,10,16,328,329,332],attempt:[5,14,395],attribut:[5,6,395],augment:[1,2,3,4,5,6,7,8,13,14,15,16,398],auth:14,authent:[0,9],author:[9,14],automat:[6,7,8,10,11,12,14,106,290,292,328,388,397],avail:[0,9,12,361],averag:3,avoid:[7,100,112,140,395],await:[99,100,169,198,200,201,203,205,206,208,209,290,292,293,294,295,296,302,303,304,305,306,307,308,311,315,318,321,323,327,328,363,388,395,396],awar:395,ax:[6,287,293,294],b1:8,b:[5,12,67,97,112,140,143,169,174,178,187,194,196,197,199,200,201,202,203,205,208,209,238,248,264,273,395],back:[1,6,7,8,10,328,396],backward:[4,5,6,7,8,88,94,366],bandwidth:10,base:[2,3,6,7,8,11,17,109,167,169,182,185,188,198,204,236,238,245,262,264,270,301,338,340,343,347,363,364,365,368,369,395,397],base_unit:[338,340,342,344,347,348,397],basic:395,bazel:12,bazel_cach:12,bazel_tool:12,bazelisk:12,bazelisk_hom:12,bazelrc:12,bdist_wheel:12,bear:7,becaus:[5,7,327,395],becom:[105,108,201,327,336],been:[8,11,99,103,104,243,260,278,288,305,327,328,330,331,333,336,337,388],befor:[4,6,7,8,205,288,321,388],begin:[89,99,106,395],behav:113,behavior:[9,11,12,16,89,112,140,205,315,327,395],being:[4,5,6,7,8,12,205,328],below:[11,78,84,87],best:[6,7,8],better:292,between:[11,388],bfloat16:[8,17,361,398],big:[6,8,398],bill:14,binari:12,binary16:[17,378,398],binary32:[17,379,398],binary64:[17,380,398],bind:[12,190,203,206,288,321],bit:[6,7,8,11,17,382,383,384,385,390,391,392,393,398],block:[3,6,7,8,13,100,105,108,196,197,199,292,297,298,299,300,312,315,324,327,328,397],blocksiz:[6,8,290,293,294,295,296,303,311,318,321,323,328,388,396],blosc:[6,8,12,290,293,294,295,296,303,311,318,321,323,388,397],blosclz:[6,8],bool:[3,8,17,18,19,20,31,33,34,46,49,51,53,54,55,57,64,65,66,67,68,69,70,71,76,79,81,82,89,99,102,103,104,111,117,124,125,137,144,149,150,169,170,171,174,182,189,190,191,192,206,236,238,259,262,264,286,288,290,316,317,321,326,328,329,331,332,334,337,338,339,350,352,353,356,362,388,395,398],bool_:[17,362],boringssl:12,both:[4,6,7,8,11,34,46,112,140,243,260,288,388,397],bound:[3,4,6,7,8,11,17,64,67,68,69,70,71,77,78,80,81,82,83,84,85,89,90,92,93,96,98,111,112,117,122,123,124,125,126,127,128,129,132,137,140,142,144,146,149,150,151,152,153,155,159,160,166,169,170,172,175,176,190,203,205,206,207,208,236,243,255,260,262,264,270,281,288,290,305,308,313,317,321,325,388,395,397],boundari:397,box:[111,123],broadcast:[8,89,98,166,239,243,260,261,265,288,289,293,297,299,300,307,312,323,324,327,388,395,397],brotli:12,bsd:9,bucket:[2,3,5,7,8,14,388,396],buffer:[3,8],bug:12,build:10,build_def:12,build_doc:12,build_ext:12,built:[9,12,361,395],bundl:[9,12],bz2:8,bzip2:[6,8,12],bzl:12,c16:8,c8:8,c:[1,10,34,39,46,89,97,201,271,283,290,295,296,311,315,321,323,388,395,397],c_rehash:9,cach:[0,4,5,6,7,8,10,12,17,52,205,206,290,315,317,321,327,388,396],cache_pool:[0,4,5,6,7,8,54,58,60,62,63,270,290,293,294,295,296,311,321,323,327,388,396],cacherevalidationbound:[4,5,6,7,8],cafil:14,call:[59,89,99,100,103,106,115,196,197,199,205,234,242,246,295,315,327,330,333,395],callabl:[99,101,107,350,351,358],callback:[101,107,350,351,358],can:[9,10,11,12,14,128,202,239,243,249,260,265,288,293,327,328,388,395,396,397],cancel:[99,102,103,104,327,350,352,353],cancellederror:[102,103],cannot:[88,89,242,328],canon:397,capabl:[8,395],capath:14,captur:[190,206,288,321],care:7,cartesian:111,cast:[4,17,301,363,398],caus:[8,395],cc:201,cd:12,cdot:11,cert:[9,14],certain:11,certif:12,chain:[89,395],chang:[11,12,88,91,205,262,288,328,366],channel:[7,388,396],charact:[12,398],characterist:388,check:[4,6,7,8,64,65,66,333,395],child:[62,63],choic:7,choos:397,chosen:[3,6,7,8,388],chunk:[10,19,20,21,23,24,25,26,29,30,32,33,34,36,39,43,44,46,47,48,236,243,246,260,262,271,283,288,290,295,296,302,311,321,323,327,388],chunk_aspect_ratio:[6,7,8,34,46,388],chunk_aspect_ratio_soft_constraint:[34,46],chunk_el:[6,8,34,46,388],chunk_elements_soft_constraint:[34,46],chunk_layout:[6,7,8,236,239,240,241,242,243,244,246,254,256,259,260,261,262,271,283,288,290,302,318,388,397],chunk_shap:[6,8,34,46,388],chunk_shape_soft_constraint:[34,46],chunk_siz:[7,388,396],chunklayout:[6,7,8,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,236,239,240,241,242,243,246,254,256,259,260,261,262,271,288,290,302,388,397],chunkss:397,circumst:4,cl:12,clang:12,clear:[34,46],clevel:[6,8,290,293,294,295,296,303,311,318,321,323,388,397],clone:12,close:[11,64,69],cloud:[10,14,15,327,396],cloudsdk_config:14,cmake:12,cname:[6,8,290,293,294,295,296,303,311,318,321,323,388,397],coalesc:[327,328],code:12,codec:[18,19,34,36,46,236,243,247,260,262,272,283,288,290,303,318,388],codec_chunk:[6,7,8,18,34,36,46,397],codec_chunk_aspect_ratio:[34,46],codec_chunk_aspect_ratio_soft_constraint:[34,46],codec_chunk_el:[34,46],codec_chunk_elements_soft_constraint:[34,46],codec_chunk_shap:[34,46],codec_chunk_shape_soft_constraint:[34,46],codecspec:[7,17,49,50,51,236,243,247,260,262,272,288,290,303,388],colexicograph:[6,7,34,39,46,315,397],column:[34,39,46,315,397],com:[9,12],com_facebook_zstd:12,com_google_boringssl:12,com_google_brotli:12,com_google_snappi:12,com_google_tensorstor:12,combin:[6,8,338,388,395,397],comma:[9,12],command:[9,12],commit:[17,196,199,201,205,209,315,327,328,333,334,335,336,337,350,354],commit_async:[208,327,328,330,333,335],commit_start:[328,334],commit_sync:[169,299,328,333,335],common:[3,4,9,15,34,46,137,395],compar:[18,19,20,33,64,67,170,171,191,192,236,238,262,264,338,339],comparison:[238,243,260,264,288,388],compat:[0,4,5,6,7,8,9,11,12,111,128,243,260,288,297,299,300,307,312,324,327,388,395,396,397],compil:12,complement:[17,382,383,384,385,398],complet:[11,99,101,102,104,105,108,196,197,199,201,205,209,232,234,235,297,298,299,300,312,315,324,327,350,395,396],complex128:[8,17,364,398],complex64:[8,17,365,398],complex:[3,17,364,365,398],compon:[4,5,6,7,8,18,34,111,117,137,144,182,186,236,243,398],compos:[2,10,11,116,137,143,242,268],composit:[11,395],compress:[8,293,294,328,388,396,397],compressed_segment:[7,388,396],compressed_segmentation_block_s:[7,388,396],compressor:[6,247,272,277,290,295,296,303,311,318,321,323,388,397],comput:[3,11,14,111,123,196,197,199,239,265,290,293,294,295,296,311,323,395],concaten:9,concurr:[0,5,10,13,14,99,206,321,327],condit:[14,112,140,205,209],config:14,configur:[0,10,14],confus:395,conjunct:[11,288,321,388,397],connect:[9,10,14],consecut:[89,395],consequ:[113,116,190,206,288,321],consid:[6,327,397],consist:[4,5,6,7,8,10,89,128,205,395],constant:[1,11,17,210,211,224,228,381,395],constrain:[6,7,10,11,243,260,288,388,395,397],constraint:[1,2,3,4,11,18,19,21,24,26,29,30,32,34,37,38,39,40,44,46,48,236,243,246,247,249,260,262,271,272,274,275,277,283,288,338,388,397,398],construct:[18,19,21,22,34,35,49,50,52,59,60,61,63,64,68,69,70,71,111,117,118,119,137,144,145,146,170,172,177,178,182,184,191,193,210,211,212,213,236,243,244,262,269,338,340,341,342,343,344,366,367,370,371,372,373],constructor:59,consum:[17,89,99,202,350,395],contain:[3,5,9,11,12,64,65,66,72,89,93,111,123,170,174,344,395,396,397],content:13,context:[1,2,3,4,5,6,7,8,10,13,14,15,16,17,52,53,54,55,56,57,58,59,60,61,62,63,89,99,189,190,198,200,203,206,264,270,288,290,292,293,294,295,296,301,308,311,321,323,327,328,360,363,388,395,396,398],context_a:264,context_b:264,contextresourc:[0,4,5,6,7,8,13,14,16],contigu:[1,64,315],continu:[196,197,199],contrast:395,contribut:7,control:327,conveni:[4,5,6,7,8,14,296],convers:[2,290,292,396],convert:[2,6,18,19,31,34,45,46,49,51,99,100,115,182,189,190,206,236,243,259,260,262,286,288,297,299,300,312,321,324,327,338,349,360,388,395],coordin:[89,395],copi:[0,11,12,169,170,173,182,187,200,236,238,246,248,262,264,273,327,350,355,395],core:[0,10,395],coroutin:[100,109],correctli:11,correspond:[6,7,8,11,14,15,16,17,21,32,34,46,80,85,89,90,99,100,123,128,129,232,243,249,260,288,304,350,361,362,364,365,378,379,380,382,383,384,385,386,388,389,390,391,392,393,394,395,397,398],cost:11,count:128,cpu:0,crash:327,creat:[4,5,10,12,17,52,55,56,58,169,190,203,206,232,233,249,262,288,290,292,293,294,295,296,297,298,299,300,302,303,304,305,306,307,308,311,312,315,318,321,323,324,327,328,329,396,397,398],credenti:[0,14,17,52,396],crt:[9,14],curl:[12,14],current:[0,8,11,12,99,196,197,199,205,290,292,315,327,328,396],d:[17,64,89,90,91,92,93,94,95,96,97,98,112,113,138,139,140,141,237,240,263,266,286,287,291,294,298,366,367,381,395,396],dask:395,data:[0,1,2,3,4,5,10,15,16,183,184,185,186,187,198,200,205,236,243,251,260,262,276,288,295,297,299,300,301,303,306,307,312,315,321,324,327,360,361,362,363,370,371,372,378,379,380,382,383,384,385,386,388,389,392,394,395,397,398],data_copy_concurr:[0,4,5,6,7,8,89,99,270,290,293,294,295,296,301,311,321,323,363,388,395,396],data_encod:[7,388,396],data_typ:7,dataabc:183,databas:10,dataset:[6,189,290,292,293,294,295,296,297,298,299,300,305,306,310,311,312,314,315,321,323,324,327,328],dataset_3d:396,dataset_futur:396,datatyp:[6,276,293,294,328,388,396],date:12,datetim:8,deadlin:[105,108,357,359],deadlock:100,decod:[0,10,17,49,397],decrypt:9,def:100,defer:395,defin:[0,4,5,6,7,8,11,13,14,16,17,89,109,110,111,167,168,236,361,395,397],del:196,delet:[4,6,7,8,169,196,199,201,209,288,321,388],delete_exist:[4,6,7,8,288,321,328,388,396],delete_rang:[169,201],demonstr:396,denot:395,depend:[9,14,89,315,327,395,398],deprec:[8,395],deriv:[338,347],describ:[11,17,18,19],desir:249,detail:[9,10],determin:[4,6,7,11,112,140,169,388,397],determinist:3,develop:14,deviat:[338,397],dexpr:395,diagon:[88,90,366,395],did:[105,108],differ:[3,11,15,92,98,99,159,166,205,243,254,260,261,280,288,289,311,312,318,323,324,388,389,394],dim:[17,44,48,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,111,112,114,118,140,144,165,210,212,215,381],dimens:[3,8,10,11,17,18,19,21,28,32,34,42,44,46,48,64,68,69,70,71,86,88,90,91,92,93,94,95,96,97,98,111,113,114,115,117,118,120,124,125,128,130,133,137,138,141,144,149,150,154,166,210,213,236,237,239,240,243,249,260,261,262,263,265,266,274,279,282,286,287,288,289,290,291,293,294,298,304,314,323,324,328,338,342,366,367,387,388,396],dimension:[3,10,11,17,89,111,290,395],dimension_separ:[8,290,295,296,311,321,323,388],dimension_unit:[6,7,236,243,249,260,262,274,288,290,304,388,397],dimensionless:[6,338,397],dimexpress:[17,88,89,90,91,92,93,94,95,96,97,98,111,113,137,141,236,240,262,266,290,294,298,366,395],dimselectionlik:[88,97,111,115,366,367],direct:89,directli:[0,1,2,3,4,5,6,7,8,11,12,13,14,128,137,183,271,272,274,275,277,283,297,298,299,300,312,324,338,395,397,398],directori:[9,12,13,14,15,16],disabl:[8,9],discrep:[112,140],disjoint:327,dist:12,distribut:[9,12],divid:[338,346,395],divisor:[338,346],doc:12,document:[9,15,397,398],doe:[4,6,7,8,9,11,12,13,59,89,91,93,94,95,96,128,137,271,272,274,275,277,278,283,288,295,308,321,327,338,361,388,395,397],domain:[3,10,17,88,89,90,91,92,93,94,95,96,97,98,99,111,112,113,114,115,116,117,118,119,120,122,123,124,125,126,127,128,129,130,131,132,133,134,135,137,138,140,141,142,143,144,145,146,148,149,150,151,152,153,154,155,157,159,160,163,164,166,236,237,239,240,241,242,243,249,250,254,255,257,258,260,261,262,263,265,268,274,275,281,282,283,284,285,287,288,289,290,291,292,293,294,296,297,298,299,300,304,305,312,313,314,315,318,319,320,323,324,327,366,381,387,388,395,396,397],domin:395,don:12,done:[10,12,14,93,99,100,104,232,234,235,243,260,288,350,356,388],doubl:[17,338,380,397,398],download:12,downsampl:[4,17,368,369,398],downsample_factor:[3,17,368,369],downsample_method:3,downsamplemethod:[3,368,369],driver:[0,10,17,49,89,99,169,183,184,185,186,187,189,190,196,197,198,199,200,201,202,203,205,206,208,209,236,247,249,262,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,282,283,286,287,288,289,290,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,311,312,315,318,321,323,324,327,328,338,363,388,395,396,397,398],drop:[11,327],dtype:[1,2,3,4,5,6,7,8,17,89,99,236,238,243,244,245,248,251,256,259,260,262,273,275,276,277,283,288,290,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,310,311,312,314,315,318,321,323,324,327,328,360,361,362,363,364,365,370,371,372,373,374,375,376,377,378,379,380,382,383,384,385,386,388,389,390,391,392,393,394,395,396,397,398],due:[7,13,205],dummi:[89,395],duplic:[91,395],durabl:[10,196,199,201,209,327,350],dynam:9,e:[6,7,8,9,11,12,14,17,34,39,46,87,89,93,94,95,96,112,116,140,205,206,246,315,321,328,395,397],each:[0,3,4,5,6,7,8,9,11,21,32,59,91,93,94,95,96,111,117,124,125,128,130,137,144,149,150,154,236,243,246,249,260,262,274,288,290,292,304,388,395,397,398],earlier:12,effect:[11,89,112,140,190,206,262,271,272,274,275,277,283,288,321,330,333,395],effici:[3,7,10,11,18,43,44,47,48,327,328,397,398],effort:12,either:[4,6,7,8,11,14,17,64,112,115,140,297,298,299,300,312,324,327,328,336,366,395],element:[2,3,7,18,19,21,25,26,32,34,39,40,45,46,89,111,135,137,164,236,258,262,270,285,290,320,395,397],elements_soft_constraint:[19,21,26,32,34,46,397],empti:[5,6,11,64,76,80,85,86,112,140,170,172,174,175,176,194,209,243,260,288,338,388,395,397],enabl:[4,6,7,8,10,14,64,72,137,327],encod:[0,6,8,10,12,17,49,388,396,397,398],end:[14,15,16,97,128,395],endian:[6,7,8,398],engin:14,enhanc:395,ensur:[12,99,106,183,249,327,328,395],entir:[5,7,11,112,140,292,327,344,395,397,398],entri:[191,194],environ:[12,14],epoch:[4,105,108,191,195,205],equal:[0,1,6,7,11,17,18,19,20,33,39,40,57,64,67,77,78,83,84,87,89,90,116,170,171,191,192,236,238,239,240,242,243,260,262,264,265,266,268,278,288,293,296,297,300,303,307,308,338,339,381,388,395,397],equival:[3,6,8,34,46,64,73,89,90,93,94,95,97,111,116,128,138,160,163,164,205,237,243,255,257,258,260,263,281,284,285,288,291,292,296,313,314,319,320,321,327,335,342,388,395,397],error:[5,6,7,8,11,14,99,100,105,108,112,140,196,197,199,205,232,234,243,260,288,335,388,395],escap:12,etc:[3,9,12,14,318],even:[3,5,10,57,196,199,395],evenli:397,event:100,everi:[4,5,6,7,8,10,11,90,397],evict:0,exactli:[3,6,7,8,89,395],exampl:[12,328,396],except:[6,7,8,93,99,100,103,105,106,196,197,199,232,234,243,260,264,288,328,350,357,388,395,397],excess:7,exclus:[11,64,68,77,78,111,117,122,137,144,151,170,172,175,395],exclusive_max:[6,7,8,11,64,65,66,67,68,69,72,74,75,77,78,79,80,81,82,83,85,87,111,112,113,114,115,116,117,119,122,123,124,125,128,129,140,144,145,151,165,170,172,175,239,240,241,254,261,265,283,288,293,297,318,395],exclusive_min:[64,78,84],execut:[0,12,99,106],exist:[1,4,5,6,7,8,12,89,93,112,140,144,145,196,197,199,201,205,209,243,249,260,288,297,299,300,312,321,324,327,370,372,395,397],exit:328,expect:[9,12,109,249,395],explicit:[4,11,64,111,116,117,124,125,137,144,149,150,236,239,242,243,260,262,265,268,288,290,293,296,297,300,327,388,395,397],explicitli:[6,7,8,106,395,397],expos:5,expr:[93,111,113,137,141,236,240,242,262,266,268,290,294,296,298,300,395],express:[10,17,64,74,88,89,91,92,93,94,95,96,97,98,111,113,128,137,141,236,240,262,266,290,294,298,366,387],extend:[1,2,3,4,5,6,7,8,11,13,14,16],extens:[8,12,89,361],extent:[8,11,135,196,199,201,209,397],extern:[190,205,206,288,321,328],extract:[88,90,366],f2:8,f4:[8,277,388],f8:8,f:[8,99,290,315,327,388],facil:9,factor:3,fail:[6,14,205,328,395],fake:14,fals:[4,6,7,8,16,19,31,49,51,53,54,55,57,65,66,68,69,70,71,79,81,82,87,89,100,103,124,125,149,150,174,182,189,190,206,232,234,235,236,259,262,286,288,290,317,321,328,329,395,397],faster:12,fastest:[6,8,12],fc44652a42b3:12,fetch:12,few:395,fewer:[0,395],field:[8,80,85],file:[5,6,7,8,9,10,12,14,15,16,183,184,185,186,187,189,198,200,327,328,396],file_io_concurr:[0,13,62,63,189,198,200],filesystem:[0,10,13,15,396],fill:[10,97,236,243,252,260,262,277,288,290,307,388,396,397],fill_valu:[8,236,238,243,252,260,262,277,288,290,295,296,307,311,318,321,323,388,397],filter:[8,247,290,295,296,303,311,318,321,323,388,397],find:[9,12],fine:[297,298,299,300,312,324],finit:[11,64,71,72,79,87,128,243,260,288,388,397],first:[7,11,12,89,90,98,166,261,289,323,324,395,397],fix:[327,389,394],fix_resizable_bound:[290,317],flag:[12,80,85,123,129],flatten:395,float16:[8,17,378,398],float32:[6,7,8,17,277,302,363,365,379,388,398],float64:[6,8,17,364,380,398],fly:3,flyeem:396,flyem:388,follow:[3,6,7,8,9,11,12,14,109,112,140,243,260,288,338,388,395,397,398],forc:[99,106],form:[11,58,296,395],format:[6,7,8,9,10,388,397,398],fortran:[6,7,34,39,46,315,397],forward:350,found:197,fraction:205,framework:52,frequent:3,fresh:[4,5,6,7,8],from:[0,1,2,3,4,5,6,7,8,10,11,13,14,17,18,19,22,34,35,46,49,50,52,55,56,60,61,62,63,89,90,97,111,114,117,118,119,128,137,144,145,146,170,172,182,184,191,193,202,205,236,243,244,246,262,269,292,327,328,338,340,341,343,344,347,360,366,367,370,372,388,395,396,397],fsync:327,full:[5,8,11,16,89,321,395,397],fulli:[8,10,11,137,190,206,288,321,327],further:397,futur:[12,17,99,100,101,102,103,104,105,106,107,108,109,169,201,202,203,205,209,232,233,234,235,290,315,317,327,328,333,336,350,351,354,355,358,388,396],futurelik:[17,99,100,109,110],g:[9,14,17,89,93,94,95,96,206,246,321,328,395],gc:[2,3,5,7,8,15,16,327,388,396],gcc:12,gce:14,gcloud:14,gcs_request_concurr:[14,388,396],gcs_request_retri:[14,388,396],gcs_user_project:[14,388,396],gener:[12,89,169,177,179,191,192,193,194,195,205,209,296,338,395,397],get_running_loop:100,get_valu:100,git:12,github:12,given:[0,3,13,52,58,64,66,89,93,94,95,96,395,397],global:[0,14],good:7,googl:[10,12,14,327,396],google_application_credenti:[9,14],googleapi:9,grain:[297,298,299,300,312,324],granular:[7,397],graph:[190,206,288,321],grid:[6,7,8,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,34,36,37,38,43,46,47,327,397],grid_origin:[6,7,8,18,34,37,38,44,46,48,239,240,241,242,243,244,246,254,256,259,261,283,302,318,397],grid_origin_soft_constraint:[18,34,38,44,46,48,397],grid_soft_constraint:[21,32],group:[7,17,328],guarante:[5,10,196,199,201,205,209,327,328,350,361],guid:10,gzip:[6,7,8,388,396,397],ha:[6,7,8,11,14,89,96,97,99,102,103,104,190,201,206,243,260,278,288,307,321,327,328,330,331,333,334,336,337,350,388,395],half:[0,17,64,68,169,170,172,378,398],handl:[14,17,52,53,58,99,224,226,232,290,350],hard:[6,7,8,11,18,19,21,29,32,34,37,39,40,44,46,48,397],hash:[7,388,396],have:[6,7,8,11,12,14,64,91,112,140,190,206,239,243,260,265,288,293,305,321,328,361,388,395,396,397],header:[6,8],hemibrain:388,here:6,hierarch:397,high:10,higher:[6,8,205],hit:396,hold:350,hostnam:9,how:[9,14,397],howev:[3,12,14,89,99,137],http:[12,14],http_archiv:12,http_proxi:9,https_proxi:9,hull:[64,80,111,123],i1:8,i2:8,i4:[8,388],i8:8,i:[0,6,7,8,10,11,14,34,39,44,46,48,87,89,93,97,112,116,140,196,197,199,205,212,213,271,272,274,275,277,283,315,327,328,395,396,397],id:[0,7,8,14,58,290,295,296,303,311,318,321,323,388,397],ident:[6,7,11,116,144,145,206,264,321,388,396],identifi:[0,4,6,8,11,12,15,111,112,114,140,169,191,194,395,397,398],ieee:[17,378,379,380,398],iexpr:395,if_equ:209,if_not_equ:205,ignor:[7,44,48,397],ijg:7,imag:7,imaginari:398,immedi:[11,100,109,395],immut:[111,338,395],implement:[5,10,12,205],impli:[262,271,272,274,275,277,283],implicit:[6,7,8,11,17,64,68,69,70,71,80,81,82,85,89,90,111,112,117,123,124,125,129,137,140,144,149,150,243,260,288,388,395,397],implicit_low:[64,67,68,69,70,71,81],implicit_lower_bound:[111,117,124,137,144,149,165,395],implicit_upp:[64,67,68,69,70,71,74,82],implicit_upper_bound:[111,117,125,137,144,150,165],implicitli:[6,7,8,11,395,396],impos:[11,338,397],improv:[327,328],includ:[6,7,8,9,10,12,16,17,57,111,115,262,271,272,274,275,277,283,297,299,300,312,315,321,324,327,395,397],include_default:[19,31,49,51,53,54,55,57,182,189,236,259,262,286],inclus:[11,64,68,69,70,83,84,111,117,126,127,132,137,144,152,153,155,160,170,172,176,236,255,262,281,290,313,395],inclusive_max:[11,64,67,69,77,78,82,83,84,87,111,117,126,152,381],inclusive_min:[6,7,8,11,64,65,66,67,68,69,70,72,74,75,77,78,79,80,81,82,83,84,85,87,111,112,113,114,115,116,117,119,122,123,124,125,126,127,128,129,130,132,134,135,140,144,145,153,165,170,172,176,239,240,241,254,261,265,283,288,293,297,318,381],incompat:[44,48,243,260,288,388],inconsist:5,increment:[12,243,249,260,288,304,388,397],independ:[7,11,17,236,388,397],index:[3,7,10,18,42,64,66,88,90,91,92,93,94,95,96,97,98,112,113,114,115,116,117,118,119,128,133,139,140,141,142,143,144,145,146,148,159,161,166,167,168,210,212,220,224,239,241,242,243,249,254,260,261,265,267,268,275,280,287,288,289,293,295,296,297,299,300,304,311,312,323,324,366,381,387,388,397],index_arrai:[11,146,165,210,212,214,242,267,268,280,289,295,296,300,311,323],index_array_bound:[11,146],index_exp:[111,128],index_rang:[144,165,210,212,215],indexdomain:[6,7,8,11,17,18,44,48,64,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,140,145,148,236,239,240,241,242,243,250,254,260,261,262,265,275,288,290,293,294,297,298,305,388,395,397],indexerror:[89,91,93,94,95,96,242,395],indexinterv:11,indextransform:[1,2,3,4,5,6,7,8,11,17,89,90,91,92,93,94,95,96,97,98,111,113,116,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,210,211,212,213,220,224,236,241,242,254,261,262,265,266,267,268,280,287,289,290,293,294,296,300,387,395,398],indic:[3,6,7,8,11,17,57,64,68,69,70,71,72,79,81,82,86,88,89,92,93,97,98,111,112,117,124,125,128,137,139,140,142,144,149,150,159,166,170,172,174,175,176,177,180,194,205,209,224,236,241,242,243,249,254,260,261,262,267,268,270,280,288,289,290,295,296,299,300,304,311,312,316,321,323,324,326,327,328,331,332,334,337,338,350,366,367,381,388,395,397],indicaet:6,indirectli:[137,397],individu:[5,7,395,397],ineffici:7,inf:[11,17,44,48,64,68,69,71,75,77,78,83,84,89,90,91,92,96,98,116,117,119,141,142,143,144,146,159,166,178,193,205,381,387,395],infinit:[11,64,128,243,260,288,388,397],info:7,inform:[9,12,14,388],infti:11,inherit:[52,60,61,62],init:0,initi:[1,12,395],inlin:395,inner:[8,39,40,64,65],inner_ord:[6,7,8,18,34,39,40,41,42,45,46,239,240,241,242,243,244,246,254,259,261,283,302,318,388,397],inner_order_soft_constraint:[18,34,39,40,46,397],innermost:[18,34,39,46,397],input:[1,2,3,4,6,7,8,11,17,88,89,90,91,92,93,94,95,96,97,98,115,137,139,140,141,142,143,144,145,146,148,149,150,151,152,153,154,155,156,157,158,159,166,210,213,243,260,287,288,366,387,388,395,398],input_dimens:[11,116,143,144,145,146,165,210,213,216,267,286,295,323,395,396],input_exclusive_max:[11,89,99,137,140,144,146,149,150,151,165,265,266,267,268,280,286,288,289,290,293,294,295,296,301,311,321,323,363,388,395,396],input_inclusive_max:[11,93,137,144,152],input_inclusive_min:[11,89,93,94,95,99,137,140,144,146,149,150,151,152,153,154,155,165,265,266,267,268,280,286,288,289,290,293,294,295,296,301,311,321,323,363,388,395,396],input_label:[11,89,90,92,93,94,95,96,97,98,137,140,144,146,148,154,156,158,162,165,265,266,293,294,388,395,396],input_origin:[137,153,155],input_rank:[11,89,116,137,139,140,141,143,144,149,150,156,158,211,213,242,268,296,387,395],input_shap:[11,90,94,95,96,97,137,144,148,149,150,151,152,153,154,155,156,157,158,162,165,212,242,265,266,267,268,280,289,296,300,395],insert:395,instal:[10,14],instanc:[0,59,102,370,371],instead:[4,5,6,7,8,9,12,99,128,137,183,205,296,327,388,395],instruct:10,int16:[6,7,8,17,382,398],int32:[1,2,6,7,8,17,89,238,310,314,383,388,395,398],int64:[6,8,17,384,398],int8:[6,7,8,17,385,398],integ:[0,1,2,3,4,6,7,8,11,14,17,64,92,113,114,116,159,254,280,311,312,382,383,384,385,390,391,392,393,397,398],integr:395,intend:[12,14,15,16],interdepend:[190,206,288,321],interfac:[10,169,232,297,298,299,300,312,324,350],interleav:395,intermedi:395,intern:[6,7,205],interoper:[290,292,361,396],interpret:[128,177,180,338,395,397,398],interrupt:[105,108],intersect:[64,85,90,111,129],interv:[3,11,17,44,48,64,65,66,67,68,69,70,71,72,73,75,77,78,79,83,84,87,169,170],introduc:10,introspect:58,invoc:[12,395],invok:[12,99,101],involv:[11,395],ip:9,irrespect:[93,205],isol:[10,328],isomorph:[190,206,288,321],issu:327,iter:[64,72],its:[11,13,52,55,56,60,111,119,137,146,205,236,244,338,341,395,397],itself:[5,327,350,395],j:[11,112,140],janelia:388,jax:[8,361],join:[4,5,6,7,8,182,186],jointli:327,jpeg:[7,12],jpeg_qual:7,json:[0,1,2,3,4,6,8,9,10,11,13,14,15,16,17,18,19,22,31,34,35,36,37,38,39,40,43,45,46,47,49,50,51,52,53,54,55,56,57,60,111,119,136,137,146,165,169,182,184,185,189,198,203,236,238,244,245,259,262,264,269,270,286,338,341,349,386,388,397],json_point:5,just:[11,395,396],k:[97,112,140],keep:327,kei:[5,6,7,8,10,17,52,58,169,170,172,174,177,181,182,183,186,187,188,191,194,196,197,199,200,201,202,203,204,205,206,207,208,209,262,278,288,290,308,327,328,388,396,397],kept:[7,12],key_encod:8,keyboard:[105,108],keyboardinterrupt:[105,108],keyerror:[196,197,199,205],keyrang:[169,170,171,172,173,174,175,176,201,202],keyvaluestorebackedchunkdriv:[4,6,7,8,398],keyword:99,kvstore:[2,3,4,5,6,7,8,13,14,15,16,17,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,262,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,282,283,286,287,288,289,290,292,293,294,295,296,297,298,299,300,302,303,304,305,306,307,308,311,312,315,318,321,323,324,327,328,388,396],label:[6,7,8,10,11,17,64,67,68,69,70,71,74,75,80,85,86,88,89,90,91,97,111,113,114,115,117,118,119,123,129,130,137,141,144,154,239,240,241,242,243,250,254,260,261,265,288,293,294,297,298,305,366,367,388,395,397],lambda:99,larg:[10,202,292],larger:[11,396],largest:7,last:[11,89,103,114,115,196,197,199,205,234,242,395],latenc:[10,327],later:[12,13],latest:12,latter:8,layer:[5,6,7,8,327,397],layout:[10,17,18,19,33,34,41,42,44,45,46,48,236,243,246,260,262,271,288,290,302,315,388],lead:[11,100,344,397],least:[0,6,11,112,140,395],leav:[6,93,94,95],left:[7,11,112,140,388],legaci:395,len:120,length:[3,6,8,11,17,139,389,394,395,397],leq:11,less:[11,243,249,260,288,304,338,342,388,395,397],level:[2,6,8,10,205,396,397],lexicograph:[3,34,39,46,169,170,172,176,315,397],libcurl:9,libjpeg:12,libpng:12,librari:[8,10,128,137,395],lightweight:395,like:[9,10,14,113,116,249,388,395],likewis:395,limit:[0,10,11,14,62,63,350],link:[9,12,232,233,234,235],linux:[9,12],list:[6,9,11,12,72,109,110,114,167,168,169,201,202,205,368,369,395],liter:395,littl:[7,8,398],load:12,local:[0,9,10,13,14,15],localhost:14,locat:[9,14,318,388],lock:13,logic:[11,111,327,398],login:14,longer:350,loop:100,lost:5,low:[7,11],lower:[3,11,64,68,69,70,71,78,81,84,90,93,96,111,117,124,127,128,132,137,144,149,153,155,160,170,172,176,236,255,262,281,290,313,395,397],lowest:3,lru:0,lz4:[6,8,12,290,293,294,295,296,303,311,318,321,323,388,397],lz4hc:[6,8],m1:11,m2:11,m:[11,12,397],mac:9,machin:[10,13,14],maco:12,made:[205,328],mai:[0,3,5,6,7,8,9,11,12,16,64,93,94,95,96,97,100,109,111,115,117,144,169,196,197,199,203,205,206,208,232,249,290,292,297,299,300,303,312,315,318,321,324,325,327,333,337,338,366,388,395,397,398],main:[105,108],major:[34,39,46,315,397],make:[9,12,397],manag:[17,52,328],mani:[9,11,14,89,137,395],manipul:16,manual:[11,12],map:[0,11,17,89,90,91,92,93,94,95,96,97,98,113,116,137,139,140,141,142,143,144,145,146,159,161,166,169,210,211,212,213,220,287,387,395],mark:[11,64,102,232,234,235,395],match:[0,1,2,3,4,6,7,8,11,16,80,85,91,93,94,95,96,112,140,202,205,209,243,260,288,388,395,397,398],mathrm:[7,11],mathtt:11,max:3,max_retri:14,maximum:[0,3,14,105,108],mayb:12,mean:[3,4,5,6,7,8,395],meaning:87,mechan:[4,5,6,7,8,10,169,350,395],median:3,member:[0,1,2,3,4,5,6,7,8,11,13,14,15,16,34,36,37,38,39,40,43,46,47,57,397,398],memori:[0,1,4,6,7,8,10,11,15,17,169,190,196,197,199,201,202,203,205,206,208,209,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,282,283,286,287,288,289,290,292,293,294,295,296,297,298,299,300,302,303,304,305,306,307,308,311,312,315,318,321,323,324,327,328,360,388,396,398],memory_key_value_stor:[16,190,206,270,290,293,294,295,296,308,311,321,323,388],mere:[295,327,350],merg:[21,32,243,260,288,388,397],metadata:[4,6,7,8,14,249,271,272,274,275,276,277,279,282,283,286,287,290,293,294,295,296,311,321,323,328,388,396],metdata:6,method:[3,6,8,14,17,210,217,224,296,368,369,395,396],microsoft:12,middl:396,million:[6,7,8],min:[3,11],mind:327,minim:[388,395],minimal_spec:321,minimum:[3,111,123],minishard:7,minishard_bit:[7,388,396],minishard_index_encod:[7,388,396],mismatch:11,miss:[169,177,178,180,205,209,397],mix:395,mode:[3,12,89,92,98,262,288,290,309,321,328,388],model:8,modif:[17,328],modifi:[5,11,111,182,190,246,327],modul:12,more:[4,5,6,7,8,9,11,12,89,115,296,327,395,398],most:[3,7,8,9,11,14,15,89,103,115,117,144,169,196,197,199,205,234,242,296,327,395,397],ms:9,msvc:12,much:12,multi:[10,16,17,290],multipl:[0,3,7,8,10,11,12,13,14,16,249,297,298,299,300,312,324,327,328,388,395],multipli:[6,7,11,338,340,342,343,344,345,348,397],multiscal:7,multiscale_metadata:[7,388,396],murmurhash3_x86_128:7,must:[0,1,2,3,4,5,6,7,8,9,11,12,14,34,46,59,80,85,89,97,106,116,205,239,242,243,260,265,268,288,293,296,297,300,321,327,388,395,397,398],my:[2,3,5,7,8,14],n5:[4,10,264,269,270,273,274,276,278,279,282,286,287,288,293,294,297,298,304,305,308,328,388,397],n:[11,17,89,111,395],name:[6,7,8,12,224,226,229,370,373,374,395],nanomet:7,nasm:12,nativ:[6,8,10],ndarrai:[290,292,395,396],ndim:[18,19,27,41,111,131,137,158,236,253,262,279,290,310],nearest:3,necessari:[9,11,112,140,321,398],necessarili:[89,395,397],need:[11,12,89,137,338,395,397],neg:[97,114,128,395,397],neither:[4,5,6,7,8,11,321,388],neq:11,nest:[1,11,190,203,288],nesteddirectorystor:8,net_zlib:12,network:[10,13,14],neuroglanc:[7,10,388,396],neuroglancer_multiscale_volum:7,neuroglancer_precomput:[4,249,388,396,397],neuroglancer_uint64_sharded_v1:[7,388,396],never:[4,315,327,395],newaxi:[17,89,90,387,395],newli:90,nghttp2:12,nm:[6,7,249,274,304,339,340,341,343,344,345,346,347,349,397],no_proxi:9,non:[3,4,5,6,7,8,11,12,14,80,85,89,97,112,140,169,203,243,260,288,328,350,388,395,397],none:[11,14,17,18,19,21,23,24,25,26,27,28,29,30,32,34,37,38,39,40,44,45,46,48,52,59,60,61,64,68,69,70,71,88,89,93,94,95,96,99,100,101,105,106,107,108,111,117,128,137,144,145,169,182,190,196,199,201,202,203,205,206,207,208,209,210,214,215,216,219,232,234,235,236,239,240,241,242,243,247,249,250,251,252,253,254,256,260,261,262,265,266,267,268,272,274,275,276,277,278,279,280,282,287,288,289,290,292,295,296,303,304,307,308,311,318,321,322,323,325,328,330,333,335,336,350,351,354,355,357,358,359,360,366,387,388,395],nonzero:[89,395],nor:[4,6,7,8,11,321,388],normal:[4,5,6,7,8,9,11,12,112,140,243,260,288,327,328,388,395],note:[3,6,7,9,11,12,89,243,260,288,388],now:327,np:[128,292,396],num_channel:[7,388,396],number:[0,3,4,6,7,11,12,14,17,18,19,21,25,26,28,32,34,42,46,91,93,94,95,96,105,108,111,117,120,128,133,135,137,144,164,202,236,258,262,285,290,314,320,338,344,364,365,395,397,398],numer:[3,11,338,395,397],numpi:[8,11,17,88,89,92,93,98,111,128,137,142,159,166,236,241,242,254,261,262,267,268,280,289,290,292,295,299,311,312,323,324,361,362,364,365,366,370,372,378,379,380,382,383,384,385,386,389,390,391,392,393,394,396],numpy_dtyp:[370,375],numpyindexingspec:[88,89,92,98,137,142,159,166,236,241,254,261,262,267,280,289,290,295,299,311,312,323,324,366],o:[0,10,196,197,199,271,272,274,275,277,283,315,395,396],oauth2:9,obj:[142,395],object:[0,1,2,3,4,5,6,7,8,11,13,14,15,16,17,80,85,99,100,105,108,109,110,111,118,123,128,129,144,145,167,168,232,234,235,246,292,327,328,338,350,357,359,370,371,377,395,396,397,398],object_:[386,389,394],observ:328,obtain:[6,8,89,111,246,290,317,395,396],occupi:398,occur:[11,99,196,197,199,395],odd:3,offer:3,offici:8,offset:[3,11,18,44,48,88,94,95,116,143,144,145,146,162,165,210,211,212,213,218,286,366,395,396,397],often:[14,327],oindex:[88,92,137,142,159,236,241,242,254,261,262,267,268,280,289,290,295,296,299,300,311,312,323,324,366],older:[4,5,6,7,8,205],omit:[388,395],onc:[11,17,115,209,327,328,337,350],one:[6,8,9,11,14,89,90,112,117,140,144,243,260,288,296,388,395,397],ones:6,onli:[0,3,4,5,6,7,8,9,11,12,13,34,44,46,48,89,90,99,117,144,209,243,260,271,272,274,275,277,283,288,309,315,327,328,350,388,395,396,397],onto:395,op1:395,open:[4,5,6,7,8,10,17,64,68,99,169,170,172,190,196,197,198,199,200,201,202,203,205,206,208,209,249,262,288,290,292,293,294,295,296,297,298,299,300,302,303,304,305,306,307,308,311,312,315,318,321,323,324,327,328,337,395,396,397,398],openssl:9,oper:[0,4,5,6,7,8,9,10,11,12,13,17,89,91,92,93,94,95,96,97,98,99,101,102,103,104,105,106,108,113,116,137,142,159,166,167,169,177,196,199,201,203,205,208,209,232,241,254,261,267,280,289,290,295,297,298,299,300,312,322,324,325,327,337,350,388,395],opn:395,opt:12,optim:12,optimist:10,option:[0,1,2,3,4,5,6,7,8,9,11,12,13,14,15,16,17,64,111,236,243,260,262,271,272,274,275,277,283,288,388,397,398],order:[6,7,11,12,14,17,18,34,39,40,46,89,97,137,138,169,170,172,176,202,236,237,262,263,271,283,290,291,295,296,311,315,321,323,327,388,395,397,398],org:12,org_blosc_cblosc:12,org_lz4:12,org_nghttp2:12,org_sourceware_bzip2:12,org_tukaani_xz:12,origin:[3,6,7,8,11,18,34,37,38,46,88,93,94,95,96,111,127,132,137,155,160,190,206,236,243,255,260,262,281,288,290,313,321,366,388,395,397],orthogon:[92,159,254,280,311,312,395],os:9,other:[3,6,7,8,11,12,18,19,20,21,32,33,44,48,59,64,66,67,80,85,89,111,112,117,123,129,137,170,171,191,192,196,197,199,236,238,262,264,296,338,339,395,397],otherwis:[1,2,3,4,6,7,8,11,12,14,68,69,70,100,112,117,140,144,335,397,398],out:[11,89,90,91,92,93,94,95,96,97,98,140,141,142,143,144,145,146,159,166,287,387,395],outer:[88,92,137,159,236,254,262,280,290,311,312,366],output:[12,17,88,89,90,91,92,93,94,95,96,97,98,113,116,137,139,140,141,142,143,144,145,146,159,161,162,165,166,210,211,212,213,220,222,223,224,242,243,260,267,268,280,286,287,288,289,295,296,300,311,323,366,387,388,395,396],output_rank:[116,137,139,162,242,268,296,297,300],output_user_root:12,outputindexmap:[11,17,116,137,143,144,145,161,162,165,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,242,268,296,300],outputindexmethod:[17,210,217,220,224,225,226,227,228,229,230,231],outsid:[328,395],over:[3,9,11,64,72,116,144,145,327,395,397],overlap:5,overrid:[0,1,2,3,4,5,6,7,8,12,13,14,15,16,288,321,388,398],overridden:[6,12,190,203,288,388],own:14,pack:8,pai:14,pair:[16,232,233,338,343],paramet:[6,7,8,14,17,21,32,34,46,49,57,58,60,61,68,69,70,71,80,85,91,93,94,95,96,97,100,105,108,113,114,115,116,117,118,123,129,139,144,145,172,190,196,197,199,201,202,203,205,206,209,239,242,243,260,265,268,288,293,296,297,299,300,312,315,321,324,327,360,388,397,398],parent:[0,1,2,3,4,5,6,7,8,13,14,15,16,52,60,61,62,63,398],pars:[52,55,61,169,182,344,397],part:[12,18,34,236,243,249,366],partial:[4,6,7,8,11,388],particular:[0,10],particularli:87,partit:[292,397],pass:12,path:[4,5,6,7,8,9,10,12,13,14,15,16,169,182,183,184,185,186,187,188,189,190,196,197,198,199,200,201,203,204,205,206,209,278,308,328,388,396],pattern:99,pem:9,pend:0,pep:395,per:[6,7,8,11,19,21,25,26,32,397],perfect:395,perfectli:[327,395],perform:[2,3,7,10,11,88,196,199,201,203,208,209,271,272,274,275,277,283,297,298,299,300,312,315,324,325,388,395,396,397],permiss:14,permit:[4,5,6,7,8,11,88,89,97,113,116,243,260,288,388,395],permut:[11,18,34,39,40,46,397],persist:[8,328],physic:[6,17,236,243,249,260,262,274,288,290,304,338,388,397],pick:7,pip:12,place:[7,9,89],plain:88,platform:[8,12],plu:395,pm:11,png:12,point:[17,327,328,338,361,378,379,380,397,398],pointer:5,polici:[290,317],pool:[0,206,321,388],portion:[344,397],posit:[3,11,243,260,288,290,307,388,395,396],posix:[12,13],possibl:[6,7,11,12,318],potenti:395,power:395,pre:12,prebuilt:12,preced:[9,34,46,243,260,288,388,397],precis:[17,34,46,327,338,378,379,380,386,389,394,397,398],precomput:[7,10],predecessor:395,prefer:[34,46,397],prefix:[14,15,16,169,182,188,204,395],prepar:9,presenc:5,present:[3,6,11],preset:6,preshift_bit:[7,388,396],prevent:12,previou:395,previous:[4,5,6,7,8,13,14,16,99,107,203,388],primarili:[58,64,113,116],print:[9,68,69,70,71,75,99,247,249,250,251,252,256,276,279,282,287],prior:[4,5,6,7,8,12,91,93,94,95,96,395],problem:14,process:[5,10,13,292],produc:[17,99,105,108,232,395],product:[111,135],progress:12,project:[12,14],project_id:14,promis:[17,99,103,232,233,234,235],propag:[80,85,123,129],properti:[3,6,7,8,10,15,149,150,151,152,153,154,155,157,246,328,388,397,398],propos:395,protocol:[13,395],provid:[5,6,7,8,9,10,12,13,14,99,327,328,350,395],purpos:[16,113,395],py:[12,111,118,142],python3:12,python:[1,8,10,17,64,74,299,300,386,389,394,395],qualiti:7,quaniti:[338,397],quantiti:[17,243,249,260,288,304,338,342,388,397],queri:[10,99,103,104],queued_for_writeback_bytes_limit:0,quit:3,r:[174,309],rais:[44,48,72,91,93,94,95,96,99,105,108,115,128,196,197,199,202,205,239,240,241,242,243,254,260,261,265,266,267,268,280,288,289,328,335,388],rang:[11,64,88,94,95,96,97,169,170,171,172,173,174,175,176,201,202,212,213,327,366,367,395],rank:[1,2,3,4,5,6,7,8,11,18,19,21,27,28,32,34,39,41,42,44,46,48,89,90,91,92,93,94,95,96,97,98,111,112,113,116,117,120,124,125,128,131,133,137,140,141,142,143,144,145,146,156,158,159,162,166,220,222,223,236,238,239,240,241,242,243,244,245,248,249,251,253,254,256,259,260,261,262,268,279,282,283,287,288,290,296,297,300,310,314,318,387,388,395,397,398],rare:395,rate:397,rather:[34,39,40,46,89,395,397],ratio:[19,21,23,24,32,34,46,397],raw:[6,328],re:[12,169,190,206,288,290,321],reach:0,read:[2,3,4,5,6,8,10,11,17,18,19,34,43,44,46,169,177,178,197,203,205,208,209,290,292,295,296,297,298,299,300,301,309,312,315,316,322,324,325,327,328,350,360,363,388,395,397],read_chunk:[6,7,8,18,34,43,44,45,46,283,302,318,397],read_chunk_aspect_ratio:[34,46],read_chunk_aspect_ratio_soft_constraint:[34,46],read_chunk_el:[7,34,45,46],read_chunk_elements_soft_constraint:[34,46],read_chunk_shap:[7,34,44,46],read_chunk_shape_soft_constraint:[34,46],read_chunk_templ:[18,44,48],read_futur:396,readabl:[290,316],reader:[13,328],readi:[105,108,201,327,336],readm:12,readresult:[169,177,178,179,180,181,203,205,209],real:[243,260,288,388,398],rebuild:12,receiv:[11,14,105,108],recent:[0,89,103,115,196,197,199,205,234,242,395],recheck:[4,5,6,7,8],recheck_cached_data:[4,5,6,7,8,396],recheck_cached_metadata:[4,6,7,8],recommend:[7,12,297,298,299,300,312,324,338,395,397],record:[196,199,201,209],rectangular:[3,7,11],recurs:397,reduc:[12,296],refer:[0,4,5,6,7,8,9,10,12,13,14,15,16,89,109,110,167,168,190,206,288,321,327,395,397,398],reflect:[205,295,305,315,327,350],regardless:[4,5,6,7,8,395],region:[3,7,11,395,396],regist:[8,99,101,107],regular:[18,19,327,328,395,397],rel:[7,97,201,395,397],relat:[12,14,389,394],relationship:11,reli:398,relianc:13,remain:[6,8,11,89,96,190,203,288,337,344,395,397],remot:[0,9,10],remov:90,remove_done_callback:[99,107,350,358],reorder:97,replac:[190,288,395],repo:12,repositori:12,repres:[6,7,8,11,16,17,64,109,137,210,232,315,327,338,395,397,398],represent:[11,17,18,19,22,31,35,45,49,50,51,52,53,54,55,56,57,60,74,75,119,121,136,146,147,165,184,185,189,198,238,244,245,259,264,269,270,286,338,341,349,370,395,397,398],request:[14,99,102,205],requestor:14,requir:[1,2,3,4,5,6,7,8,13,14,15,16,117,144,315,388,396,397,398],reserv:11,resiz:[6,7,8,11,64,81,82],resolut:[6,7,274,388,396,397],resolv:[100,109,202,205,209,290,317,395],resourc:[0,1,2,3,4,5,6,7,8,10,13,14,15,16,17,52,53,54,58,59,190,203,206,264,270,288,321,388,398],respect:[3,7,21,32,64,90,93,327,395],restrict:202,result:[6,7,8,10,11,12,17,89,90,91,98,99,100,105,106,108,109,112,140,143,166,169,177,178,190,196,197,199,202,205,206,232,234,235,239,261,265,288,289,292,293,295,297,298,299,300,312,315,321,323,324,327,328,335,336,350,359,395,396,397],retain:[21,32,97,206,321,395,397],retain_context:[169,206,321],retri:14,retriev:[14,52,58,396],revalid:[4,5,6,7,8],revers:[97,137,138,236,237,262,263,290,291],rewrit:7,rfc:5,right:[11,14,112,140],rightarrow:11,roll:328,root:13,round:[3,7,11,395],row:[34,39,46,315,397],rs1:13,rtf:12,rule:[11,12],run:[14,100,105,108],runtim:[9,14],rw:309,s:[6,9,12,17,382,383,384,385,395,398],safe:[10,13,14,327],same:[0,5,6,7,8,11,12,16,59,91,93,94,95,96,190,206,288,303,308,318,321,327,328,350,395,396,397],satisfi:[7,315,395],satur:10,save:9,scalar:[89,93,94,95,96,297,299,300,312,324,327,361,370,371,395],scale:[7,249],scale_index:[7,388,396],scale_metadata:[7,388,396],schema:[10,11,17,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,283,288,290,318,388],script:12,sdist:12,sdk:14,se_curl:[9,12],second:[4,11,105,108,191,195,205],section:[9,10,14],secur:[9,14],segment:[388,396,397],sel:395,select:[17,80,85,88,89,90,91,93,94,95,96,97,111,115,123,129,249,366,367],self:[20,31,32,33,44,45,46,48,51,54,57,58,65,66,67,72,73,74,75,77,78,80,83,84,85,87,89,91,92,93,94,95,96,97,98,101,102,103,104,105,106,107,108,112,113,114,115,116,120,121,123,129,136,138,139,140,141,142,143,147,159,160,163,164,165,166,171,173,183,185,186,187,189,190,192,196,197,198,199,200,201,202,205,206,208,209,221,222,224,226,234,235,237,238,239,240,241,242,245,248,254,255,257,258,259,260,261,263,264,265,266,267,268,270,273,280,281,284,285,286,288,289,291,292,293,294,295,296,297,298,299,300,301,307,311,312,313,314,315,317,319,320,321,323,324,325,327,330,333,335,339,345,346,349,351,352,353,356,357,358,359,371,376],semant:[13,88,89,92,98,137,142,159,166,236,241,254,261,262,267,280,289,290,295,299,311,312,323,324,366,395],separ:[0,4,5,6,8,9,12,14,183,196,197,199,205,209,292,327,395,398],sequenc:[21,32,34,46,88,89,91,93,94,95,96,112,115,117,118,137,139,140,144,145,243,260,288,366,367,388,395],serial:11,serv:[7,112,140,249,397],server:[9,14],servic:14,set:[3,7,9,12,14,16,17,34,46,88,91,93,169,205,243,260,288,321,366,388,395],set_except:[232,234],set_result:[232,235],setup:[10,12],sever:[12,99],sha256:12,shape:[11,18,19,21,23,24,29,30,32,34,44,46,48,111,117,120,122,123,124,125,126,127,128,129,130,131,132,133,134,135,137,144,157,163,236,239,240,241,242,243,250,254,257,260,261,262,275,283,284,288,290,292,293,294,295,296,297,298,299,300,302,303,304,305,306,307,308,311,312,315,318,319,321,323,324,327,388,395,397],shape_soft_constraint:[19,21,30,32,34,45,46,397],shard:[388,396,397],shard_bit:[7,388,396],shard_data_encod:7,shardingspec:7,share:[0,10,13,14,17,52,59,190,203,206,288,321,388],shift:[88,94,95,366],shlex:12,shortcut:395,shorthand:[299,300],should:[4,5,6,7,8,9,12,14,15,16,100,327,397],show:12,shuffl:[6,8,290,293,294,295,296,303,311,318,321,323,388,397],sign:[11,17,382,383,384,385,398],signal:232,signific:327,silent:395,similar:[11,92,93,98,159,166,254,261,280,289,311,312,323,324,395],simpler:3,simplest:12,simpli:[90,100,135,350,395],simultan:12,sinc:[4,11,89,105,108,128,191,195,205,395,396],singl:[5,6,7,8,9,11,17,89,97,111,114,169,196,197,199,202,205,209,210,213,243,249,260,270,288,304,338,379,388,395,396,397,398],single_input_dimens:[11,224,230],singleton:[17,90,387],size:[0,6,7,8,11,12,21,32,64,70,73,74,76,80,85,87,111,117,135,137,144,164,236,258,262,285,290,320,327,388,396,397],skip:[12,321,395],slice:[89,93,111,112,128,137,140,395,396],slower:[6,8],slowest:[6,8],small:[1,7],smallest:[3,7,8],snappi:[6,8,12],so:[12,396],soft:[0,18,19,21,24,26,30,32,34,38,39,40,44,46,48,397],sole:89,some:[6,11,328,338,397],sourc:[11,12,290,297,298,299,300,312,324,327,350,360],space:[12,17,18,42,89,90,91,92,93,94,95,96,97,98,111,133,137,140,141,142,143,144,145,146,156,158,159,162,166,243,260,287,288,387,388,395,397],spec:[10,52,55,56,57,59,60,61,63,89,167,169,182,183,184,185,186,187,188,189,190,203,206,238,239,251,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,303,321,368,388],special:[0,7,11,12,14,17,77,78,83,84,89,172,175,381,395,397],specif:[0,6,8,12,15,16,17,49,52,55,56,169,182,190,191,194,206,262,271,272,274,275,277,283,288,321,338,388,397,398],specifi:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,21,32,34,39,40,44,46,48,49,64,68,69,70,88,89,93,94,95,96,97,98,100,105,108,111,112,114,115,117,128,140,144,145,166,169,170,172,177,190,191,196,199,201,202,203,205,206,209,232,234,235,236,243,246,247,249,252,260,261,271,272,274,275,277,278,283,288,289,290,301,315,321,323,324,327,338,342,345,346,363,366,387,388,395,397,398],split:12,squar:395,ssl:[9,12,14],sslkeylogfil:9,stack:12,stage:[17,328],staleness_bound:205,stamp:[169,177,178,179,203,205,209],standard:[8,12],start:[3,12,17,89,97,99,114,202,328,334,337,366,395],startup:12,state:[169,177,178,180,203,205,209],stderr:9,step:[11,89,327,395],still:[5,7,8,11,113,116,328,337,395],stop:[89,395],storag:[5,6,7,8,10,14,17,18,34,39,40,46,169,191,192,193,209,262,278,288,290,308,318,327,328,350,388,397],store:[5,6,7,8,9,11,15,17,169,182,183,186,187,188,191,194,196,197,199,200,201,202,203,204,205,206,207,208,209,249,262,278,288,290,301,302,303,304,307,308,318,327,328,338,363,388,396,397],str:[17,52,58,64,68,69,70,71,74,75,86,88,91,111,114,117,121,130,137,144,147,154,169,170,172,175,176,178,182,183,185,186,188,191,193,196,197,198,199,204,205,209,224,226,229,236,243,245,260,262,270,288,290,309,338,340,343,344,347,366,370,373,374,376,388,394,395],strictli:[112,140],stride:[3,11,88,93,144,146,165,210,212,213,219,366,395],string:[0,3,4,5,6,7,8,10,11,13,14,15,16,17,74,75,86,121,147,170,172,175,176,185,194,198,245,270,301,338,344,389,394,397,398],strip:[202,344,397],strip_context:[190,288,321],strip_prefix:12,strip_prefix_length:202,strong:10,studio:12,style:[14,15,16,88,89,92,93,98,128,137,142,159,166,236,241,242,254,261,262,267,268,280,289,290,295,299,311,312,323,324,366],sub:[5,12,396],subarrai:8,subdivid:397,subject:[290,317,350],subscript:[297,298,299,300,312,324,395,396],subsequ:[89,327,350,388,395],subset:[11,12,99,111,115,395],subtyp:[4,6,8,15,397,398],succe:11,success:[108,197,333,335],successfulli:[105,232,235,327,336,350],suffic:11,suffici:395,suffix:[182,183],suitabl:[6,7,8,12,388,397],sum:395,suppli:396,support:[0,2,3,4,5,6,7,10,11,12,13,15,16,88,99,128,167,169,196,199,201,209,249,290,299,316,326,328,361,395,396,397,398],surviv:327,synchron:[99,196,197,199,290,292,297,298,299,300,312,315,324,327,328,335,396],syntax:[0,5,297,298,299,300,312,324,338,395,397],system:[9,12,14,15,327],t:[12,109,137,138,190,203,236,237,262,263,288,290,291],tabl:[11,16],take:[7,9,10,34,46,243,260,288,388,395,397],taken:[7,44,48,67,397],target:[11,19,21,25,26,32,34,46,88,97,366,397],temporari:[7,12],tensoprstor:9,tensorflow:[8,361],tensorstor:[0,1,2,3,4,5,9,11,12,14,15,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,389,390,391,392,393,394,395,396,397,398],tensorstore_bazel_build_opt:12,tensorstore_bazel_compilation_mod:12,tensorstore_bazel_startup_opt:12,tensorstore_bazelisk:12,tensorstore_ca_bundl:9,tensorstore_ca_path:9,tensorstore_curl_verbos:9,tensorstore_gcs_http_url:[9,14],tensorstore_prebuilt_dir:12,tensorstore_system_lib:[9,12],term:[89,92,98,159,166,254,261,280,289,299,311,312,323,324,395],termin:[389,394],test:[16,99],th:[89,112,140,395],than:[0,4,5,6,7,8,11,12,34,39,40,46,89,115,205,395,397],thei:[6,16,57,113,116,389,394,395],them:327,therefor:[7,9],thi:[0,1,3,4,5,6,7,8,9,11,12,13,14,34,46,52,58,59,62,63,87,92,98,99,106,111,112,116,128,135,137,138,140,141,143,159,160,163,164,166,169,196,197,199,201,202,205,207,208,209,237,243,246,254,255,257,258,260,261,263,268,271,272,274,275,277,280,281,283,284,285,288,289,290,291,292,295,296,299,300,303,308,311,312,313,314,318,319,320,323,324,325,327,328,338,342,345,346,347,350,370,371,388,395,396,397],third:397,those:[99,296],though:[113,116],thread:[0,99,100,105,108,196,197,199,292,315],three:[7,11,112,140,397],through:[10,11,14,15,137],throughput:10,tie:3,time:[4,5,6,7,8,11,191,193,195,205,397],timedelta:8,timeout:[99,105,108,350,357,359],timeouterror:[105,108],timestamp:[169,177,179,191,192],timestampedstoragegener:[169,177,178,179,191,192,193,194,195,203,205,209],tl:12,tmp:[12,183,184,185,186,187,189,198,200,328,396],to_json:[18,19,31,45,49,51,53,54,55,57,62,111,136,137,165,182,189,236,259,262,286,338,349,370,376],togeth:8,tool:12,top:[2,396,397],total:[0,111,135,137,164,236,258,262,285,290,320],total_bytes_limit:[0,4,6,7,8,54,58,60,62,63,396],toward:395,traceback:[89,103,115,196,197,199,205,234,242,395],track:327,traffic:9,trail:[344,397],transact:[10,16,17,196,199,201,202,203,205,207,208,209,297,298,299,300,308,312,315,322,324,325,328,329,330,331,332,333,334,335,336,337,350,388],transform:[1,2,3,4,5,6,7,8,10,17,89,90,91,92,93,94,95,96,97,98,99,111,113,116,137,139,140,141,142,143,144,145,146,148,149,150,151,152,153,154,155,156,157,158,159,162,165,166,210,211,212,213,220,236,239,240,241,242,243,254,260,261,262,265,266,267,268,280,286,287,288,289,290,293,294,295,296,297,298,300,301,305,311,321,323,363,387,388,396,398],translat:[3,6,8,11,88,94,95,96,366,395],translate_backward_bi:[88,94,366],translate_bi:[88,89,91,95,113,139,141,286,287,366],translate_to:[88,96,366],transpos:[88,90,97,137,138,236,237,262,263,290,291,366,395],treat:[100,205,395,397],tree:12,trip:11,truncat:395,trust:9,ts:[6,7,8,41,42,44,45,48,54,58,59,60,62,63,64,65,66,67,68,69,70,71,72,74,75,77,78,79,80,81,82,83,84,85,86,87,89,90,91,92,93,94,95,96,97,98,99,100,103,112,113,114,115,116,117,118,119,120,122,123,124,125,126,127,128,129,130,131,132,133,134,135,138,139,140,141,142,143,144,145,146,148,149,150,151,152,153,154,155,156,157,158,159,162,165,166,169,174,183,184,185,186,187,189,190,196,197,198,199,200,201,202,203,205,206,208,209,211,212,213,232,234,235,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,256,259,260,261,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,282,283,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,310,311,312,314,315,318,321,323,324,327,328,339,340,341,342,343,344,345,346,347,348,349,363,367,381,387,388,395,396],tupl:[18,19,23,24,29,30,37,38,39,40,111,122,124,125,126,127,128,130,132,134,137,139,149,150,151,152,153,154,155,157,160,163,232,233,236,243,249,255,257,260,262,274,281,284,288,290,304,313,319,338,343,388,395],turbo:12,tutori:10,two:[5,11,17,18,19,20,33,191,192,327,328,338,339,350,382,383,384,385,395,397,398],txn:[169,208,299,327,328],type:[0,1,2,3,4,5,10,58,99,109,137,167,236,243,251,260,262,276,288,293,294,297,299,300,301,306,307,312,324,327,328,338,360,361,362,363,370,371,372,377,378,379,380,382,383,384,385,386,388,389,392,394,395,396,397,398],u1:8,u2:[8,275,283],u4:[290,295,296,311,321,323],u8:8,u:[347,348],udunits2:[338,397],uint16:[6,7,8,17,273,283,328,390,398],uint32:[6,7,8,17,99,290,292,293,294,295,296,297,298,299,300,301,303,304,305,306,307,308,311,312,315,318,321,323,324,327,363,391,396,398],uint64:[6,7,8,17,388,392,396,398],uint8:[6,7,8,17,243,244,245,248,251,256,259,260,273,276,393,398],um:274,unbind_context:[182,190,206,288,321],unbound:[11,17,44,48,64,71,77,78,83,84,87,117,144,190,288,381],unchang:[93,94,95,96,190,203,288,395],unchunk:7,uncommit:[315,327,328],uncondition:[98,166,261,289,323,324,395],unconstrain:[249,388],under:[2,4,13,395],underli:[4,5,6,7,8,10,11,15,137,262,278,288,290,308,327,328,350,388,397],unequ:395,unicod:[17,394,398],uniform:[3,10,397],uniqu:[11,59],unit:[17,236,243,249,260,262,274,288,290,304,338,339,340,341,342,343,344,345,346,347,348,349,388],unix:[4,14,15,16,105,108,191,195,205],unknown:[11,243,249,260,288,303,304,307,388,397],unlabel:[6,11,64,86,117,144,397],unless:[7,14,338,395,397],unlik:[89,99,395],unmatch:11,unregist:[99,107],unshar:388,unshard:397,unsign:[17,390,391,392,393,398],unspecifi:[3,6,7,8,11,19,28,34,44,46,48,177,178,180,194,202,205,236,250,251,256,262,276,282,287,395,397],unsuccessfulli:[102,108,232,234],until:[99,105,108,196,197,199,201,209,328,337,350,395],up:[7,12,14,397],updat:[7,18,19,32,46,182,190,236,238,246,247,248,249,250,252,256,260,262,264,270,273,288,290,317,321],upon:[99,101,395],upper:[6,8,11,64,68,69,70,71,77,82,83,90,111,117,122,125,126,128,137,144,150,151,152,170,172,175,395],url:[10,12],us:[0,1,3,4,5,6,7,8,9,10,11,12,13,14,16,17,18,36,58,59,64,88,89,93,94,95,96,99,100,106,109,111,113,116,128,137,169,183,190,203,205,206,208,232,236,239,240,241,242,254,261,262,265,266,267,268,278,280,288,289,290,293,294,295,296,297,298,299,300,303,308,311,312,315,318,321,322,323,324,325,327,328,333,337,338,344,350,360,366,386,387,388,389,394,395,396,397],usag:328,usezlib:[6,397],ustr:[17,394,398],usual:[172,176,395],utf:398,util:12,v1:[11,388,396],v2:11,v3:11,v4:11,valid:[0,6,11,34,46,89,93,191,195,205,395,397],valu:[0,1,3,4,5,9,10,11,17,34,46,57,64,67,77,78,83,84,87,89,93,99,109,115,169,177,178,179,180,181,182,183,186,187,188,190,191,194,196,197,199,200,201,202,203,204,205,206,207,208,209,224,225,231,236,243,249,252,260,262,277,278,288,290,304,307,308,321,327,338,342,386,388,395,396,397,398],valueerror:[44,48,72,115,128,202,239,240,241,242,254,261,265,266,267,268,280,289],variabl:[12,14,17,389,394],varieti:15,varlength:6,vector:[11,88,89,98,111,117,137,139,144,166,236,261,262,289,290,323,324,366],verbos:[9,395],veri:[7,113,116],verifi:14,version:[3,9,12,191,194,395],via:[1,3,6,7,8,10,39,40,395],view:[2,3,10,137,138,169,208,220,236,237,262,263,290,291,293,294,295,296,301,311,323,325,363,368,369,395,396],vindex:[88,89,98,137,142,166,236,241,242,254,261,262,267,268,280,289,290,295,296,299,300,311,312,323,324,366],virtual:[2,3,10,12,17,137,290,293,294,295,296,311,323,368,369],visibl:328,visual:12,volum:7,voxel:[7,397],voxel_offset:[7,388,396],vv:12,w:[11,309],wa:[4,9,52,63,105,108,203,205,246,333,388,396],wai:[0,6,7,8,10,12,397],wait:[99,327,396],weak:[109,110,167,168],well:[7,8,89,361,388],were:395,what:4,wheel:12,when:[0,1,4,5,11,12,89,100,106,201,205,249,297,298,299,300,312,315,324,327,336,350,395,397],where:[0,3,7,9,11,89,92,98,109,112,128,140,142,144,146,159,166,243,260,288,388,395,397,398],wherebi:395,whether:[57,68,69,70,71,89,99,103,104,111,117,124,125,137,144,149,150,321,328,331,332,334,337,395],which:[0,2,3,4,5,6,7,8,9,10,11,12,14,16,44,48,52,60,61,62,63,64,93,94,95,96,100,111,137,191,195,205,246,296,327,333,338,347,350,360,366,395,396,397],whitespac:[344,397],window:[9,12,13],wireshark:9,wise:[2,6,8],with_transact:[169,203,208,290,299,325,327,328,388],within:[0,3,4,5,6,7,8,11,14,15,16,18,34,39,46,105,108,169,182,188,202,204,205,290,315,395,397],without:[6,11,14,88,94,95,96,183,196,197,199,203,205,209,327,328,366,388,395,396,397],won:[190,203,288],work:[12,14],workspac:12,worst:[6,7],would:[91,128],writabl:[290,326],write:[2,4,5,6,8,10,11,14,17,18,19,34,46,47,48,169,196,199,201,203,205,208,209,290,296,297,298,299,300,301,309,312,315,322,324,325,326,327,328,350,360,363,388,395,397],write_chunk:[6,7,8,18,34,45,46,47,48,283,302,318,397],write_chunk_aspect_ratio:[34,46],write_chunk_aspect_ratio_soft_constraint:[34,46],write_chunk_el:[7,34,46],write_chunk_elements_soft_constraint:[34,46],write_chunk_shap:[7,34,46,48],write_chunk_shape_soft_constraint:[34,45,46],write_chunk_templ:[18,44,48],write_futur:396,writeback:[0,10,327],writefutur:[17,99,290,327,350,351,352,353,354,355,356,357,358,359],written:[12,243,260,288,290,307,327,388,396],x:[6,7,8,11,12,64,68,69,70,71,74,75,80,85,86,89,90,91,92,93,94,95,96,97,98,100,112,113,114,115,119,123,129,130,140,141,143,146,148,154,156,158,162,165,174,203,239,240,241,242,250,254,261,265,266,287,293,294,297,298,305,367,388,395,396],xcode:12,xre:7,xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx:12,xyz:7,xz:[6,12],y:[6,7,8,11,89,90,91,92,93,94,95,96,97,98,112,113,114,115,118,119,123,129,130,140,141,146,148,154,156,158,162,165,174,203,239,240,241,242,250,254,261,265,266,287,293,294,297,298,305,388,395,396],yet:[290,307,315],you:[4,6,7,8,9,12,14,59,327,388,396],your:12,yre:7,yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyi:12,z:[6,7,11,89,91,92,93,94,95,96,97,98,112,113,114,115,119,130,140,146,148,154,156,158,162,165,239,240,241,242,250,254,261,265,266,293,294,297,298,388,395,396],zarr:[2,3,4,10,247,265,266,267,268,271,272,275,277,280,283,289,290,292,295,296,299,300,302,303,306,307,311,312,315,318,321,323,324,327,388,395,397],zarr_format:[8,290,295,296,311,321,323,388],zarrai:8,zero:[4,6,7,8,11,64,76,89,90,117,144,243,260,288,388,395,397],zlib:[6,8,12],zre:7,zstd:[6,8,12]},titles:["Context framework","<code class=\"docutils literal notranslate\"><span class=\"pre\">array</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">cast</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">downsample</span></code> Driver","Drivers","<code class=\"docutils literal notranslate\"><span class=\"pre\">json</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">n5</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">neuroglancer_precomputed</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">zarr</span></code> Driver","Environment variables","TensorStore","Index space","Building and Installing","<code class=\"docutils literal notranslate\"><span class=\"pre\">file</span></code> Key-Value Store driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">gcs</span></code> Key-Value Store driver","Key-Value Storage Layer","<code class=\"docutils literal notranslate\"><span class=\"pre\">memory</span></code> Key-Value Store driver","API reference","tensorstore.ChunkLayout","tensorstore.ChunkLayout.Grid","tensorstore.ChunkLayout.Grid.__eq__","tensorstore.ChunkLayout.Grid.__init__(components)","tensorstore.ChunkLayout.Grid.__init__(json)","tensorstore.ChunkLayout.Grid.aspect_ratio","tensorstore.ChunkLayout.Grid.aspect_ratio_soft_constraint","tensorstore.ChunkLayout.Grid.elements","tensorstore.ChunkLayout.Grid.elements_soft_constraint","tensorstore.ChunkLayout.Grid.ndim","tensorstore.ChunkLayout.Grid.rank","tensorstore.ChunkLayout.Grid.shape","tensorstore.ChunkLayout.Grid.shape_soft_constraint","tensorstore.ChunkLayout.Grid.to_json","tensorstore.ChunkLayout.Grid.update","tensorstore.ChunkLayout.__eq__","tensorstore.ChunkLayout.__init__(components)","tensorstore.ChunkLayout.__init__(json)","tensorstore.ChunkLayout.codec_chunk","tensorstore.ChunkLayout.grid_origin","tensorstore.ChunkLayout.grid_origin_soft_constraint","tensorstore.ChunkLayout.inner_order","tensorstore.ChunkLayout.inner_order_soft_constraint","tensorstore.ChunkLayout.ndim","tensorstore.ChunkLayout.rank","tensorstore.ChunkLayout.read_chunk","tensorstore.ChunkLayout.read_chunk_template","tensorstore.ChunkLayout.to_json","tensorstore.ChunkLayout.update","tensorstore.ChunkLayout.write_chunk","tensorstore.ChunkLayout.write_chunk_template","tensorstore.CodecSpec","tensorstore.CodecSpec.__init__","tensorstore.CodecSpec.to_json","tensorstore.Context","tensorstore.Context.Resource","tensorstore.Context.Resource.to_json","tensorstore.Context.Spec","tensorstore.Context.Spec.__init__","tensorstore.Context.Spec.to_json","tensorstore.Context.__getitem__","tensorstore.Context.__init__(default)","tensorstore.Context.__init__(json)","tensorstore.Context.__init__(spec)","tensorstore.Context.parent","tensorstore.Context.spec","tensorstore.Dim","tensorstore.Dim.__contains__(dim)","tensorstore.Dim.__contains__(index)","tensorstore.Dim.__eq__","tensorstore.Dim.__init__(exclusive_max)","tensorstore.Dim.__init__(inclusive_max)","tensorstore.Dim.__init__(size)","tensorstore.Dim.__init__(unbounded)","tensorstore.Dim.__iter__","tensorstore.Dim.__len__","tensorstore.Dim.__repr__","tensorstore.Dim.__str__","tensorstore.Dim.empty","tensorstore.Dim.exclusive_max","tensorstore.Dim.exclusive_min","tensorstore.Dim.finite","tensorstore.Dim.hull","tensorstore.Dim.implicit_lower","tensorstore.Dim.implicit_upper","tensorstore.Dim.inclusive_max","tensorstore.Dim.inclusive_min","tensorstore.Dim.intersect","tensorstore.Dim.label","tensorstore.Dim.size","tensorstore.DimExpression","tensorstore.DimExpression.__getitem__","tensorstore.DimExpression.diagonal","tensorstore.DimExpression.label","tensorstore.DimExpression.oindex","tensorstore.DimExpression.stride","tensorstore.DimExpression.translate_backward_by","tensorstore.DimExpression.translate_by","tensorstore.DimExpression.translate_to","tensorstore.DimExpression.transpose","tensorstore.DimExpression.vindex","tensorstore.Future","tensorstore.Future.__new__","tensorstore.Future.add_done_callback","tensorstore.Future.cancel","tensorstore.Future.cancelled","tensorstore.Future.done","tensorstore.Future.exception","tensorstore.Future.force","tensorstore.Future.remove_done_callback","tensorstore.Future.result","tensorstore.FutureLike","tensorstore.FutureLike.__weakref__","tensorstore.IndexDomain","tensorstore.IndexDomain.__getitem__(domain)","tensorstore.IndexDomain.__getitem__(expr)","tensorstore.IndexDomain.__getitem__(identifier)","tensorstore.IndexDomain.__getitem__(selection)","tensorstore.IndexDomain.__getitem__(transform)","tensorstore.IndexDomain.__init__(components)","tensorstore.IndexDomain.__init__(dimensions)","tensorstore.IndexDomain.__init__(json)","tensorstore.IndexDomain.__len__","tensorstore.IndexDomain.__repr__","tensorstore.IndexDomain.exclusive_max","tensorstore.IndexDomain.hull","tensorstore.IndexDomain.implicit_lower_bounds","tensorstore.IndexDomain.implicit_upper_bounds","tensorstore.IndexDomain.inclusive_max","tensorstore.IndexDomain.inclusive_min","tensorstore.IndexDomain.index_exp","tensorstore.IndexDomain.intersect","tensorstore.IndexDomain.labels","tensorstore.IndexDomain.ndim","tensorstore.IndexDomain.origin","tensorstore.IndexDomain.rank","tensorstore.IndexDomain.shape","tensorstore.IndexDomain.size","tensorstore.IndexDomain.to_json","tensorstore.IndexTransform","tensorstore.IndexTransform.T","tensorstore.IndexTransform.__call__","tensorstore.IndexTransform.__getitem__(domain)","tensorstore.IndexTransform.__getitem__(expr)","tensorstore.IndexTransform.__getitem__(indices)","tensorstore.IndexTransform.__getitem__(transform)","tensorstore.IndexTransform.__init__(components)","tensorstore.IndexTransform.__init__(domain)","tensorstore.IndexTransform.__init__(json)","tensorstore.IndexTransform.__repr__","tensorstore.IndexTransform.domain","tensorstore.IndexTransform.implicit_lower_bounds","tensorstore.IndexTransform.implicit_upper_bounds","tensorstore.IndexTransform.input_exclusive_max","tensorstore.IndexTransform.input_inclusive_max","tensorstore.IndexTransform.input_inclusive_min","tensorstore.IndexTransform.input_labels","tensorstore.IndexTransform.input_origin","tensorstore.IndexTransform.input_rank","tensorstore.IndexTransform.input_shape","tensorstore.IndexTransform.ndim","tensorstore.IndexTransform.oindex","tensorstore.IndexTransform.origin","tensorstore.IndexTransform.output","tensorstore.IndexTransform.output_rank","tensorstore.IndexTransform.shape","tensorstore.IndexTransform.size","tensorstore.IndexTransform.to_json","tensorstore.IndexTransform.vindex","tensorstore.Indexable","tensorstore.Indexable.__weakref__","tensorstore.KvStore","tensorstore.KvStore.KeyRange","tensorstore.KvStore.KeyRange.__eq__","tensorstore.KvStore.KeyRange.__init__","tensorstore.KvStore.KeyRange.copy","tensorstore.KvStore.KeyRange.empty","tensorstore.KvStore.KeyRange.exclusive_max","tensorstore.KvStore.KeyRange.inclusive_min","tensorstore.KvStore.ReadResult","tensorstore.KvStore.ReadResult.__init__","tensorstore.KvStore.ReadResult.stamp","tensorstore.KvStore.ReadResult.state","tensorstore.KvStore.ReadResult.value","tensorstore.KvStore.Spec","tensorstore.KvStore.Spec.__add__","tensorstore.KvStore.Spec.__new__","tensorstore.KvStore.Spec.__repr__","tensorstore.KvStore.Spec.__truediv__","tensorstore.KvStore.Spec.copy","tensorstore.KvStore.Spec.path","tensorstore.KvStore.Spec.to_json","tensorstore.KvStore.Spec.update","tensorstore.KvStore.TimestampedStorageGeneration","tensorstore.KvStore.TimestampedStorageGeneration.__eq__","tensorstore.KvStore.TimestampedStorageGeneration.__init__","tensorstore.KvStore.TimestampedStorageGeneration.generation","tensorstore.KvStore.TimestampedStorageGeneration.time","tensorstore.KvStore.__delitem__","tensorstore.KvStore.__getitem__","tensorstore.KvStore.__repr__","tensorstore.KvStore.__setitem__","tensorstore.KvStore.copy","tensorstore.KvStore.delete_range","tensorstore.KvStore.list","tensorstore.KvStore.open","tensorstore.KvStore.path","tensorstore.KvStore.read","tensorstore.KvStore.spec","tensorstore.KvStore.transaction","tensorstore.KvStore.with_transaction","tensorstore.KvStore.write","tensorstore.OutputIndexMap","tensorstore.OutputIndexMap.__init__(constant)","tensorstore.OutputIndexMap.__init__(index_array)","tensorstore.OutputIndexMap.__init__(input_dimension)","tensorstore.OutputIndexMap.index_array","tensorstore.OutputIndexMap.index_range","tensorstore.OutputIndexMap.input_dimension","tensorstore.OutputIndexMap.method","tensorstore.OutputIndexMap.offset","tensorstore.OutputIndexMap.stride","tensorstore.OutputIndexMaps","tensorstore.OutputIndexMaps.__getitem__","tensorstore.OutputIndexMaps.__len__","tensorstore.OutputIndexMaps.rank","tensorstore.OutputIndexMethod","tensorstore.OutputIndexMethod.__init__","tensorstore.OutputIndexMethod.__str__","tensorstore.OutputIndexMethod.array","tensorstore.OutputIndexMethod.constant","tensorstore.OutputIndexMethod.name","tensorstore.OutputIndexMethod.single_input_dimension","tensorstore.OutputIndexMethod.value","tensorstore.Promise","tensorstore.Promise.new","tensorstore.Promise.set_exception","tensorstore.Promise.set_result","tensorstore.Schema","tensorstore.Schema.T","tensorstore.Schema.__eq__","tensorstore.Schema.__getitem__(domain)","tensorstore.Schema.__getitem__(expr)","tensorstore.Schema.__getitem__(indices)","tensorstore.Schema.__getitem__(transform)","tensorstore.Schema.__init__(components)","tensorstore.Schema.__init__(json)","tensorstore.Schema.__repr__","tensorstore.Schema.chunk_layout","tensorstore.Schema.codec","tensorstore.Schema.copy","tensorstore.Schema.dimension_units","tensorstore.Schema.domain","tensorstore.Schema.dtype","tensorstore.Schema.fill_value","tensorstore.Schema.ndim","tensorstore.Schema.oindex","tensorstore.Schema.origin","tensorstore.Schema.rank","tensorstore.Schema.shape","tensorstore.Schema.size","tensorstore.Schema.to_json","tensorstore.Schema.update","tensorstore.Schema.vindex","tensorstore.Spec","tensorstore.Spec.T","tensorstore.Spec.__eq__","tensorstore.Spec.__getitem__(domain)","tensorstore.Spec.__getitem__(expr)","tensorstore.Spec.__getitem__(indices)","tensorstore.Spec.__getitem__(transform)","tensorstore.Spec.__new__","tensorstore.Spec.__repr__","tensorstore.Spec.chunk_layout","tensorstore.Spec.codec","tensorstore.Spec.copy","tensorstore.Spec.dimension_units","tensorstore.Spec.domain","tensorstore.Spec.dtype","tensorstore.Spec.fill_value","tensorstore.Spec.kvstore","tensorstore.Spec.ndim","tensorstore.Spec.oindex","tensorstore.Spec.origin","tensorstore.Spec.rank","tensorstore.Spec.schema","tensorstore.Spec.shape","tensorstore.Spec.size","tensorstore.Spec.to_json","tensorstore.Spec.transform","tensorstore.Spec.update","tensorstore.Spec.vindex","tensorstore.TensorStore","tensorstore.TensorStore.T","tensorstore.TensorStore.__array__","tensorstore.TensorStore.__getitem__(domain)","tensorstore.TensorStore.__getitem__(expr)","tensorstore.TensorStore.__getitem__(indices)","tensorstore.TensorStore.__getitem__(transform)","tensorstore.TensorStore.__setitem__(domain)","tensorstore.TensorStore.__setitem__(expr)","tensorstore.TensorStore.__setitem__(indices)","tensorstore.TensorStore.__setitem__(transform)","tensorstore.TensorStore.astype","tensorstore.TensorStore.chunk_layout","tensorstore.TensorStore.codec","tensorstore.TensorStore.dimension_units","tensorstore.TensorStore.domain","tensorstore.TensorStore.dtype","tensorstore.TensorStore.fill_value","tensorstore.TensorStore.kvstore","tensorstore.TensorStore.mode","tensorstore.TensorStore.ndim","tensorstore.TensorStore.oindex","tensorstore.TensorStore.oindex.__setitem__","tensorstore.TensorStore.origin","tensorstore.TensorStore.rank","tensorstore.TensorStore.read","tensorstore.TensorStore.readable","tensorstore.TensorStore.resolve","tensorstore.TensorStore.schema","tensorstore.TensorStore.shape","tensorstore.TensorStore.size","tensorstore.TensorStore.spec","tensorstore.TensorStore.transaction","tensorstore.TensorStore.vindex","tensorstore.TensorStore.vindex.__setitem__","tensorstore.TensorStore.with_transaction","tensorstore.TensorStore.writable","tensorstore.TensorStore.write","tensorstore.Transaction","tensorstore.Transaction.__init__","tensorstore.Transaction.abort","tensorstore.Transaction.aborted","tensorstore.Transaction.atomic","tensorstore.Transaction.commit_async","tensorstore.Transaction.commit_started","tensorstore.Transaction.commit_sync","tensorstore.Transaction.future","tensorstore.Transaction.open","tensorstore.Unit","tensorstore.Unit.__eq__","tensorstore.Unit.__init__(components)","tensorstore.Unit.__init__(json)","tensorstore.Unit.__init__(multiplier)","tensorstore.Unit.__init__(pair)","tensorstore.Unit.__init__(unit)","tensorstore.Unit.__mul__","tensorstore.Unit.__truediv__","tensorstore.Unit.base_unit","tensorstore.Unit.multiplier","tensorstore.Unit.to_json","tensorstore.WriteFutures","tensorstore.WriteFutures.add_done_callback","tensorstore.WriteFutures.cancel","tensorstore.WriteFutures.cancelled","tensorstore.WriteFutures.commit","tensorstore.WriteFutures.copy","tensorstore.WriteFutures.done","tensorstore.WriteFutures.exception","tensorstore.WriteFutures.remove_done_callback","tensorstore.WriteFutures.result","tensorstore.array","tensorstore.bfloat16","tensorstore.bool","tensorstore.cast","tensorstore.complex128","tensorstore.complex64","tensorstore.d","tensorstore.d.__class_getitem__","tensorstore.downsample(spec)","tensorstore.downsample(store)","tensorstore.dtype","tensorstore.dtype.__call__","tensorstore.dtype.__init__(dtype)","tensorstore.dtype.__init__(name)","tensorstore.dtype.name","tensorstore.dtype.numpy_dtype","tensorstore.dtype.to_json","tensorstore.dtype.type","tensorstore.float16","tensorstore.float32","tensorstore.float64","tensorstore.inf","tensorstore.int16","tensorstore.int32","tensorstore.int64","tensorstore.int8","tensorstore.json","tensorstore.newaxis","tensorstore.open","tensorstore.string","tensorstore.uint16","tensorstore.uint32","tensorstore.uint64","tensorstore.uint8","tensorstore.ustring","Indexing","Tutorial","Schema","JSON Spec"],titleterms:{"boolean":[89,395],"class":[18,52,169,397],"new":[6,7,8,388],"public":[19,49,64,99,109,167,177,210,220,224,232,350,370],accessor:[18,52,53,55,64,99,111,137,169,170,182,191,236,262,290,328,338],ad:[89,395],align:11,all:[112,140],an:388,api:[12,17],arithmet:338,arrai:[1,6,7,8,89,395],aspect:[6,8],asynchron:17,authent:14,block:99,broadcast:11,build:12,c:[8,12],ca:[9,14],callback:99,cast:2,certif:[9,14],checkout:12,chunk:[4,6,7,8,18,397],cloud:9,codec:[6,7,8,397],compar:395,comparison:[18,19,170,191,236,262,338],compress:[6,7],compressor:8,concept:10,configur:9,constraint:[6,7,8],construct:395,constructor:[18,19,49,52,55,64,99,111,137,169,170,177,182,191,210,224,232,236,262,328,338,366,370],context:0,core:17,creat:[6,7,8,388],credenti:9,data:[6,7,8,17,290],dataset:396,debug:9,depend:12,develop:12,differ:395,dimens:[6,7,89,112,140,395,397],document:12,domain:[6,7,8,11],downsampl:3,driver:[1,2,3,4,5,6,7,8,13,14,15,16],element:[6,8],ellipsi:[89,395],encod:7,environ:9,error:89,exampl:[0,1,2,3,4,5,6,7,8,11,41,42,44,45,48,54,58,59,60,62,63,64,65,66,68,69,70,71,72,77,78,79,80,81,82,83,84,85,86,87,89,90,91,92,93,94,95,96,98,100,103,112,113,114,115,116,117,118,119,120,122,123,124,125,126,127,128,129,130,131,132,133,134,135,139,140,141,142,143,144,145,146,148,149,150,151,152,153,154,155,156,157,158,159,162,165,166,169,174,183,184,185,186,187,189,190,196,197,198,199,200,201,202,203,205,206,208,209,211,212,213,234,235,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,256,259,260,261,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,282,283,286,287,288,289,290,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,310,314,315,318,321,327,339,340,341,342,343,344,345,346,347,348,349,363,367,381,387,388,397],exist:388,explicit:[6,7,8],express:395,file:[4,13],fill:[6,7,8],flyem:396,fortran:8,framework:0,from:12,fulli:[112,140],gc:14,geometr:111,get:10,googl:9,hemibrain:396,highlight:10,http:9,i:[169,290],index:[11,17,89,111,137,236,262,290,395],instal:12,integ:[89,395],interfac:99,interv:[89,395],ipython:12,janelia:396,json:[5,7,398],kei:[13,14,15,16],label:[112,140],layer:15,layout:[6,7,8,397],librari:12,limit:[6,7,8,13],local:[12,396],map:[6,7,8],member:[19,49,64,99,109,167,177,210,220,224,232,350,370],memori:16,method:11,mix:[112,140],mode:395,mutat:[182,236,262],n5:[6,396],neuroglancer_precomput:7,non:327,numpi:395,o:[169,290],oindex:395,open:388,oper:[18,19,64,88,111,170,182,191,236,262,328,338,366],order:8,outer:395,output:11,packag:12,parti:12,proxi:9,publish:12,pypi:12,python:12,ratio:[6,8],raw:7,read:[7,396],refer:17,represent:[64,111,137,169,182,224,236,262],request:9,requir:12,run:12,scalar:8,schema:[6,7,8,397],segment:7,select:[6,7,8,395],semant:327,separ:7,sequenc:111,setter:18,shape:[6,7,8],shard:7,shell:12,singl:4,singleton:[89,395],space:11,spec:[17,398],specif:7,start:10,storag:[4,9,15],store:[13,14,16],string:[64,111,137,169,182,224,236,262],structur:8,style:395,support:[8,17],synchron:169,templat:18,tensorstor:[6,7,8,10,388],test:[12,14],third:12,tl:[9,14],transact:[169,290,327],transform:[11,395],tutori:396,type:[6,7,8,17,290],unconstrain:[6,7,8],unit:[6,7,397],unlabel:[112,140],unshard:7,valu:[6,7,8,13,14,15,16],variabl:9,vector:395,view:17,vindex:395,when:[6,7,8],without:12,write:[7,396],zarr:8}})