Search.setIndex({docurls:["context.html","driver/array/index.html","driver/cast/index.html","driver/downsample/index.html","driver/index.html","driver/json/index.html","driver/n5/index.html","driver/neuroglancer_precomputed/index.html","driver/zarr/index.html","environment.html","index.html","index_space.html","installation.html","kvstore/file/index.html","kvstore/gcs/index.html","kvstore/index.html","kvstore/memory/index.html","python/api/index.html","python/api/tensorstore.ChunkLayout.html","python/api/tensorstore.ChunkLayout.Grid.html","python/api/tensorstore.ChunkLayout.Grid.__eq__.html","python/api/tensorstore.ChunkLayout.Grid.__init__-components.html","python/api/tensorstore.ChunkLayout.Grid.__init__-json.html","python/api/tensorstore.ChunkLayout.Grid.aspect_ratio.html","python/api/tensorstore.ChunkLayout.Grid.aspect_ratio_soft_constraint.html","python/api/tensorstore.ChunkLayout.Grid.elements.html","python/api/tensorstore.ChunkLayout.Grid.elements_soft_constraint.html","python/api/tensorstore.ChunkLayout.Grid.ndim.html","python/api/tensorstore.ChunkLayout.Grid.rank.html","python/api/tensorstore.ChunkLayout.Grid.shape.html","python/api/tensorstore.ChunkLayout.Grid.shape_soft_constraint.html","python/api/tensorstore.ChunkLayout.Grid.to_json.html","python/api/tensorstore.ChunkLayout.Grid.update.html","python/api/tensorstore.ChunkLayout.__eq__.html","python/api/tensorstore.ChunkLayout.__init__-components.html","python/api/tensorstore.ChunkLayout.__init__-json.html","python/api/tensorstore.ChunkLayout.codec_chunk.html","python/api/tensorstore.ChunkLayout.grid_origin.html","python/api/tensorstore.ChunkLayout.grid_origin_soft_constraint.html","python/api/tensorstore.ChunkLayout.inner_order.html","python/api/tensorstore.ChunkLayout.inner_order_soft_constraint.html","python/api/tensorstore.ChunkLayout.ndim.html","python/api/tensorstore.ChunkLayout.rank.html","python/api/tensorstore.ChunkLayout.read_chunk.html","python/api/tensorstore.ChunkLayout.read_chunk_template.html","python/api/tensorstore.ChunkLayout.to_json.html","python/api/tensorstore.ChunkLayout.update.html","python/api/tensorstore.ChunkLayout.write_chunk.html","python/api/tensorstore.ChunkLayout.write_chunk_template.html","python/api/tensorstore.CodecSpec.html","python/api/tensorstore.CodecSpec.__init__.html","python/api/tensorstore.CodecSpec.to_json.html","python/api/tensorstore.Context.html","python/api/tensorstore.Context.Resource.html","python/api/tensorstore.Context.Resource.to_json.html","python/api/tensorstore.Context.Spec.html","python/api/tensorstore.Context.Spec.__init__.html","python/api/tensorstore.Context.Spec.to_json.html","python/api/tensorstore.Context.__getitem__.html","python/api/tensorstore.Context.__init__-default.html","python/api/tensorstore.Context.__init__-json.html","python/api/tensorstore.Context.__init__-spec.html","python/api/tensorstore.Context.parent.html","python/api/tensorstore.Context.spec.html","python/api/tensorstore.Dim.html","python/api/tensorstore.Dim.__eq__.html","python/api/tensorstore.Dim.__init__-exclusive_max.html","python/api/tensorstore.Dim.__init__-inclusive_max.html","python/api/tensorstore.Dim.__init__-size.html","python/api/tensorstore.Dim.__init__-unbounded.html","python/api/tensorstore.Dim.empty.html","python/api/tensorstore.Dim.exclusive_max.html","python/api/tensorstore.Dim.exclusive_min.html","python/api/tensorstore.Dim.finite.html","python/api/tensorstore.Dim.implicit_lower.html","python/api/tensorstore.Dim.implicit_upper.html","python/api/tensorstore.Dim.inclusive_max.html","python/api/tensorstore.Dim.inclusive_min.html","python/api/tensorstore.Dim.label.html","python/api/tensorstore.Dim.size.html","python/api/tensorstore.DimExpression.html","python/api/tensorstore.DimExpression.__getitem__.html","python/api/tensorstore.DimExpression.diagonal.html","python/api/tensorstore.DimExpression.label.html","python/api/tensorstore.DimExpression.oindex.html","python/api/tensorstore.DimExpression.stride.html","python/api/tensorstore.DimExpression.translate_by.html","python/api/tensorstore.DimExpression.translate_to.html","python/api/tensorstore.DimExpression.transpose.html","python/api/tensorstore.DimExpression.vindex.html","python/api/tensorstore.Future.html","python/api/tensorstore.Future.add_done_callback.html","python/api/tensorstore.Future.cancel.html","python/api/tensorstore.Future.cancelled.html","python/api/tensorstore.Future.done.html","python/api/tensorstore.Future.exception.html","python/api/tensorstore.Future.force.html","python/api/tensorstore.Future.remove_done_callback.html","python/api/tensorstore.Future.result.html","python/api/tensorstore.IndexDomain.html","python/api/tensorstore.IndexDomain.__eq__.html","python/api/tensorstore.IndexDomain.__getitem__-domain.html","python/api/tensorstore.IndexDomain.__getitem__-expr.html","python/api/tensorstore.IndexDomain.__getitem__-identifier.html","python/api/tensorstore.IndexDomain.__getitem__-selection.html","python/api/tensorstore.IndexDomain.__init__-components.html","python/api/tensorstore.IndexDomain.__init__-dimensions.html","python/api/tensorstore.IndexDomain.__init__-json.html","python/api/tensorstore.IndexDomain.exclusive_max.html","python/api/tensorstore.IndexDomain.implicit_lower_bounds.html","python/api/tensorstore.IndexDomain.implicit_upper_bounds.html","python/api/tensorstore.IndexDomain.inclusive_max.html","python/api/tensorstore.IndexDomain.inclusive_min.html","python/api/tensorstore.IndexDomain.labels.html","python/api/tensorstore.IndexDomain.ndim.html","python/api/tensorstore.IndexDomain.origin.html","python/api/tensorstore.IndexDomain.rank.html","python/api/tensorstore.IndexDomain.shape.html","python/api/tensorstore.IndexDomain.size.html","python/api/tensorstore.IndexDomain.to_json.html","python/api/tensorstore.IndexTransform.html","python/api/tensorstore.IndexTransform.T.html","python/api/tensorstore.IndexTransform.__call__.html","python/api/tensorstore.IndexTransform.__eq__.html","python/api/tensorstore.IndexTransform.__getitem__-domain.html","python/api/tensorstore.IndexTransform.__getitem__-expr.html","python/api/tensorstore.IndexTransform.__getitem__-indices.html","python/api/tensorstore.IndexTransform.__getitem__-transform.html","python/api/tensorstore.IndexTransform.__init__-components.html","python/api/tensorstore.IndexTransform.__init__-domain.html","python/api/tensorstore.IndexTransform.__init__-json.html","python/api/tensorstore.IndexTransform.domain.html","python/api/tensorstore.IndexTransform.implicit_lower_bounds.html","python/api/tensorstore.IndexTransform.implicit_upper_bounds.html","python/api/tensorstore.IndexTransform.input_exclusive_max.html","python/api/tensorstore.IndexTransform.input_inclusive_max.html","python/api/tensorstore.IndexTransform.input_inclusive_min.html","python/api/tensorstore.IndexTransform.input_labels.html","python/api/tensorstore.IndexTransform.input_origin.html","python/api/tensorstore.IndexTransform.input_rank.html","python/api/tensorstore.IndexTransform.input_shape.html","python/api/tensorstore.IndexTransform.ndim.html","python/api/tensorstore.IndexTransform.oindex.html","python/api/tensorstore.IndexTransform.origin.html","python/api/tensorstore.IndexTransform.output.html","python/api/tensorstore.IndexTransform.output_rank.html","python/api/tensorstore.IndexTransform.shape.html","python/api/tensorstore.IndexTransform.size.html","python/api/tensorstore.IndexTransform.to_json.html","python/api/tensorstore.IndexTransform.vindex.html","python/api/tensorstore.Indexable.html","python/api/tensorstore.OutputIndexMap.html","python/api/tensorstore.OutputIndexMap.__eq__.html","python/api/tensorstore.OutputIndexMap.__init__-constant.html","python/api/tensorstore.OutputIndexMap.__init__-index_array.html","python/api/tensorstore.OutputIndexMap.__init__-input_dimension.html","python/api/tensorstore.OutputIndexMap.index_array.html","python/api/tensorstore.OutputIndexMap.index_range.html","python/api/tensorstore.OutputIndexMap.input_dimension.html","python/api/tensorstore.OutputIndexMap.method.html","python/api/tensorstore.OutputIndexMap.offset.html","python/api/tensorstore.OutputIndexMap.stride.html","python/api/tensorstore.OutputIndexMaps.html","python/api/tensorstore.OutputIndexMaps.__eq__.html","python/api/tensorstore.OutputIndexMaps.__getitem__.html","python/api/tensorstore.OutputIndexMaps.rank.html","python/api/tensorstore.OutputIndexMethod.html","python/api/tensorstore.OutputIndexMethod.__eq__.html","python/api/tensorstore.OutputIndexMethod.__init__.html","python/api/tensorstore.OutputIndexMethod.array.html","python/api/tensorstore.OutputIndexMethod.constant.html","python/api/tensorstore.OutputIndexMethod.name.html","python/api/tensorstore.OutputIndexMethod.single_input_dimension.html","python/api/tensorstore.Promise.html","python/api/tensorstore.Promise.new.html","python/api/tensorstore.Promise.set_exception.html","python/api/tensorstore.Promise.set_result.html","python/api/tensorstore.Schema.html","python/api/tensorstore.Schema.T.html","python/api/tensorstore.Schema.__getitem__-domain.html","python/api/tensorstore.Schema.__getitem__-expr.html","python/api/tensorstore.Schema.__getitem__-indices.html","python/api/tensorstore.Schema.__getitem__-transform.html","python/api/tensorstore.Schema.__init__-components.html","python/api/tensorstore.Schema.__init__-json.html","python/api/tensorstore.Schema.chunk_layout.html","python/api/tensorstore.Schema.codec.html","python/api/tensorstore.Schema.domain.html","python/api/tensorstore.Schema.fill_value.html","python/api/tensorstore.Schema.ndim.html","python/api/tensorstore.Schema.oindex.html","python/api/tensorstore.Schema.origin.html","python/api/tensorstore.Schema.rank.html","python/api/tensorstore.Schema.shape.html","python/api/tensorstore.Schema.size.html","python/api/tensorstore.Schema.to_json.html","python/api/tensorstore.Schema.update.html","python/api/tensorstore.Schema.vindex.html","python/api/tensorstore.Spec.html","python/api/tensorstore.Spec.T.html","python/api/tensorstore.Spec.__eq__.html","python/api/tensorstore.Spec.__getitem__-domain.html","python/api/tensorstore.Spec.__getitem__-expr.html","python/api/tensorstore.Spec.__getitem__-indices.html","python/api/tensorstore.Spec.__getitem__-transform.html","python/api/tensorstore.Spec.__init__.html","python/api/tensorstore.Spec.chunk_layout.html","python/api/tensorstore.Spec.codec.html","python/api/tensorstore.Spec.domain.html","python/api/tensorstore.Spec.dtype.html","python/api/tensorstore.Spec.fill_value.html","python/api/tensorstore.Spec.ndim.html","python/api/tensorstore.Spec.oindex.html","python/api/tensorstore.Spec.origin.html","python/api/tensorstore.Spec.rank.html","python/api/tensorstore.Spec.schema.html","python/api/tensorstore.Spec.shape.html","python/api/tensorstore.Spec.size.html","python/api/tensorstore.Spec.to_json.html","python/api/tensorstore.Spec.transform.html","python/api/tensorstore.Spec.update.html","python/api/tensorstore.Spec.vindex.html","python/api/tensorstore.TensorStore.html","python/api/tensorstore.TensorStore.T.html","python/api/tensorstore.TensorStore.__array__.html","python/api/tensorstore.TensorStore.__getitem__-domain.html","python/api/tensorstore.TensorStore.__getitem__-expr.html","python/api/tensorstore.TensorStore.__getitem__-indices.html","python/api/tensorstore.TensorStore.__getitem__-transform.html","python/api/tensorstore.TensorStore.__setitem__-domain.html","python/api/tensorstore.TensorStore.__setitem__-expr.html","python/api/tensorstore.TensorStore.__setitem__-indices.html","python/api/tensorstore.TensorStore.__setitem__-transform.html","python/api/tensorstore.TensorStore.astype.html","python/api/tensorstore.TensorStore.chunk_layout.html","python/api/tensorstore.TensorStore.codec.html","python/api/tensorstore.TensorStore.domain.html","python/api/tensorstore.TensorStore.dtype.html","python/api/tensorstore.TensorStore.fill_value.html","python/api/tensorstore.TensorStore.mode.html","python/api/tensorstore.TensorStore.ndim.html","python/api/tensorstore.TensorStore.oindex.html","python/api/tensorstore.TensorStore.oindex.__setitem__.html","python/api/tensorstore.TensorStore.origin.html","python/api/tensorstore.TensorStore.rank.html","python/api/tensorstore.TensorStore.read.html","python/api/tensorstore.TensorStore.readable.html","python/api/tensorstore.TensorStore.resolve.html","python/api/tensorstore.TensorStore.schema.html","python/api/tensorstore.TensorStore.shape.html","python/api/tensorstore.TensorStore.size.html","python/api/tensorstore.TensorStore.spec.html","python/api/tensorstore.TensorStore.transaction.html","python/api/tensorstore.TensorStore.vindex.html","python/api/tensorstore.TensorStore.vindex.__setitem__.html","python/api/tensorstore.TensorStore.with_transaction.html","python/api/tensorstore.TensorStore.writable.html","python/api/tensorstore.TensorStore.write.html","python/api/tensorstore.Transaction.html","python/api/tensorstore.Transaction.__init__.html","python/api/tensorstore.Transaction.abort.html","python/api/tensorstore.Transaction.aborted.html","python/api/tensorstore.Transaction.atomic.html","python/api/tensorstore.Transaction.commit_async.html","python/api/tensorstore.Transaction.commit_started.html","python/api/tensorstore.Transaction.commit_sync.html","python/api/tensorstore.Transaction.future.html","python/api/tensorstore.Transaction.open.html","python/api/tensorstore.WriteFutures.html","python/api/tensorstore.WriteFutures.add_done_callback.html","python/api/tensorstore.WriteFutures.cancel.html","python/api/tensorstore.WriteFutures.cancelled.html","python/api/tensorstore.WriteFutures.commit.html","python/api/tensorstore.WriteFutures.copy.html","python/api/tensorstore.WriteFutures.done.html","python/api/tensorstore.WriteFutures.exception.html","python/api/tensorstore.WriteFutures.remove_done_callback.html","python/api/tensorstore.WriteFutures.result.html","python/api/tensorstore.array.html","python/api/tensorstore.bfloat16.html","python/api/tensorstore.bool.html","python/api/tensorstore.cast.html","python/api/tensorstore.complex128.html","python/api/tensorstore.complex64.html","python/api/tensorstore.d.html","python/api/tensorstore.d.__class_getitem__.html","python/api/tensorstore.d.__eq__.html","python/api/tensorstore.downsample-spec.html","python/api/tensorstore.downsample-store.html","python/api/tensorstore.dtype.html","python/api/tensorstore.dtype.__call__.html","python/api/tensorstore.dtype.__eq__.html","python/api/tensorstore.dtype.__init__-dtype.html","python/api/tensorstore.dtype.__init__-name.html","python/api/tensorstore.dtype.name.html","python/api/tensorstore.dtype.numpy_dtype.html","python/api/tensorstore.dtype.to_json.html","python/api/tensorstore.dtype.type.html","python/api/tensorstore.float16.html","python/api/tensorstore.float32.html","python/api/tensorstore.float64.html","python/api/tensorstore.inf.html","python/api/tensorstore.int16.html","python/api/tensorstore.int32.html","python/api/tensorstore.int64.html","python/api/tensorstore.int8.html","python/api/tensorstore.json.html","python/api/tensorstore.newaxis.html","python/api/tensorstore.open.html","python/api/tensorstore.string.html","python/api/tensorstore.uint16.html","python/api/tensorstore.uint32.html","python/api/tensorstore.uint64.html","python/api/tensorstore.uint8.html","python/api/tensorstore.ustring.html","python/indexing.html","python/tutorial.html","schema.html","spec.html"],envversion:{"sphinx.domains.c":2,"sphinx.domains.changeset":1,"sphinx.domains.citation":1,"sphinx.domains.cpp":3,"sphinx.domains.index":1,"sphinx.domains.javascript":2,"sphinx.domains.math":2,"sphinx.domains.python":2,"sphinx.domains.rst":2,"sphinx.domains.std":2,"sphinx.ext.intersphinx":1,sphinx:56},objects:{"":{"ChunkLayout/Grid":[317,0,1,"json-ChunkLayout/Grid","Constraints on the write/read/codec chunk grids."],"driver/array":[1,0,1,"json-driver/array",""],"driver/cast":[2,0,1,"json-driver/cast",""],"driver/downsample":[3,0,1,"json-driver/downsample",""],"driver/json":[5,0,1,"json-driver/json",""],"driver/n5":[6,0,1,"json-driver/n5",""],"driver/n5/Codec":[6,0,1,"json-driver/n5/Codec",""],"driver/n5/Compression":[6,0,1,"json-driver/n5/Compression",""],"driver/n5/Compression/blosc":[6,0,1,"json-driver/n5/Compression/blosc",""],"driver/n5/Compression/bzip2":[6,0,1,"json-driver/n5/Compression/bzip2",""],"driver/n5/Compression/gzip":[6,0,1,"json-driver/n5/Compression/gzip",""],"driver/n5/Compression/raw":[6,0,1,"json-driver/n5/Compression/raw",""],"driver/n5/Compression/xz":[6,0,1,"json-driver/n5/Compression/xz",""],"driver/neuroglancer_precomputed":[7,0,1,"json-driver/neuroglancer_precomputed",""],"driver/neuroglancer_precomputed/Codec":[7,0,1,"json-driver/neuroglancer_precomputed/Codec","Neuroglancer Precomputed Codec"],"driver/neuroglancer_precomputed/ShardingSpec":[7,0,1,"json-driver/neuroglancer_precomputed/ShardingSpec","Sharding"],"driver/zarr":[8,0,1,"json-driver/zarr",""],"driver/zarr/Codec":[8,0,1,"json-driver/zarr/Codec",""],"driver/zarr/Compressor":[8,0,1,"json-driver/zarr/Compressor","Compressor"],"driver/zarr/Compressor/blosc":[8,0,1,"json-driver/zarr/Compressor/blosc",""],"driver/zarr/Compressor/bz2":[8,0,1,"json-driver/zarr/Compressor/bz2",""],"driver/zarr/Compressor/zlib":[8,0,1,"json-driver/zarr/Compressor/zlib",""],"kvstore/file":[13,0,1,"json-kvstore/file",""],"kvstore/gcs":[14,0,1,"json-kvstore/gcs",""],"kvstore/memory":[16,0,1,"json-kvstore/memory",""],BAZELISK_HOME:[12,9,1,"-",""],CacheRevalidationBound:[4,0,1,"json-CacheRevalidationBound",""],ChunkLayout:[317,0,1,"json-ChunkLayout",""],Codec:[317,0,1,"json-Codec",""],Context:[0,0,1,"json-Context",""],ContextResource:[0,0,1,"json-ContextResource",""],DownsampleMethod:[3,0,1,"json-DownsampleMethod","Downsample method"],GOOGLE_APPLICATION_CREDENTIALS:[9,9,1,"-",""],IndexDomain:[11,0,1,"json-IndexDomain",""],IndexInterval:[11,0,1,"json-IndexInterval","Specifies a closed interval of integer index values."],IndexTransform:[11,0,1,"json-IndexTransform",""],KeyValueStore:[15,0,1,"json-KeyValueStore",""],KeyValueStoreBackedChunkDriver:[4,0,1,"json-KeyValueStoreBackedChunkDriver",""],OutputIndexMap:[11,0,1,"json-OutputIndexMap","Specifies a transform from an input space to a single output index."],SSLKEYLOGFILE:[9,9,1,"-",""],Schema:[317,0,1,"json-Schema",""],TENSORSTORE_BAZELISK:[12,9,1,"-",""],TENSORSTORE_BAZEL_BUILD_OPTIONS:[12,9,1,"-",""],TENSORSTORE_BAZEL_COMPILATION_MODE:[12,9,1,"-",""],TENSORSTORE_BAZEL_STARTUP_OPTIONS:[12,9,1,"-",""],TENSORSTORE_CA_BUNDLE:[9,9,1,"-",""],TENSORSTORE_CA_PATH:[9,9,1,"-",""],TENSORSTORE_CURL_VERBOSE:[9,9,1,"-",""],TENSORSTORE_GCS_HTTP_URL:[9,9,1,"-",""],TENSORSTORE_PREBUILT_DIR:[12,9,1,"-",""],TENSORSTORE_SYSTEM_LIBS:[12,9,1,"-",""],TensorStore:[318,0,1,"json-TensorStore","Specifies a TensorStore to open/create."],all_proxy:[9,9,1,"-",""],dtype:[318,0,1,"json-dtype","Specifies a TensorStore data type."],http_proxy:[9,9,1,"-",""],https_proxy:[9,9,1,"-",""],no_proxy:[9,9,1,"-",""]},"ChunkLayout/Grid":{aspect_ratio:[317,1,2,"json-ChunkLayout/Grid.aspect_ratio","Aspect ratio of the chunk shape."],aspect_ratio_soft_constraint:[317,1,2,"json-ChunkLayout/Grid.aspect_ratio_soft_constraint","Soft constraint on aspect ratio, lower precedence than aspect_ratio."],elements:[317,1,2,"json-ChunkLayout/Grid.elements","Preferred number of elements per chunk."],elements_soft_constraint:[317,1,2,"json-ChunkLayout/Grid.elements_soft_constraint","Preferred number of elements per chunk, lower precedence than\nelements."],shape:[317,1,2,"json-ChunkLayout/Grid.shape","Hard constraints on the chunk size for each dimension."],shape_soft_constraint:[317,1,2,"json-ChunkLayout/Grid.shape_soft_constraint","Preferred chunk sizes for each dimension."]},"Context.cache_pool":{queued_for_writeback_bytes_limit:[0,1,2,"json-Context.cache_pool.queued_for_writeback_bytes_limit",""],total_bytes_limit:[0,1,2,"json-Context.cache_pool.total_bytes_limit",""]},"Context.data_copy_concurrency":{limit:[0,1,2,"json-Context.data_copy_concurrency.limit",""]},"Context.file_io_concurrency":{limit:[0,1,2,"json-Context.file_io_concurrency.limit",""]},"Context.gcs_request_concurrency":{limit:[14,1,2,"json-Context.gcs_request_concurrency.limit",""]},"Context.gcs_request_retries":{max_retries:[14,1,2,"json-Context.gcs_request_retries.max_retries",""]},"Context.gcs_user_project":{project_id:[14,1,2,"json-Context.gcs_user_project.project_id","Google Cloud project id, e.g. \"my-project\".  The Google Cloud\naccount that is used must have appropriate permissions to bill to the\nspecified project."]},"driver/array":{array:[1,1,2,"json-driver/array.array","Nested array of rank equal to rank specifying the initial value."],context:[1,1,2,"json-driver/array.context","Specifies context resources that augment/override the parent context."],driver:[1,1,2,"json-driver/array.driver",""],dtype:[1,1,2,"json-driver/array.dtype","Specifies the data type."],rank:[1,1,2,"json-driver/array.rank","Specifies the rank of the TensorStore."],transform:[1,1,2,"json-driver/array.transform","Specifies a transform."]},"driver/cast":{base:[2,1,2,"json-driver/cast.base","Base TensorStore to convert."],context:[2,1,2,"json-driver/cast.context","Specifies context resources that augment/override the parent context."],driver:[2,1,2,"json-driver/cast.driver",""],dtype:[2,1,2,"json-driver/cast.dtype","Specifies the data type under which to view the base TensorStore."],rank:[2,1,2,"json-driver/cast.rank","Specifies the rank of the TensorStore."],transform:[2,1,2,"json-driver/cast.transform","Specifies a transform."]},"driver/downsample":{base:[3,1,2,"json-driver/downsample.base","Base TensorStore to downsample."],context:[3,1,2,"json-driver/downsample.context","Specifies context resources that augment/override the parent context."],downsample_factors:[3,1,2,"json-driver/downsample.downsample_factors",""],downsample_method:[3,1,2,"json-driver/downsample.downsample_method",""],driver:[3,1,2,"json-driver/downsample.driver",""],dtype:[3,1,2,"json-driver/downsample.dtype","Specifies the data type."],rank:[3,1,2,"json-driver/downsample.rank","Specifies the rank of the TensorStore."],transform:[3,1,2,"json-driver/downsample.transform","Specifies a transform."]},"driver/json":{cache_pool:[5,1,2,"json-driver/json.cache_pool",""],context:[5,1,2,"json-driver/json.context","Specifies context resources that augment/override the parent context."],data_copy_concurrency:[5,1,2,"json-driver/json.data_copy_concurrency",""],driver:[5,1,2,"json-driver/json.driver",""],dtype:[5,1,2,"json-driver/json.dtype",""],json_pointer:[5,1,2,"json-driver/json.json_pointer",""],kvstore:[5,1,2,"json-driver/json.kvstore",""],path:[5,1,2,"json-driver/json.path",""],rank:[5,1,2,"json-driver/json.rank",""],recheck_cached_data:[5,1,2,"json-driver/json.recheck_cached_data",""],transform:[5,1,2,"json-driver/json.transform","Specifies a transform."]},"driver/n5":{cache_pool:[6,1,2,"json-driver/n5.cache_pool",""],context:[6,1,2,"json-driver/n5.context","Specifies context resources that augment/override the parent context."],create:[6,1,2,"json-driver/n5.create",""],data_copy_concurrency:[6,1,2,"json-driver/n5.data_copy_concurrency",""],delete_existing:[6,1,2,"json-driver/n5.delete_existing",""],driver:[6,1,2,"json-driver/n5.driver",""],dtype:[6,1,2,"json-driver/n5.dtype","Specifies the data type."],kvstore:[6,1,2,"json-driver/n5.kvstore",""],metadata:[6,1,2,"json-driver/n5.metadata","N5 array metadata."],open:[6,1,2,"json-driver/n5.open",""],path:[6,1,2,"json-driver/n5.path",""],rank:[6,1,2,"json-driver/n5.rank","Specifies the rank of the TensorStore."],recheck_cached_data:[6,1,2,"json-driver/n5.recheck_cached_data",""],recheck_cached_metadata:[6,1,2,"json-driver/n5.recheck_cached_metadata",""],transform:[6,1,2,"json-driver/n5.transform","Specifies a transform."]},"driver/n5.metadata":{axes:[6,1,2,"json-driver/n5.metadata.axes","Specifies a label for each dimension of the dataset."],blockSize:[6,1,2,"json-driver/n5.metadata.blockSize","Chunk dimensions."],compression:[6,1,2,"json-driver/n5.metadata.compression","Specifies the chunk compression method."],dataType:[6,1,2,"json-driver/n5.metadata.dataType","Specifies the data type."],dimensions:[6,1,2,"json-driver/n5.metadata.dimensions","Dimensions of the dataset."]},"driver/n5/Codec":{compression:[6,1,2,"json-driver/n5/Codec.compression","Specifies the chunk compression method."],driver:[6,1,2,"json-driver/n5/Codec.driver",""]},"driver/n5/Compression":{type:[6,1,2,"json-driver/n5/Compression.type",""]},"driver/n5/Compression/blosc":{clevel:[6,1,2,"json-driver/n5/Compression/blosc.clevel","Specifies the Blosc compression level to use."],cname:[6,1,2,"json-driver/n5/Compression/blosc.cname",""],shuffle:[6,1,2,"json-driver/n5/Compression/blosc.shuffle",""],type:[6,1,2,"json-driver/n5/Compression/blosc.type",""]},"driver/n5/Compression/bzip2":{blockSize:[6,1,2,"json-driver/n5/Compression/bzip2.blockSize","Specifies the bzip2 block size to use (in units of 100KB), which also determine the compression level."],type:[6,1,2,"json-driver/n5/Compression/bzip2.type",""]},"driver/n5/Compression/gzip":{level:[6,1,2,"json-driver/n5/Compression/gzip.level","Specifies the zlib compression level to use."],type:[6,1,2,"json-driver/n5/Compression/gzip.type",""],useZlib:[6,1,2,"json-driver/n5/Compression/gzip.useZlib",""]},"driver/n5/Compression/raw":{type:[6,1,2,"json-driver/n5/Compression/raw.type",""]},"driver/n5/Compression/xz":{preset:[6,1,2,"json-driver/n5/Compression/xz.preset",""],type:[6,1,2,"json-driver/n5/Compression/xz.type",""]},"driver/neuroglancer_precomputed":{cache_pool:[7,1,2,"json-driver/neuroglancer_precomputed.cache_pool",""],context:[7,1,2,"json-driver/neuroglancer_precomputed.context","Specifies context resources that augment/override the parent context."],create:[7,1,2,"json-driver/neuroglancer_precomputed.create",""],data_copy_concurrency:[7,1,2,"json-driver/neuroglancer_precomputed.data_copy_concurrency",""],delete_existing:[7,1,2,"json-driver/neuroglancer_precomputed.delete_existing",""],driver:[7,1,2,"json-driver/neuroglancer_precomputed.driver",""],dtype:[7,1,2,"json-driver/neuroglancer_precomputed.dtype","Specifies the data type."],kvstore:[7,1,2,"json-driver/neuroglancer_precomputed.kvstore",""],multiscale_metadata:[7,1,2,"json-driver/neuroglancer_precomputed.multiscale_metadata","Scale-independent metadata."],open:[7,1,2,"json-driver/neuroglancer_precomputed.open",""],path:[7,1,2,"json-driver/neuroglancer_precomputed.path",""],rank:[7,1,2,"json-driver/neuroglancer_precomputed.rank","Specifies the rank of the TensorStore."],recheck_cached_data:[7,1,2,"json-driver/neuroglancer_precomputed.recheck_cached_data",""],recheck_cached_metadata:[7,1,2,"json-driver/neuroglancer_precomputed.recheck_cached_metadata",""],scale_index:[7,1,2,"json-driver/neuroglancer_precomputed.scale_index","Zero-based index of the scale to open or create."],scale_metadata:[7,1,2,"json-driver/neuroglancer_precomputed.scale_metadata","Per-scale metadata."],transform:[7,1,2,"json-driver/neuroglancer_precomputed.transform","Specifies a transform."]},"driver/neuroglancer_precomputed.multiscale_metadata":{data_type:[7,1,2,"json-driver/neuroglancer_precomputed.multiscale_metadata.data_type","Specifies the data type."],num_channels:[7,1,2,"json-driver/neuroglancer_precomputed.multiscale_metadata.num_channels","Number of channels."],type:[7,1,2,"json-driver/neuroglancer_precomputed.multiscale_metadata.type","Specifying the type of volume."]},"driver/neuroglancer_precomputed.scale_metadata":{chunk_size:[7,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.chunk_size","Chunk dimensions (XYZ order)."],compressed_segmentation_block_size:[7,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.compressed_segmentation_block_size","Block size for compressed segmentation encoding."],encoding:[7,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.encoding","Specifies the chunk encoding."],jpeg_quality:[7,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.jpeg_quality","JPEG encoding quality."],key:[7,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.key","Specifies the scale key (relative to path)."],resolution:[7,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.resolution","Voxel size in nanometers (XYZ order)."],sharding:[7,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.sharding",""],size:[7,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.size","Voxel dimensions of the volume (XYZ order)."],voxel_offset:[7,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.voxel_offset","Voxel origin of the volume (XYZ order)."]},"driver/neuroglancer_precomputed/Codec":{driver:[7,1,2,"json-driver/neuroglancer_precomputed/Codec.driver",""],encoding:[7,1,2,"json-driver/neuroglancer_precomputed/Codec.encoding","Specifies the chunk encoding."],jpeg_quality:[7,1,2,"json-driver/neuroglancer_precomputed/Codec.jpeg_quality","JPEG encoding quality."],shard_data_encoding:[7,1,2,"json-driver/neuroglancer_precomputed/Codec.shard_data_encoding","Additional data compression when using the sharded format."]},"driver/neuroglancer_precomputed/ShardingSpec":{"@type":[7,1,2,"json-driver/neuroglancer_precomputed/ShardingSpec.@type",""],data_encoding:[7,1,2,"json-driver/neuroglancer_precomputed/ShardingSpec.data_encoding","Specifies the encoding of the data chunks."],hash:[7,1,2,"json-driver/neuroglancer_precomputed/ShardingSpec.hash","Specifies the hash function used to map chunk IDs to shards."],minishard_bits:[7,1,2,"json-driver/neuroglancer_precomputed/ShardingSpec.minishard_bits","Number of bits of the hashed chunk ID that determine the minishard number."],minishard_index_encoding:[7,1,2,"json-driver/neuroglancer_precomputed/ShardingSpec.minishard_index_encoding","Specifies the encoding of the minishard index."],preshift_bits:[7,1,2,"json-driver/neuroglancer_precomputed/ShardingSpec.preshift_bits","Number of low-order bits of the chunk ID that do not contribute to the hashed chunk ID."],shard_bits:[7,1,2,"json-driver/neuroglancer_precomputed/ShardingSpec.shard_bits","Number of bits of the hashed chunk ID that determine the shard number."]},"driver/zarr":{cache_pool:[8,1,2,"json-driver/zarr.cache_pool",""],context:[8,1,2,"json-driver/zarr.context","Specifies context resources that augment/override the parent context."],create:[8,1,2,"json-driver/zarr.create",""],data_copy_concurrency:[8,1,2,"json-driver/zarr.data_copy_concurrency",""],delete_existing:[8,1,2,"json-driver/zarr.delete_existing",""],driver:[8,1,2,"json-driver/zarr.driver",""],dtype:[8,1,2,"json-driver/zarr.dtype","Specifies the data type."],field:[8,1,2,"json-driver/zarr.field","Name of field to open."],key_encoding:[8,1,2,"json-driver/zarr.key_encoding","Specifies the encoding of chunk indices into key-value store keys."],kvstore:[8,1,2,"json-driver/zarr.kvstore",""],metadata:[8,1,2,"json-driver/zarr.metadata","Zarr array metadata."],open:[8,1,2,"json-driver/zarr.open",""],path:[8,1,2,"json-driver/zarr.path",""],rank:[8,1,2,"json-driver/zarr.rank","Specifies the rank of the TensorStore."],recheck_cached_data:[8,1,2,"json-driver/zarr.recheck_cached_data",""],recheck_cached_metadata:[8,1,2,"json-driver/zarr.recheck_cached_metadata",""],transform:[8,1,2,"json-driver/zarr.transform","Specifies a transform."]},"driver/zarr.metadata":{chunks:[8,1,2,"json-driver/zarr.metadata.chunks","Chunk dimensions."],compressor:[8,1,2,"json-driver/zarr.metadata.compressor","Specifies the chunk compression method."],dimension_separator:[8,1,2,"json-driver/zarr.metadata.dimension_separator","Specifies the encoding of chunk indices into key-value store keys."],dtype:[8,1,2,"json-driver/zarr.metadata.dtype","Specifies the scalar or structured data type."],fill_value:[8,1,2,"json-driver/zarr.metadata.fill_value","Specifies the fill value."],filters:[8,1,2,"json-driver/zarr.metadata.filters","Specifies the filters to apply to chunks."],order:[8,1,2,"json-driver/zarr.metadata.order","Specifies the data layout for encoded chunks."],shape:[8,1,2,"json-driver/zarr.metadata.shape","Chunked dimensions of the array."],zarr_format:[8,1,2,"json-driver/zarr.metadata.zarr_format",""]},"driver/zarr/Codec":{compressor:[8,1,2,"json-driver/zarr/Codec.compressor","Specifies the chunk compression method."],driver:[8,1,2,"json-driver/zarr/Codec.driver",""],filters:[8,1,2,"json-driver/zarr/Codec.filters","Specifies the filters to apply to chunks."]},"driver/zarr/Compressor":{id:[8,1,2,"json-driver/zarr/Compressor.id",""]},"driver/zarr/Compressor/blosc":{blocksize:[8,1,2,"json-driver/zarr/Compressor/blosc.blocksize","Specifies the Blosc blocksize."],clevel:[8,1,2,"json-driver/zarr/Compressor/blosc.clevel","Specifies the Blosc compression level to use."],cname:[8,1,2,"json-driver/zarr/Compressor/blosc.cname",""],id:[8,1,2,"json-driver/zarr/Compressor/blosc.id",""],shuffle:[8,1,2,"json-driver/zarr/Compressor/blosc.shuffle",""]},"driver/zarr/Compressor/bz2":{id:[8,1,2,"json-driver/zarr/Compressor/bz2.id",""],level:[8,1,2,"json-driver/zarr/Compressor/bz2.level","Specifies the bzip2 buffer size/compression level to use."]},"driver/zarr/Compressor/zlib":{id:[8,1,2,"json-driver/zarr/Compressor/zlib.id",""],level:[8,1,2,"json-driver/zarr/Compressor/zlib.level","Specifies the zlib compression level to use."]},"kvstore/file":{context:[13,1,2,"json-kvstore/file.context",""],driver:[13,1,2,"json-kvstore/file.driver",""],file_io_concurrency:[13,1,2,"json-kvstore/file.file_io_concurrency",""],path:[13,1,2,"json-kvstore/file.path","Path to root directory on local filesystem."]},"kvstore/gcs":{bucket:[14,1,2,"json-kvstore/gcs.bucket","Google Cloud Storage bucket to use."],context:[14,1,2,"json-kvstore/gcs.context",""],driver:[14,1,2,"json-kvstore/gcs.driver",""],gcs_request_concurrency:[14,1,2,"json-kvstore/gcs.gcs_request_concurrency",""],gcs_request_retries:[14,1,2,"json-kvstore/gcs.gcs_request_retries",""],gcs_user_project:[14,1,2,"json-kvstore/gcs.gcs_user_project",""]},"kvstore/memory":{atomic:[16,1,2,"json-kvstore/memory.atomic",""],context:[16,1,2,"json-kvstore/memory.context",""],driver:[16,1,2,"json-kvstore/memory.driver",""],memory_key_value_store:[16,1,2,"json-kvstore/memory.memory_key_value_store",""]},"tensorstore.ChunkLayout":{"__init__(components)":[34,3,1,"","Constructs from component parts."],"__init__(json)":[35,3,1,"","Constructs from the JSON representation."],Grid:[19,2,1,"","Describes a regular grid layout for write/read/codec chunks."],__eq__:[33,3,1,"","Compares two chunk layouts for equality."],codec_chunk:[36,5,1,"","Chunk grid used by the codec."],grid_origin:[37,5,1,"","Hard constraints on the grid origin."],grid_origin_soft_constraint:[38,5,1,"","Soft constraints on the grid origin."],inner_order:[39,5,1,"","Permutation specifying the element storage order within the innermost chunks."],inner_order_soft_constraint:[40,5,1,"","Permutation specifying soft constraint on the element storage order."],ndim:[41,5,1,"","Alias for rank."],rank:[42,5,1,"","Number of dimensions in the index space."],read_chunk:[43,5,1,"","Chunk grid for efficient reads."],read_chunk_template:[44,5,1,"","Chunk offset and shape for efficient reads."],to_json:[45,3,1,"","Converts to the JSON representation."],update:[46,3,1,"","Adds additional constraints."],write_chunk:[47,5,1,"","Chunk grid for efficient writes."],write_chunk_template:[48,5,1,"","Chunk offset and shape for efficient writes."]},"tensorstore.ChunkLayout.Grid":{"__init__(components)":[21,3,1,"","Constructs a chunk grid."],"__init__(json)":[22,3,1,"","Constructs from the JSON representation."],__eq__:[20,3,1,"","Compares two chunk grids for equality."],aspect_ratio:[23,5,1,"","Chunk shape aspect ratio."],aspect_ratio_soft_constraint:[24,5,1,"","Soft constraints on chunk shape aspect ratio."],elements:[25,5,1,"","Target number of elements per chunk."],elements_soft_constraint:[26,5,1,"","Soft constraint on target number of elements per chunk."],ndim:[27,5,1,"","Alias for rank."],rank:[28,5,1,"","Number of dimensions, or None if unspecified."],shape:[29,5,1,"","Hard constraints on chunk shape."],shape_soft_constraint:[30,5,1,"","Soft constraints on chunk shape."],to_json:[31,3,1,"","Converts to the JSON representation."],update:[32,3,1,"","Adds additional constraints."]},"tensorstore.ChunkLayout.Grid.__init__(components)":{aspect_ratio:[21,4,2,"p-aspect_ratio","Aspect ratio for each dimension."],aspect_ratio_soft_constraint:[21,4,2,"p-aspect_ratio_soft_constraint","Soft constraints on the aspect ratio for each dimension."],elements:[21,4,2,"p-elements","Target number of elements per chunk."],elements_soft_constraint:[21,4,2,"p-elements_soft_constraint","Soft constraint on the target number of elements per chunk."],grid:[21,4,2,"p-grid","Other grid constraints to merge in."],grid_soft_constraint:[21,4,2,"p-grid_soft_constraint","Other grid constraints to merge in as soft constraints."],rank:[21,4,2,"p-rank","Specifies the number of dimensions."],shape:[21,4,2,"p-shape","Hard constraints on the chunk size for each dimension."],shape_soft_constraint:[21,4,2,"p-shape_soft_constraint","Soft constraints on the chunk size for each dimension."]},"tensorstore.ChunkLayout.Grid.update":{aspect_ratio:[32,4,2,"p-aspect_ratio","Aspect ratio for each dimension."],aspect_ratio_soft_constraint:[32,4,2,"p-aspect_ratio_soft_constraint","Soft constraints on the aspect ratio for each dimension."],elements:[32,4,2,"p-elements","Target number of elements per chunk."],elements_soft_constraint:[32,4,2,"p-elements_soft_constraint","Soft constraint on the target number of elements per chunk."],grid:[32,4,2,"p-grid","Other grid constraints to merge in."],grid_soft_constraint:[32,4,2,"p-grid_soft_constraint","Other grid constraints to merge in as soft constraints."],rank:[32,4,2,"p-rank","Specifies the number of dimensions."],shape:[32,4,2,"p-shape","Hard constraints on the chunk size for each dimension."],shape_soft_constraint:[32,4,2,"p-shape_soft_constraint","Soft constraints on the chunk size for each dimension."]},"tensorstore.ChunkLayout.__init__(components)":{chunk:[34,4,2,"p-chunk","Common constraints on write, read, and codec chunks."],chunk_aspect_ratio:[34,4,2,"p-chunk_aspect_ratio","Hard constraints on the write, read, and codec chunk aspect ratio."],chunk_aspect_ratio_soft_constraint:[34,4,2,"p-chunk_aspect_ratio_soft_constraint","Soft constraints on the write, read, and codec chunk aspect ratio."],chunk_elements:[34,4,2,"p-chunk_elements","Hard constraints on the target number of elements for write and read chunks.\nCorresponds to the JSON elements member of\nChunkLayout.chunk."],chunk_elements_soft_constraint:[34,4,2,"p-chunk_elements_soft_constraint","Soft constraints on the target number of elements for write and read chunks.\nCorresponds to the JSON\nelements_soft_constraint member of\nChunkLayout.chunk."],chunk_shape:[34,4,2,"p-chunk_shape","Hard constraints on both the write and read chunk shape."],chunk_shape_soft_constraint:[34,4,2,"p-chunk_shape_soft_constraint","Soft constraints on both the write and read chunk shape."],codec_chunk:[34,4,2,"p-codec_chunk","Constraints on codec chunks."],codec_chunk_aspect_ratio:[34,4,2,"p-codec_chunk_aspect_ratio","Soft constraints on the codec chunk aspect ratio."],codec_chunk_aspect_ratio_soft_constraint:[34,4,2,"p-codec_chunk_aspect_ratio_soft_constraint","Soft constraints on the codec chunk aspect ratio."],codec_chunk_elements:[34,4,2,"p-codec_chunk_elements","Hard constraints on the target number of elements for codec chunks."],codec_chunk_elements_soft_constraint:[34,4,2,"p-codec_chunk_elements_soft_constraint","Soft constraints on the target number of elements for codec chunks."],codec_chunk_shape:[34,4,2,"p-codec_chunk_shape","Soft constraints on the codec chunk shape."],codec_chunk_shape_soft_constraint:[34,4,2,"p-codec_chunk_shape_soft_constraint","Soft constraints on the codec chunk shape."],finalize:[34,4,2,"p-finalize","Validates and converts the layout into a precise chunk\nlayout."],grid_origin:[34,4,2,"p-grid_origin","Hard constraints on the origin of the chunk grid.\nCorresponds to the JSON ChunkLayout.grid_origin member."],grid_origin_soft_constraint:[34,4,2,"p-grid_origin_soft_constraint","Soft constraints on the origin of the chunk grid."],inner_order:[34,4,2,"p-inner_order","Permutation specifying the element storage order within the innermost chunks.\nCorresponds to the JSON ChunkLayout.inner_order member."],inner_order_soft_constraint:[34,4,2,"p-inner_order_soft_constraint","Specifies a preferred value for inner_order rather than a\nhard constraint."],rank:[34,4,2,"p-rank","Specifies the number of dimensions."],read_chunk:[34,4,2,"p-read_chunk","Constraints on read chunks."],read_chunk_aspect_ratio:[34,4,2,"p-read_chunk_aspect_ratio","Hard constraints on the read chunk aspect ratio."],read_chunk_aspect_ratio_soft_constraint:[34,4,2,"p-read_chunk_aspect_ratio_soft_constraint","Soft constraints on the read chunk aspect ratio."],read_chunk_elements:[34,4,2,"p-read_chunk_elements","Hard constraints on the target number of elements for read chunks."],read_chunk_elements_soft_constraint:[34,4,2,"p-read_chunk_elements_soft_constraint","Soft constraints on the target number of elements for read chunks."],read_chunk_shape:[34,4,2,"p-read_chunk_shape","Hard constraints on the read chunk shape."],read_chunk_shape_soft_constraint:[34,4,2,"p-read_chunk_shape_soft_constraint","Soft constraints on the read chunk shape."],write_chunk:[34,4,2,"p-write_chunk","Constraints on write chunks."],write_chunk_aspect_ratio:[34,4,2,"p-write_chunk_aspect_ratio","Hard constraints on the write chunk aspect ratio."],write_chunk_aspect_ratio_soft_constraint:[34,4,2,"p-write_chunk_aspect_ratio_soft_constraint","Soft constraints on the write chunk aspect ratio."],write_chunk_elements:[34,4,2,"p-write_chunk_elements","Hard constraints on the target number of elements for write chunks."],write_chunk_elements_soft_constraint:[34,4,2,"p-write_chunk_elements_soft_constraint","Soft constraints on the target number of elements for write chunks."],write_chunk_shape:[34,4,2,"p-write_chunk_shape","Hard constraints on the write chunk shape."],write_chunk_shape_soft_constraint:[34,4,2,"p-write_chunk_shape_soft_constraint","Soft constraints on the write chunk shape."]},"tensorstore.ChunkLayout.update":{chunk:[46,4,2,"p-chunk","Common constraints on write, read, and codec chunks."],chunk_aspect_ratio:[46,4,2,"p-chunk_aspect_ratio","Hard constraints on the write, read, and codec chunk aspect ratio."],chunk_aspect_ratio_soft_constraint:[46,4,2,"p-chunk_aspect_ratio_soft_constraint","Soft constraints on the write, read, and codec chunk aspect ratio."],chunk_elements:[46,4,2,"p-chunk_elements","Hard constraints on the target number of elements for write and read chunks.\nCorresponds to the JSON elements member of\nChunkLayout.chunk."],chunk_elements_soft_constraint:[46,4,2,"p-chunk_elements_soft_constraint","Soft constraints on the target number of elements for write and read chunks.\nCorresponds to the JSON\nelements_soft_constraint member of\nChunkLayout.chunk."],chunk_shape:[46,4,2,"p-chunk_shape","Hard constraints on both the write and read chunk shape."],chunk_shape_soft_constraint:[46,4,2,"p-chunk_shape_soft_constraint","Soft constraints on both the write and read chunk shape."],codec_chunk:[46,4,2,"p-codec_chunk","Constraints on codec chunks."],codec_chunk_aspect_ratio:[46,4,2,"p-codec_chunk_aspect_ratio","Soft constraints on the codec chunk aspect ratio."],codec_chunk_aspect_ratio_soft_constraint:[46,4,2,"p-codec_chunk_aspect_ratio_soft_constraint","Soft constraints on the codec chunk aspect ratio."],codec_chunk_elements:[46,4,2,"p-codec_chunk_elements","Hard constraints on the target number of elements for codec chunks."],codec_chunk_elements_soft_constraint:[46,4,2,"p-codec_chunk_elements_soft_constraint","Soft constraints on the target number of elements for codec chunks."],codec_chunk_shape:[46,4,2,"p-codec_chunk_shape","Soft constraints on the codec chunk shape."],codec_chunk_shape_soft_constraint:[46,4,2,"p-codec_chunk_shape_soft_constraint","Soft constraints on the codec chunk shape."],finalize:[46,4,2,"p-finalize","Validates and converts the layout into a precise chunk\nlayout."],grid_origin:[46,4,2,"p-grid_origin","Hard constraints on the origin of the chunk grid.\nCorresponds to the JSON ChunkLayout.grid_origin member."],grid_origin_soft_constraint:[46,4,2,"p-grid_origin_soft_constraint","Soft constraints on the origin of the chunk grid."],inner_order:[46,4,2,"p-inner_order","Permutation specifying the element storage order within the innermost chunks.\nCorresponds to the JSON ChunkLayout.inner_order member."],inner_order_soft_constraint:[46,4,2,"p-inner_order_soft_constraint","Specifies a preferred value for inner_order rather than a\nhard constraint."],rank:[46,4,2,"p-rank","Specifies the number of dimensions."],read_chunk:[46,4,2,"p-read_chunk","Constraints on read chunks."],read_chunk_aspect_ratio:[46,4,2,"p-read_chunk_aspect_ratio","Hard constraints on the read chunk aspect ratio."],read_chunk_aspect_ratio_soft_constraint:[46,4,2,"p-read_chunk_aspect_ratio_soft_constraint","Soft constraints on the read chunk aspect ratio."],read_chunk_elements:[46,4,2,"p-read_chunk_elements","Hard constraints on the target number of elements for read chunks."],read_chunk_elements_soft_constraint:[46,4,2,"p-read_chunk_elements_soft_constraint","Soft constraints on the target number of elements for read chunks."],read_chunk_shape:[46,4,2,"p-read_chunk_shape","Hard constraints on the read chunk shape."],read_chunk_shape_soft_constraint:[46,4,2,"p-read_chunk_shape_soft_constraint","Soft constraints on the read chunk shape."],write_chunk:[46,4,2,"p-write_chunk","Constraints on write chunks."],write_chunk_aspect_ratio:[46,4,2,"p-write_chunk_aspect_ratio","Hard constraints on the write chunk aspect ratio."],write_chunk_aspect_ratio_soft_constraint:[46,4,2,"p-write_chunk_aspect_ratio_soft_constraint","Soft constraints on the write chunk aspect ratio."],write_chunk_elements:[46,4,2,"p-write_chunk_elements","Hard constraints on the target number of elements for write chunks."],write_chunk_elements_soft_constraint:[46,4,2,"p-write_chunk_elements_soft_constraint","Soft constraints on the target number of elements for write chunks."],write_chunk_shape:[46,4,2,"p-write_chunk_shape","Hard constraints on the write chunk shape."],write_chunk_shape_soft_constraint:[46,4,2,"p-write_chunk_shape_soft_constraint","Soft constraints on the write chunk shape."]},"tensorstore.CodecSpec":{__init__:[50,3,1,"","Constructs from the JSON representation."],to_json:[51,3,1,"","Converts to the JSON representation."]},"tensorstore.Context":{"__init__(default)":[59,3,1,"","Constructs a default context."],"__init__(json)":[60,3,1,"","Constructs a context from its JSON representation."],"__init__(spec)":[61,3,1,"","Constructs a context from a parsed spec."],Resource:[53,2,1,"","Handle to a context resource."],Spec:[55,2,1,"","Parsed representation of a JSON Context specification."],__getitem__:[58,3,1,"","Creates or retrieves the context resource for the given key."],parent:[62,5,1,"","Parent context from which this context inherits."],spec:[63,5,1,"","Spec from which this context was constructed."]},"tensorstore.Context.Resource":{to_json:[54,3,1,"","Returns the JSON representation of the context resource."]},"tensorstore.Context.Spec":{__init__:[56,3,1,"","Creates a context specification from its JSON representation."],to_json:[57,3,1,"","Returns the JSON representation."]},"tensorstore.Context.Spec.to_json":{include_defaults:[57,4,2,"p-include_defaults","Indicates whether to include members even if they are equal to the default value."]},"tensorstore.Context.__getitem__":{key:[58,4,2,"p-key","Resource key, of the form '<resource-type>' or\n<resource-type>#<id>."]},"tensorstore.Context.__init__(json)":{json:[60,4,2,"p-json","JSON representation of the context."],parent:[60,4,2,"p-parent","Parent context from which to inherit."]},"tensorstore.Context.__init__(spec)":{parent:[61,4,2,"p-parent","Parent context from which to inherit."],spec:[61,4,2,"p-spec","Parsed context spec."]},"tensorstore.Dim":{"__init__(exclusive_max)":[66,3,1,"","Constructs a half-open interval [inclusive_min, exclusive_max)`."],"__init__(inclusive_max)":[67,3,1,"","Constructs a closed interval [inclusive_min, inclusive_max]."],"__init__(size)":[68,3,1,"","Constructs a sized interval [inclusive_min, inclusive_min+size)."],"__init__(unbounded)":[69,3,1,"","Constructs an unbounded interval (-inf, +inf)."],__eq__:[65,3,1,"",""],empty:[70,5,1,"","Returns True if size is zero."],exclusive_max:[71,5,1,"","Exclusive upper bound of the interval."],exclusive_min:[72,5,1,"","Exclusive lower bound of the interval."],finite:[73,5,1,"","Indicates if the interval is finite."],implicit_lower:[74,5,1,"","Indicates if the lower bound is \"implicit\"."],implicit_upper:[75,5,1,"","Indicates if the upper bound is \"implicit\"."],inclusive_max:[76,5,1,"","Inclusive upper bound of the interval."],inclusive_min:[77,5,1,"","Inclusive lower bound of the interval."],label:[78,5,1,"","Dimension label, or the empty string to indicate an unlabeled dimension."],size:[79,5,1,"","Size of the interval."]},"tensorstore.Dim.__init__(exclusive_max)":{exclusive_max:[66,4,2,"p-exclusive_max","Exclusive upper bound."],implicit_lower:[66,4,2,"p-implicit_lower","Indicates whether the lower bound is\nimplicit."],implicit_upper:[66,4,2,"p-implicit_upper","Indicates whether the upper bound is\nimplicit."],inclusive_min:[66,4,2,"p-inclusive_min","Inclusive lower bound."],label:[66,4,2,"p-label","Dimension label."]},"tensorstore.Dim.__init__(inclusive_max)":{implicit_lower:[67,4,2,"p-implicit_lower","Indicates whether the lower bound is\nimplicit."],implicit_upper:[67,4,2,"p-implicit_upper","Indicates whether the upper bound is\nimplicit."],inclusive_max:[67,4,2,"p-inclusive_max","Inclusive upper bound."],inclusive_min:[67,4,2,"p-inclusive_min","Inclusive lower bound."],label:[67,4,2,"p-label","Dimension label."]},"tensorstore.Dim.__init__(size)":{implicit_lower:[68,4,2,"p-implicit_lower","Indicates whether the lower bound is\nimplicit."],implicit_upper:[68,4,2,"p-implicit_upper","Indicates whether the upper bound is\nimplicit."],inclusive_min:[68,4,2,"p-inclusive_min","Inclusive lower bound."],label:[68,4,2,"p-label","Dimension label."],size:[68,4,2,"p-size","Size of the interval."]},"tensorstore.Dim.__init__(unbounded)":{implicit_lower:[69,4,2,"p-implicit_lower","Indicates whether the lower bound is\nimplicit."],implicit_upper:[69,4,2,"p-implicit_upper","Indicates whether the upper bound is\nimplicit."],label:[69,4,2,"p-label","Dimension label."]},"tensorstore.DimExpression":{__getitem__:[81,3,1,"","Applies a NumPy-style indexing operation with default index array semantics."],diagonal:[82,5,1,"","Extracts the diagonal of the selected dimensions."],label:[83,3,1,"","Sets (or changes) the labels of the selected dimensions."],oindex:[84,3,1,"","Applies a NumPy-style indexing operation with outer indexing semantics."],stride:[85,3,1,"","Strides the domains of the selected input dimensions by the specified amounts."],translate_by:[86,3,1,"","Translates (shifts) the domains of the selected input dimensions by the\nspecified offsets, without affecting the output range."],translate_to:[87,3,1,"","Translates the domains of the selected input dimensions to the specified\norigins without affecting the output range."],transpose:[88,3,1,"","Transposes the selected dimensions to the specified target indices."],vindex:[89,3,1,"","Applies a NumPy-style indexing operation with vectorized indexing semantics."]},"tensorstore.DimExpression.label":{labels:[83,4,2,"p-labels","Dimension labels for each selected dimension."]},"tensorstore.DimExpression.stride":{strides:[85,4,2,"p-strides","Strides for each selected dimension."]},"tensorstore.DimExpression.translate_by":{offsets:[86,4,2,"p-offsets","The offsets for each of the selected dimensions."]},"tensorstore.DimExpression.translate_to":{origins:[87,4,2,"p-origins","The new origins for each of the selected dimensions."]},"tensorstore.DimExpression.transpose":{target:[88,4,2,"p-target","Target dimension indices for the selected dimensions."]},"tensorstore.Future":{add_done_callback:[91,3,1,"",""],cancel:[92,3,1,"",""],cancelled:[93,3,1,"",""],done:[94,3,1,"",""],exception:[95,3,1,"",""],force:[96,3,1,"",""],remove_done_callback:[97,3,1,"",""],result:[98,3,1,"",""]},"tensorstore.IndexDomain":{"__getitem__(domain)":[101,3,1,"","Slices this domain by another domain."],"__getitem__(expr)":[102,3,1,"","Transforms the domain by a dimension expression."],"__getitem__(identifier)":[103,3,1,"","Returns the single dimension specified by identifier."],"__getitem__(selection)":[104,3,1,"","Returns a new domain with a subset of the dimensions."],"__init__(components)":[105,3,1,"","Constructs an index domain from component vectors."],"__init__(dimensions)":[106,3,1,"","Constructs an index domain from a :py:class`.Dim` sequence."],"__init__(json)":[107,3,1,"","Constructs an index domain from its JSON representation."],__eq__:[100,3,1,"",""],exclusive_max:[108,5,1,"","Exclusive upper bound of the domain."],implicit_lower_bounds:[109,5,1,"","Indicates whether the lower bound of each dimension is implicit or explicit."],implicit_upper_bounds:[110,5,1,"","Indicates whether the upper bound of each dimension is implicit or explicit."],inclusive_max:[111,5,1,"","Inclusive upper bound of the domain."],inclusive_min:[112,5,1,"","Inclusive lower bound of the domain, alias of origin."],labels:[113,5,1,"","Dimension labels for each dimension."],ndim:[114,5,1,"","Alias for rank."],origin:[115,5,1,"","Inclusive lower bound of the domain."],rank:[116,5,1,"","Number of dimensions in the index space."],shape:[117,5,1,"","Shape of the domain."],size:[118,5,1,"","Total number of elements in the domain."],to_json:[119,3,1,"","Returns the JSON representation."]},"tensorstore.IndexDomain.__getitem__(expr)":{expr:[102,4,2,"p-expr","Dimension expression to apply."]},"tensorstore.IndexDomain.__getitem__(identifier)":{identifier:[103,4,2,"p-identifier","Specifies a dimension by integer index or label."]},"tensorstore.IndexDomain.__getitem__(selection)":{selection:[104,4,2,"p-selection","Specifies the dimensions to include, either by index or label."]},"tensorstore.IndexDomain.__init__(components)":{exclusive_max:[105,4,2,"p-exclusive_max","Exclusive upper bounds for each dimension."],implicit_lower_bounds:[105,4,2,"p-implicit_lower_bounds","Indicates whether each lower bound is\nimplicit or explicit."],implicit_upper_bounds:[105,4,2,"p-implicit_upper_bounds","Indicates whether each upper bound is\nimplicit or explicit."],inclusive_max:[105,4,2,"p-inclusive_max","Inclusive upper bounds for each dimension."],inclusive_min:[105,4,2,"p-inclusive_min","Inclusive lower bounds for each dimension."],labels:[105,4,2,"p-labels","Dimension labels."],rank:[105,4,2,"p-rank","Number of dimensions."],shape:[105,4,2,"p-shape","Size for each dimension."]},"tensorstore.IndexDomain.__init__(dimensions)":{dimensions:[106,4,2,"p-dimensions","Sequence of :py:class`.Dim` objects."]},"tensorstore.IndexTransform":{"__getitem__(domain)":[124,3,1,"","Slices this index transform by another domain."],"__getitem__(expr)":[125,3,1,"","Applies a dimension expression to this transform."],"__getitem__(indices)":[126,3,1,"","Applies a NumPy-style indexing operation with default index array semantics."],"__getitem__(transform)":[127,3,1,"","Composes this index transform with another index transform."],"__init__(components)":[128,3,1,"","Constructs an index transform from component vectors."],"__init__(domain)":[129,3,1,"","Constructs an index transform from a domain and output index maps."],"__init__(json)":[130,3,1,"","Constructs an index transform from its JSON representation."],T:[121,5,1,"","View with transposed domain (reversed dimension order)."],__call__:[122,3,1,"","Maps an input index vector to an output index vector."],__eq__:[123,3,1,"",""],domain:[131,5,1,"","Input domain of the index transform."],implicit_lower_bounds:[132,5,1,"","Implicit lower bounds."],implicit_upper_bounds:[133,5,1,"","Implicit upper bounds."],input_exclusive_max:[134,5,1,"","Exclusive upper bound of the input domain."],input_inclusive_max:[135,5,1,"","Inclusive upper bound of the input domain."],input_inclusive_min:[136,5,1,"","Inclusive lower bound of the input domain, alias for input_origin."],input_labels:[137,5,1,"","Input dimension labels."],input_origin:[138,5,1,"","Inclusive lower bound of the input domain."],input_rank:[139,5,1,"","Rank of input space."],input_shape:[140,5,1,"","Shape of the input domain."],ndim:[141,5,1,"","Alias for input_rank."],oindex:[142,3,1,"","Applies a NumPy-style indexing operation with outer indexing semantics."],origin:[143,5,1,"","Inclusive lower bound of the domain."],output:[144,5,1,"","Output index maps."],output_rank:[145,5,1,"","Rank of output space."],shape:[146,5,1,"","Shape of the domain."],size:[147,5,1,"","Total number of elements in the domain."],to_json:[148,3,1,"","Returns the JSON representation of the transform."],vindex:[149,3,1,"","Applies a NumPy-style indexing operation with vectorized indexing semantics."]},"tensorstore.IndexTransform.__call__":{indices:[122,4,2,"p-indices","Input vector of length input_rank."]},"tensorstore.IndexTransform.__init__(components)":{implicit_lower_bounds:[128,4,2,"p-implicit_lower_bounds","Indicates whether each lower bound is\nimplicit or explicit."],implicit_upper_bounds:[128,4,2,"p-implicit_upper_bounds","Indicates whether each upper bound is\nimplicit or explicit."],input_exclusive_max:[128,4,2,"p-input_exclusive_max","Exclusive upper bounds for each input dimension."],input_inclusive_max:[128,4,2,"p-input_inclusive_max","Inclusive upper bounds for each input dimension."],input_inclusive_min:[128,4,2,"p-input_inclusive_min","Inclusive lower bounds for each input dimension."],input_labels:[128,4,2,"p-input_labels","Dimension labels for each input\ndimension."],input_rank:[128,4,2,"p-input_rank","Number of input dimensions."],input_shape:[128,4,2,"p-input_shape","Size for each input dimension."],output:[128,4,2,"p-output","Sequence of output index maps, or OutputIndexMaps object\nfrom an existing transform."]},"tensorstore.IndexTransform.__init__(domain)":{domain:[129,4,2,"p-domain","The domain of the index transform."],output:[129,4,2,"p-output","Sequence of output index maps, or OutputIndexMaps object\nfrom an existing transform."]},"tensorstore.OutputIndexMap":{"__init__(constant)":[153,3,1,"","Constructs a constant map."],"__init__(index_array)":[154,3,1,"","Constructs an index array map."],"__init__(input_dimension)":[155,3,1,"","Constructs a single input dimension map."],__eq__:[152,3,1,"",""],index_array:[156,5,1,"",""],index_range:[157,5,1,"",""],input_dimension:[158,5,1,"",""],method:[159,5,1,"",""],offset:[160,5,1,"",""],stride:[161,5,1,"",""]},"tensorstore.OutputIndexMaps":{__eq__:[163,3,1,"",""],__getitem__:[164,3,1,"",""],rank:[165,5,1,"","Returns the output rank."]},"tensorstore.OutputIndexMethod":{__eq__:[167,3,1,"",""],__init__:[168,3,1,"",""],array:[169,6,1,"",""],constant:[170,6,1,"",""],name:[171,5,1,"",""],single_input_dimension:[172,6,1,"",""]},"tensorstore.Promise":{"new":[174,3,1,"",""],set_exception:[175,3,1,"",""],set_result:[176,3,1,"",""]},"tensorstore.Schema":{"__getitem__(domain)":[179,3,1,"","Transforms the schema using an explicit index domain."],"__getitem__(expr)":[180,3,1,"","Transforms the schema using a dimension expression."],"__getitem__(indices)":[181,3,1,"","Transforms the schema using NumPy-style indexing with default index array semantics."],"__getitem__(transform)":[182,3,1,"","Transforms the schema using an explicit index transform."],"__init__(components)":[183,3,1,"","Constructs from component parts."],"__init__(json)":[184,3,1,"","Constructs from its JSON representation."],T:[178,5,1,"","View with transposed domain (reversed dimension order)."],chunk_layout:[185,5,1,"","Chunk layout constraints specified by the schema."],codec:[186,5,1,"","Codec constraints specified by the schema."],domain:[187,5,1,"","Domain of the schema, or None if unspecified."],fill_value:[188,5,1,"","Fill value specified by the schema."],ndim:[189,5,1,"","Alias for rank."],oindex:[190,3,1,"","Transforms the schema using NumPy-style indexing with outer indexing semantics."],origin:[191,5,1,"","Inclusive lower bound of the domain."],rank:[192,5,1,"","Rank of the schema, or None if unspecified."],shape:[193,5,1,"","Shape of the domain."],size:[194,5,1,"","Total number of elements in the domain."],to_json:[195,3,1,"","Converts to the JSON representation."],update:[196,3,1,"","Adds additional constraints."],vindex:[197,3,1,"","Transforms the schema using NumPy-style indexing with vectorized indexing semantics."]},"tensorstore.Schema.__getitem__(domain)":{domain:[179,4,2,"p-domain","Index domain, must have dimension labels that can be\naligned to self.domain."]},"tensorstore.Schema.__getitem__(transform)":{transform:[182,4,2,"p-transform","Index transform, transform.output_rank must equal\nself.rank."]},"tensorstore.Schema.__init__(components)":{chunk_layout:[183,4,2,"p-chunk_layout","Constrains the chunk layout."],codec:[183,4,2,"p-codec","Constrains the codec."],domain:[183,4,2,"p-domain","Constrains the domain of the TensorStore."],dtype:[183,4,2,"p-dtype","Constrains the data type of the TensorStore."],fill_value:[183,4,2,"p-fill_value","Specifies the fill value for positions that have not been written."],rank:[183,4,2,"p-rank","Constrains the rank of the TensorStore."],schema:[183,4,2,"p-schema","Additional schema constraints to merge with existing constraints."],shape:[183,4,2,"p-shape","Constrains the shape and origin of the TensorStore."]},"tensorstore.Schema.update":{chunk_layout:[196,4,2,"p-chunk_layout","Constrains the chunk layout."],codec:[196,4,2,"p-codec","Constrains the codec."],domain:[196,4,2,"p-domain","Constrains the domain of the TensorStore."],dtype:[196,4,2,"p-dtype","Constrains the data type of the TensorStore."],fill_value:[196,4,2,"p-fill_value","Specifies the fill value for positions that have not been written."],rank:[196,4,2,"p-rank","Constrains the rank of the TensorStore."],schema:[196,4,2,"p-schema","Additional schema constraints to merge with existing constraints."],shape:[196,4,2,"p-shape","Constrains the shape and origin of the TensorStore."]},"tensorstore.Spec":{"__getitem__(domain)":[201,3,1,"","Transforms the spec using an explicit index domain."],"__getitem__(expr)":[202,3,1,"","Transforms the spec using a dimension expression."],"__getitem__(indices)":[203,3,1,"","Transforms the spec using NumPy-style indexing with default index array semantics."],"__getitem__(transform)":[204,3,1,"","Transforms the spec using an explicit index transform."],T:[199,5,1,"","View with transposed domain (reversed dimension order)."],__eq__:[200,3,1,"",""],__init__:[205,3,1,"","Constructs from the JSON representation."],chunk_layout:[206,5,1,"","Effective chunk layout, including any constraints implied\nby driver-specific options."],codec:[207,5,1,"","Effective codec, including any constraints implied\nby driver-specific options."],domain:[208,5,1,"","Effective index domain, including any constraints implied\nby driver-specific options."],dtype:[209,5,1,"","Data type, or None if unspecified."],fill_value:[210,5,1,"","Effective fill value, including any constraints implied by driver-specific\noptions."],ndim:[211,5,1,"","Alias for rank."],oindex:[212,3,1,"","Transforms the spec using NumPy-style indexing with outer indexing semantics."],origin:[213,5,1,"","Inclusive lower bound of the domain."],rank:[214,5,1,"","Returns the rank of the domain, or None if unspecified."],schema:[215,5,1,"","Effective schema, including any constraints implied by driver-specific options."],shape:[216,5,1,"","Shape of the domain."],size:[217,5,1,"","Total number of elements in the domain."],to_json:[218,3,1,"","Converts to the JSON representation."],transform:[219,5,1,"","The index transform, or None if unspecified."],update:[220,3,1,"","Adds additional constraints or changes the open mode."],vindex:[221,3,1,"","Transforms the spec using NumPy-style indexing with vectorized indexing semantics."]},"tensorstore.Spec.__getitem__(domain)":{domain:[201,4,2,"p-domain","Index domain, must have dimension labels that can be\naligned to self.domain."]},"tensorstore.Spec.__getitem__(transform)":{transform:[204,4,2,"p-transform","Index transform, transform.output_rank must equal\nself.rank."]},"tensorstore.Spec.update":{chunk_layout:[220,4,2,"p-chunk_layout","Constrains the chunk layout."],codec:[220,4,2,"p-codec","Constrains the codec."],create:[220,4,2,"p-create","Allow creating a new TensorStore."],delete_existing:[220,4,2,"p-delete_existing","Delete any existing data before creating a new array."],domain:[220,4,2,"p-domain","Constrains the domain of the TensorStore."],dtype:[220,4,2,"p-dtype","Constrains the data type of the TensorStore."],fill_value:[220,4,2,"p-fill_value","Specifies the fill value for positions that have not been written."],open:[220,4,2,"p-open","Allow opening an existing TensorStore."],rank:[220,4,2,"p-rank","Constrains the rank of the TensorStore."],schema:[220,4,2,"p-schema","Additional schema constraints to merge with existing constraints."],shape:[220,4,2,"p-shape","Constrains the shape and origin of the TensorStore."]},"tensorstore.TensorStore":{"__getitem__(domain)":[225,3,1,"","Computes a virtual view using an explicit index domain."],"__getitem__(expr)":[226,3,1,"","Computes a virtual view using a dimension expression."],"__getitem__(indices)":[227,3,1,"","Computes a virtual view using NumPy-style indexing with default index array semantics."],"__getitem__(transform)":[228,3,1,"","Computes a virtual view using an explicit index transform."],"__setitem__(domain)":[229,3,1,"","Synchronously writes using an explicit index domain."],"__setitem__(expr)":[230,3,1,"","Synchronously writes using a dimension expression."],"__setitem__(indices)":[231,3,1,"","Synchronously writes using NumPy-style indexing with default index array semantics."],"__setitem__(transform)":[232,3,1,"","Synchronously writes using an explicit index transform."],T:[223,5,1,"","View with transposed domain (reversed dimension order)."],__array__:[224,3,1,"","Automatic conversion to numpy.ndarray for interoperability with NumPy."],astype:[233,3,1,"","Returns a read/write view as the specified data type."],chunk_layout:[234,5,1,"","Chunk layout of the TensorStore."],codec:[235,5,1,"","Data codec spec."],domain:[236,5,1,"","Domain of the array."],dtype:[237,5,1,"","Data type of the array."],fill_value:[238,5,1,"","Fill value for positions not yet written."],mode:[239,5,1,"","Read/write mode."],ndim:[240,5,1,"","Alias for rank."],oindex:[241,3,1,"","Computes a virtual view using NumPy-style indexing with outer indexing semantics."],origin:[243,5,1,"","Inclusive lower bound of the domain."],rank:[244,5,1,"","Number of dimensions in the domain."],read:[245,3,1,"","Reads the data within the current domain."],readable:[246,5,1,"","Indicates if reading is supported."],resolve:[247,3,1,"","Obtains updated bounds, subject to the cache policy."],schema:[248,5,1,"","Schema of this TensorStore."],shape:[249,5,1,"","Shape of the domain."],size:[250,5,1,"","Total number of elements in the domain."],spec:[251,3,1,"","Spec that may be used to re-open or re-create the array."],transaction:[252,5,1,"","Associated transaction used for read/write operations."],vindex:[253,3,1,"","Computes a virtual view using NumPy-style indexing with vectorized indexing semantics."],with_transaction:[255,3,1,"","Returns a transaction-bound view of this TensorStore."],writable:[256,5,1,"","Indicates if writing is supported."],write:[257,3,1,"","Writes to the current domain."]},"tensorstore.TensorStore.__getitem__(domain)":{domain:[225,4,2,"p-domain","Index domain, must have dimension labels that can be\naligned to self.domain."]},"tensorstore.TensorStore.__getitem__(transform)":{transform:[228,4,2,"p-transform","Index transform, transform.output_rank must equal\nself.rank."]},"tensorstore.TensorStore.__setitem__(domain)":{source:[229,4,2,"p-source","Source array, broadcast-compatible with\nself.domain[transform] and with a data type convertible to\nself.dtype."],transform:[229,4,2,"p-transform","Index transform, transform.output_rank must equal\nself.rank."]},"tensorstore.TensorStore.__setitem__(indices)":{indices:[231,4,2,"p-indices","NumPy-style indexing terms."],source:[231,4,2,"p-source","Source array, broadcast-compatible with\nself[indices].domain and with a data type convertible to\nself.dtype."]},"tensorstore.TensorStore.__setitem__(transform)":{source:[232,4,2,"p-source","Source array, broadcast-compatible with\nself.domain[transform] and with a data type convertible to\nself.dtype."],transform:[232,4,2,"p-transform","Index transform, transform.output_rank must equal\nself.rank."]},"tensorstore.TensorStore.oindex":{__setitem__:[242,3,1,"","Synchronously writes using NumPy-style indexing with outer indexing semantics."]},"tensorstore.TensorStore.oindex.__setitem__":{indices:[242,4,2,"p-indices","NumPy-style indexing terms."],source:[242,4,2,"p-source","Source array, broadcast-compatible with\nself.oindex[indices].domain and with a data type convertible to\nself.dtype."]},"tensorstore.TensorStore.read":{order:[245,4,2,"p-order","Contiguous layout order of the returned array:"]},"tensorstore.TensorStore.vindex":{__setitem__:[254,3,1,"","Synchronously writes using NumPy-style indexing with vectorized indexing semantics."]},"tensorstore.TensorStore.vindex.__setitem__":{indices:[254,4,2,"p-indices","NumPy-style indexing terms."],source:[254,4,2,"p-source","Source array, broadcast-compatible with\nself.vindex[indices].domain and with a data type convertible to\nself.dtype."]},"tensorstore.TensorStore.write":{source:[257,4,2,"p-source","Source array, broadcast-compatible with\nself.domain and with a data type convertible to\nself.dtype."]},"tensorstore.Transaction":{__init__:[259,3,1,"","Creates a new transaction."],abort:[260,3,1,"","Aborts the transaction."],aborted:[261,5,1,"","Indicates whether the transaction has been aborted."],atomic:[262,5,1,"","Indicates whether the transaction is atomic."],commit_async:[263,3,1,"","Asynchronously commits the transaction."],commit_started:[264,5,1,"","Indicates whether the commit of the transaction has already started."],commit_sync:[265,3,1,"","Synchronously commits the transaction."],future:[266,5,1,"","Commit result future."],open:[267,5,1,"","Indicates whether the transaction is still open."]},"tensorstore.WriteFutures":{add_done_callback:[269,3,1,"",""],cancel:[270,3,1,"",""],cancelled:[271,3,1,"",""],commit:[272,5,1,"",""],copy:[273,5,1,"",""],done:[274,3,1,"",""],exception:[275,3,1,"",""],remove_done_callback:[276,3,1,"",""],result:[277,3,1,"",""]},"tensorstore.array":{array:[278,4,2,"p-array","Source array."],context:[278,4,2,"p-context","Context to use."],dtype:[278,4,2,"p-dtype","Data type to which array will be converted."]},"tensorstore.d":{__class_getitem__:[285,3,1,"","Constructs from a sequence of dimension indices, ranges, and/or labels."],__eq__:[286,3,1,"",""]},"tensorstore.dtype":{"__init__(dtype)":[292,3,1,"","Construct from an existing TensorStore or NumPy data type."],"__init__(name)":[293,3,1,"","Construct by name."],__call__:[290,3,1,"","Construct a scalar instance of this data type"],__eq__:[291,3,1,"",""],name:[294,5,1,"",""],numpy_dtype:[295,5,1,"",""],to_json:[296,3,1,"",""],type:[297,5,1,"",""]},"tensorstore.open":{chunk_layout:[308,4,2,"p-chunk_layout","Constrains the chunk layout."],codec:[308,4,2,"p-codec","Constrains the codec."],context:[308,4,2,"p-context","Shared resource context."],create:[308,4,2,"p-create","Allow creating a new TensorStore."],delete_existing:[308,4,2,"p-delete_existing","Delete any existing data before creating a new array."],domain:[308,4,2,"p-domain","Constrains the domain of the TensorStore."],dtype:[308,4,2,"p-dtype","Constrains the data type of the TensorStore."],fill_value:[308,4,2,"p-fill_value","Specifies the fill value for positions that have not been written."],open:[308,4,2,"p-open","Allow opening an existing TensorStore."],rank:[308,4,2,"p-rank","Constrains the rank of the TensorStore."],read:[308,4,2,"p-read","Allow read access."],schema:[308,4,2,"p-schema","Additional schema constraints to merge with existing constraints."],shape:[308,4,2,"p-shape","Constrains the shape and origin of the TensorStore."],spec:[308,4,2,"p-spec","TensorStore Spec to open."],transaction:[308,4,2,"p-transaction","Transaction to use for opening/creating, and for subsequent operations."],write:[308,4,2,"p-write","Allow write access."]},ChunkLayout:{chunk:[317,1,2,"json-ChunkLayout.chunk","Combined constraints on write/read/codec chunks."],codec_chunk:[317,1,2,"json-ChunkLayout.codec_chunk","Constraints on the chunk grid used by the codec, if applicable."],grid_origin:[317,1,2,"json-ChunkLayout.grid_origin","Specifies hard constraints on the origin of the chunk grid."],grid_origin_soft_constraint:[317,1,2,"json-ChunkLayout.grid_origin_soft_constraint","Specifies preferred values for the origin of the chunk grid rather than\nhard constraints."],inner_order:[317,1,2,"json-ChunkLayout.inner_order","Permutation specifying the element storage order within the innermost\nchunks."],inner_order_soft_constraint:[317,1,2,"json-ChunkLayout.inner_order_soft_constraint","Specifies a preferred value for inner_order rather than a\nhard constraint.  If inner_order is also specified, it\ntakes precedence."],read_chunk:[317,1,2,"json-ChunkLayout.read_chunk","Constraints on the chunk grid over which reads may be efficiently\npartitioned."],write_chunk:[317,1,2,"json-ChunkLayout.write_chunk","Constraints on the chunk grid over which writes may be efficiently\npartitioned."]},Codec:{driver:[317,1,2,"json-Codec.driver","Driver identifier"]},Context:{"&lt;resource-type&gt;":[0,1,2,"json-Context.<resource-type>",null],"&lt;resource-type&gt;#&lt;id&gt;":[0,1,2,"json-Context.<resource-type>#<id>",null],cache_pool:[0,0,1,"json-Context.cache_pool",""],data_copy_concurrency:[0,0,1,"json-Context.data_copy_concurrency",""],file_io_concurrency:[0,0,1,"json-Context.file_io_concurrency",""],gcs_request_concurrency:[14,0,1,"json-Context.gcs_request_concurrency",""],gcs_request_retries:[14,0,1,"json-Context.gcs_request_retries",""],gcs_user_project:[14,0,1,"json-Context.gcs_user_project",""],memory_key_value_store:[16,0,1,"json-Context.memory_key_value_store",""]},DownsampleMethod:{max:[3,1,2,"json-DownsampleMethod.max",""],mean:[3,1,2,"json-DownsampleMethod.mean",""],median:[3,1,2,"json-DownsampleMethod.median",""],min:[3,1,2,"json-DownsampleMethod.min",""],mode:[3,1,2,"json-DownsampleMethod.mode",""],stride:[3,1,2,"json-DownsampleMethod.stride",""]},IndexDomain:{exclusive_max:[11,1,2,"json-IndexDomain.exclusive_max","Exclusive upper bounds of the domain."],inclusive_max:[11,1,2,"json-IndexDomain.inclusive_max","Inclusive upper bounds of the domain."],inclusive_min:[11,1,2,"json-IndexDomain.inclusive_min","Inclusive lower bounds of the domain."],labels:[11,1,2,"json-IndexDomain.labels","Dimension labels for each dimension."],rank:[11,1,2,"json-IndexDomain.rank","Number of dimensions."],shape:[11,1,2,"json-IndexDomain.shape","Extent of each dimension of the domain."]},IndexTransform:{input_exclusive_max:[11,1,2,"json-IndexTransform.input_exclusive_max","Exclusive upper bounds of the input domain."],input_inclusive_max:[11,1,2,"json-IndexTransform.input_inclusive_max","Inclusive upper bounds of the input domain."],input_inclusive_min:[11,1,2,"json-IndexTransform.input_inclusive_min","Inclusive lower bounds of the input domain."],input_labels:[11,1,2,"json-IndexTransform.input_labels","Dimension labels for each input domain dimension."],input_rank:[11,1,2,"json-IndexTransform.input_rank","Number of input dimensions."],input_shape:[11,1,2,"json-IndexTransform.input_shape","Extent of each dimension of the input domain."],output:[11,1,2,"json-IndexTransform.output","Specifies the output index map for each output dimension."]},KeyValueStore:{context:[15,1,2,"json-KeyValueStore.context",""],driver:[15,1,2,"json-KeyValueStore.driver","Key-value store driver identifier"]},KeyValueStoreBackedChunkDriver:{cache_pool:[4,1,2,"json-KeyValueStoreBackedChunkDriver.cache_pool",""],context:[4,1,2,"json-KeyValueStoreBackedChunkDriver.context","Specifies context resources that augment/override the parent context."],create:[4,1,2,"json-KeyValueStoreBackedChunkDriver.create",""],data_copy_concurrency:[4,1,2,"json-KeyValueStoreBackedChunkDriver.data_copy_concurrency",""],delete_existing:[4,1,2,"json-KeyValueStoreBackedChunkDriver.delete_existing",""],driver:[4,1,2,"json-KeyValueStoreBackedChunkDriver.driver","Driver identifier"],dtype:[4,1,2,"json-KeyValueStoreBackedChunkDriver.dtype","Specifies the data type."],kvstore:[4,1,2,"json-KeyValueStoreBackedChunkDriver.kvstore",""],open:[4,1,2,"json-KeyValueStoreBackedChunkDriver.open",""],path:[4,1,2,"json-KeyValueStoreBackedChunkDriver.path",""],rank:[4,1,2,"json-KeyValueStoreBackedChunkDriver.rank","Specifies the rank of the TensorStore."],recheck_cached_data:[4,1,2,"json-KeyValueStoreBackedChunkDriver.recheck_cached_data",""],recheck_cached_metadata:[4,1,2,"json-KeyValueStoreBackedChunkDriver.recheck_cached_metadata",""],transform:[4,1,2,"json-KeyValueStoreBackedChunkDriver.transform","Specifies a transform."]},OutputIndexMap:{index_array:[11,1,2,"json-OutputIndexMap.index_array","If present, indicates that this output dimension uses an index\narray map, with the index array specified as a nested list of rank\nequal to the input_rank."],index_array_bounds:[11,1,2,"json-OutputIndexMap.index_array_bounds",""],input_dimension:[11,1,2,"json-OutputIndexMap.input_dimension","If present, indicates that this output dimension uses a single\ninput dimension map with the specified input dimension.  Must not\nbe specified in conjunction with index_array."],offset:[11,1,2,"json-OutputIndexMap.offset","Specifies an offset for this output dimension.  If neither\ninput_dimension nor index_array is\nspecified, this specifies the constant value to which this output\ndimension maps."],stride:[11,1,2,"json-OutputIndexMap.stride","Multiplier for the input index specified by\ninput_dimension or the index array value specified by\nindex_array."]},Schema:{chunk_layout:[317,1,2,"json-Schema.chunk_layout","Data storage layout constraints."],codec:[317,1,2,"json-Schema.codec",""],domain:[317,1,2,"json-Schema.domain","Domain of the TensorStore, including bounds and optional dimension labels."],dtype:[317,1,2,"json-Schema.dtype","Specifies the data type of the TensorStore."],fill_value:[317,1,2,"json-Schema.fill_value","Fill value to use for missing data."],rank:[317,1,2,"json-Schema.rank","Number of dimensions."]},TensorStore:{context:[318,1,2,"json-TensorStore.context","Specifies context resources that augment/override the parent context."],driver:[318,1,2,"json-TensorStore.driver","Driver identifier"],dtype:[318,1,2,"json-TensorStore.dtype","Specifies the data type."],rank:[318,1,2,"json-TensorStore.rank","Specifies the rank of the TensorStore."],transform:[318,1,2,"json-TensorStore.transform","Specifies a transform."]},dtype:{"byte":[318,1,2,"json-dtype.byte","Single byte."],"char":[318,1,2,"json-dtype.char","Single byte, interpreted as an ASCII character."],bfloat16:[318,1,2,"json-dtype.bfloat16","bfloat16 floating-point format number."],bool:[318,1,2,"json-dtype.bool","Boolean value (0 or 1)."],complex128:[318,1,2,"json-dtype.complex128","Complex number, where the real and imaginary components are each\nrepresented by a float64."],complex64:[318,1,2,"json-dtype.complex64","Complex number, where the real and imaginary components are each\nrepresented by a float32."],float16:[318,1,2,"json-dtype.float16","IEEE 754 binary16\nhalf-precision floating-point number."],float32:[318,1,2,"json-dtype.float32","IEEE 754 binary32\nsingle-precision floating-point number."],float64:[318,1,2,"json-dtype.float64","IEEE 754 binary64\ndouble-precision floating-point number."],int16:[318,1,2,"json-dtype.int16","/tmp/tmplkopqncu/tensorstore_schema.yml:58: (INFO/1) Duplicate explicit target name: \"two's-complement\".16-bit signed two's-complement integer."],int32:[318,1,2,"json-dtype.int32","/tmp/tmplkopqncu/tensorstore_schema.yml:62: (INFO/1) Duplicate explicit target name: \"two's-complement\".32-bit signed two's-complement integer."],int64:[318,1,2,"json-dtype.int64","/tmp/tmplkopqncu/tensorstore_schema.yml:66: (INFO/1) Duplicate explicit target name: \"two's-complement\".64-bit signed two's-complement integer."],int8:[318,1,2,"json-dtype.int8","8-bit signed two's-complement integer."],json:[318,1,2,"json-dtype.json","JSON value."],string:[318,1,2,"json-dtype.string","Byte string."],uint16:[318,1,2,"json-dtype.uint16","16-bit unsigned integer."],uint32:[318,1,2,"json-dtype.uint32","32-bit unsigned integer."],uint64:[318,1,2,"json-dtype.uint64","64-bit unsigned integer."],uint8:[318,1,2,"json-dtype.uint8","8-bit unsigned integer."],ustring:[318,1,2,"json-dtype.ustring","Unicode string (represented in memory as UTF-8)."]},tensorstore:{"downsample(spec)":[287,7,1,"","Returns a virtual downsampled view view of a Spec."],"downsample(store)":[288,7,1,"","Returns a virtual downsampled view of a TensorStore."],ChunkLayout:[18,2,1,"","Describes the storage layout of a tensorstore.TensorStore."],CodecSpec:[49,2,1,"","Specifies driver-specific encoding/decoding parameters."],Context:[52,2,1,"","Manages shared TensorStore context resources, such as caches and credentials."],Dim:[64,2,1,"","1-d index interval with optionally-implicit bounds and dimension label."],DimExpression:[80,2,1,"","Specifies an advanced indexing operation."],Future:[90,2,1,"","Handle for consuming the result of an asynchronous operation."],IndexDomain:[99,2,1,"","Domain (including bounds and optional dimension labels) of an N-dimensional index space."],IndexTransform:[120,2,1,"","Represents a transform from an input index space to an output space."],Indexable:[150,2,1,"","Abstract base class for types that support TensorStore indexing operations."],OutputIndexMap:[151,2,1,"","Represents an output index map for an index transform."],OutputIndexMaps:[162,2,1,"","View of the output index maps for an index transform."],OutputIndexMethod:[166,2,1,"","Indicates the output index method of an OutputIndexMap."],Promise:[173,2,1,"","Handle for producing the result of an asynchronous operation."],Schema:[177,2,1,"","Driver-independent options for defining a TensorStore schema."],Spec:[198,2,1,"","Specification for opening or creating a TensorStore."],TensorStore:[222,2,1,"","Asynchronous multi-dimensional array handle."],Transaction:[258,2,1,"","Transactions are used to stage a group of modifications (e.g. writes to\ntensorstore.TensorStore objects) in memory, and then either commit the\ngroup all at once or abort it."],WriteFutures:[268,2,1,"","Handle for consuming the result of an asynchronous write operation."],array:[278,7,1,"","Returns a TensorStore that reads/writes from an in-memory array."],bfloat16:[279,8,1,"","bfloat16 floating-point data type."],bool:[280,8,1,"","Boolean data type (0 or 1).  Corresponds to the python:bool type and numpy.bool_."],cast:[281,7,1,"","Returns a read/write view as the specified data type."],complex128:[282,8,1,"","Complex number based on float64.  Corresponds to numpy.complex128."],complex64:[283,8,1,"","Complex number based on float32.  Corresponds to numpy.complex64."],d:[284,2,1,"","Specifies a dimension selection, for starting a dimension expression."],dtype:[289,2,1,"","TensorStore data type representation."],float16:[298,8,1,"","IEEE 754 binary16 half-precision floating-point data type.  Correspond to numpy.float16."],float32:[299,8,1,"","IEEE 754 binary32 single-precision floating-point data type.  Corresponds to numpy.float32."],float64:[300,8,1,"","IEEE 754 binary64 double-precision floating-point data type.  Corresponds to numpy.float64."],inf:[301,8,1,"","Special constant equal to 2^{62}-1 that indicates an unbounded index domain."],int16:[302,8,1,"","16-bit signed two's-complement integer data type.  Corresponds to numpy.int16."],int32:[303,8,1,"","32-bit signed two's-complement integer data type.  Corresponds to numpy.int32."],int64:[304,8,1,"","32-bit signed two's-complement integer data type.  Corresponds to numpy.int64."],int8:[305,8,1,"","8-bit signed two's-complement integer data type.  Corresponds to numpy.int8."],json:[306,8,1,"","JSON data type.  Corresponds to an arbitrary Python JSON value."],newaxis:[307,8,1,"","Alias for None used in indexing expressions to specify a new singleton dimension."],open:[308,7,1,"","Opens or creates a TensorStore from a Spec."],string:[309,8,1,"","Variable-length byte string data type.  Corresponds to the Python python:bytes type."],uint16:[310,8,1,"","16-bit unsigned integer.  Corresponds to numpy.uint16."],uint32:[311,8,1,"","32-bit unsigned integer.  Corresponds to numpy.uint32."],uint64:[312,8,1,"","64-bit unsigned integer data type.  Corresponds to numpy.uint64."],uint8:[313,8,1,"","8-bit unsigned integer.  Corresponds to numpy.uint8."],ustring:[314,8,1,"","Variable-length Unicode string data type.  Corresponds to the Python python:str type."]}},objnames:{"0":["json","schema","JSON type"],"1":["json","subschema","JSON member"],"2":["py","class","Python class"],"3":["py","method","Python method"],"4":["py","parameter","Python parameter"],"5":["py","property","Python property"],"6":["py","attribute","Python attribute"],"7":["py","function","Python function"],"8":["py","data","Python data"],"9":["std","envvar","environment variable"]},objtypes:{"0":"json:schema","1":"json:subschema","2":"py:class","3":"py:method","4":"py:parameter","5":"py:property","6":"py:attribute","7":"py:function","8":"py:data","9":"std:envvar"},terms:{"0x8":[308,316],"100":[6,7,8,11,44,45,48,179,180,181,182,187,190,197,206,211,214,215,218,219,220,235,238,248,316],"1000":[6,7,8,179,180,181,182,190,197,208,215,222,234,308,316],"10000":7,"1000000":45,"10000000":[0,54,58,62,63,308],"100000000":[0,316],"1000000000":7,"100_000_000":316,"100kb":6,"100mb":316,"100x100x1":316,"102":[6,8,234,308,316],"1020":7,"1049":222,"105":[44,48,218,219],"1113":7,"1132030694":316,"1161117856":316,"1194100437":316,"1264":7,"128":[6,8],"1408314276":316,"1414":308,"15000":316,"15100":316,"159":[6,7,8],"200":[6,7,8,44,45,48,179,180,181,182,187,190,197,206,211,214,215,218,219,220],"2000":[6,7,8,179,180,181,182,190,197,208,215,234,308],"20000":[222,316],"2000000":[6,7,8],"2019":12,"2030":7,"2048":7,"206":[44,48],"207":[44,48],"300":[6,7,8,44,48,179,180,181,182,187,190,197,206,215,220],"3000":[6,7,8,179,180,181,182,190,197,208,215,234,308],"30037":12,"3040":7,"307":[44,48],"34432":[7,308,316],"34452":7,"357":315,"39552":[7,308,316],"39582":7,"40000":7,"41408":[308,316],"4443":14,"4611686018427387903":[17,301],"486000":317,"4_4_40":7,"500":[6,7,8],"50000":7,"5000000":[60,62,63],"512":7,"51508":7,"51548":7,"5813054053":316,"632":7,"6901":5,"707":308,"754":[17,298,299,300,318],"8_8_8":7,"9223372036854775808":317,"abstract":[10,17,120,150],"boolean":[4,6,7,8,16,17,84,142,190,212,241,242,280,318],"byte":[0,6,8,17,309,318],"case":[3,8,9,11,12,14,85,86,87,101,120,124,228,315,317],"char":318,"class":[17,19,49,53,55,64,80,90,99,106,120,150,151,162,166,173,177,198,222,258,268,284,289],"default":[0,4,5,6,7,8,9,11,12,14,52,57,59,60,61,66,67,68,80,81,105,120,126,128,177,181,198,203,222,227,231,284,308,315,317],"export":12,"final":[34,46],"float":[17,19,21,23,24,32,34,46,90,95,98,268,275,277,279,298,299,300,318],"function":[3,7,11,99,316],"import":316,"int":[17,18,19,21,25,26,27,28,29,30,32,34,37,38,39,40,41,42,46,64,66,67,68,71,72,76,77,79,80,85,86,87,90,97,99,103,105,108,111,112,114,115,116,117,118,120,122,128,134,135,136,138,139,140,141,143,145,146,147,151,153,154,155,158,160,161,162,164,165,166,168,177,183,189,191,192,193,194,196,198,211,213,214,216,217,220,222,240,243,244,249,250,268,276,284,287,288,301,308,315],"new":[0,4,10,11,17,60,61,81,82,83,85,86,87,99,104,173,174,179,180,181,182,183,185,190,196,197,201,202,203,204,212,220,221,235,248,258,259,307,315,316,317],"null":[0,7,8,309,314,317],"public":[14,316],"return":[3,4,5,6,7,8,11,17,53,54,55,57,58,59,60,61,64,70,81,83,84,85,86,87,88,89,90,99,103,104,119,120,122,148,162,165,179,180,181,182,185,190,197,198,201,202,203,204,212,214,221,222,224,225,226,227,228,233,239,245,255,257,263,265,278,281,287,288,308],"static":[173,174],"transient":[14,16],"true":[4,5,6,7,8,16,59,64,66,67,68,69,70,81,173,218,220,222,224,225,226,227,228,229,230,231,232,234,235,236,237,238,241,242,245,248,251,253,254,257,258,308,315,316],"while":[3,6,7,8,11,12,34,39,46,224,309,314,315,316,317],For:[3,5,6,7,8,10,11,12,14,44,48,85,102,120,224,257,268,317],Has:[260,263],IDs:7,One:[0,3,4,6,8,318],TLS:12,The:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,16,34,44,46,48,58,64,82,83,85,86,87,90,99,101,120,124,127,129,179,183,196,198,201,219,220,225,236,238,255,257,258,267,268,308,309,314,315,317,318],There:[12,306,309,314,316,318],Use:[12,316],Used:[0,317],With:[4,5,6,7,8],__array__:[222,224,245],__call__:[120,122,289,290],__eq__:[18,19,20,33,64,65,99,100,120,123,151,152,162,163,166,167,198,200,284,286,289,291],__getitem__:[52,58,80,81,84,89,99,101,102,103,104,120,124,125,126,127,142,149,162,164,177,179,180,181,182,190,197,198,201,202,203,204,212,221,222,225,226,227,228,230,241,253,284],__index__:315,__setitem__:[222,229,230,231,232,242,254],_arrai:11,_bit:7,_dimens:11,_origin:11,_rank:11,_shape:11,abort:[17,258,260,261,263,265,266,267],abov:[11,81,315],access:[5,6,7,8,10,11,13,14,15,39,40,185,268,308,315,316],accomplish:257,accord:[6,7,8,11,12,101,124],account:[14,44,48,317],achiev:[6,8],acid:10,acknowledg:257,actual:[183,196,220,227,257,308,315,317],adapt:1,add:[12,18,19,32,46,81,177,196,198,220,315],add_done_callback:[90,91,268,269],added:[12,81,82,83,84,85,86,87,88,89,149,197,221,253,254,315],adding:315,addit:[3,6,7,8,9,11,12,14,18,19,32,46,80,81,177,183,196,198,220,258,267,268,308,315,317],addition:[11,12,64,258,315],address:9,advanc:[10,17,80,315],advantag:[10,257],advis:7,affect:[12,80,86,87,102,185,257,284,317],after:[4,5,6,7,8,12,183,196,220,257,268,308,315],against:317,alia:[17,18,19,27,41,99,112,114,120,136,141,177,189,198,211,222,240,307],align:[12,101,124,179,201,225,229,254,257,317],all:[0,3,4,6,7,8,9,10,11,15,16,17,34,44,46,48,81,85,86,87,88,105,120,128,183,196,220,228,245,257,258,308,315,317,318],all_proxi:9,allow:[0,8,11,12,13,14,81,220,231,232,257,258,308,317],allus:14,along:[7,317],alreadi:[4,6,7,8,11,12,183,196,220,258,260,263,264,308],also:[1,2,3,4,6,7,8,10,11,12,13,34,46,64,80,81,85,86,87,183,196,220,231,257,258,268,279,308,315,316,317,318],altern:[9,257,315],alwai:[3,4,5,6,7,8,81,85,229,230,231,232,242,254,315,317],among:3,amount:[80,85,284],amplif:317,analog:10,ancestor:5,ani:[2,4,5,6,7,8,9,11,14,17,18,19,22,31,34,35,44,45,46,48,49,50,51,52,53,54,55,56,57,60,81,84,87,89,99,101,104,107,119,120,124,130,142,148,149,177,184,190,195,197,198,205,206,207,208,210,212,215,218,220,221,227,229,231,232,236,241,242,245,253,254,257,258,267,308,315,316,317],anoth:[0,99,101,120,124,127,315],api:[1,9,10,14],appl:12,appli:[0,1,2,3,4,5,6,7,8,9,11,14,34,46,80,81,84,89,99,102,120,125,126,142,149,181,190,197,203,212,221,226,236,241,242,284,315,317,318],applic:[12,14,235,238,317],application_default_credenti:14,appropri:14,aqacaamabaafaayaaaagqqaameeaaebbaabqqqaaye:8,arbitrari:[6,11,17,306,315],archiv:12,aren:12,arg0:[99,100,162,163,164,173,175,176,289,290],arg:315,argument:315,arithmet:3,arrai:[3,4,5,10,11,15,17,80,84,89,90,102,120,126,128,130,142,149,151,154,166,169,177,181,188,190,197,198,203,210,212,220,221,222,224,227,228,229,230,231,232,233,236,237,238,240,241,242,244,245,251,253,254,257,258,278,279,281,284,308,316,317,318],arrang:257,array_lik:[17,81,151,154,156,177,183,188,196,198,210,220,222,224,229,230,231,232,238,242,245,254,257,278,308,315],ascii:318,aspect:[19,21,23,24,32,34,46,317],aspect_ratio:[6,7,8,19,21,23,32,34,46,317],aspect_ratio_soft_constraint:[19,21,24,32,34,46,317],assert:[62,301],assign:[7,11,229,230,231,232,242,254,315,316],associ:[64,222,252,263],assum:[4,5,6,7,8,11,317],astyp:[222,233],async:[258,316],asynchron:[10,90,173,222,229,230,231,232,242,245,254,257,258,263,268,316],asyncio:[90,257,316],atom:[5,10,16,258,259,262],attempt:[5,14,315],attribut:[5,6,315],augment:[1,2,3,4,5,6,7,8,13,14,15,16,318],auth:14,authent:[0,9],author:[9,14],automat:[6,7,8,10,11,12,14,222,224,258,308,317],avail:[0,9,12,279],averag:3,avoid:[7,101,124,315],await:[90,222,224,225,226,227,228,234,235,236,237,238,241,245,248,251,253,257,258,281,308,315,316],awar:315,axes:[6,219,225,226],back:[1,6,7,8,10,258,316],bandwidth:10,base:[2,3,6,7,8,11,17,150,233,281,282,283,287,288,315,317],basic:315,bazel:12,bazel_cach:12,bazel_tool:12,bazelisk:12,bazelisk_hom:12,bazelrc:12,bdbe37905216:12,bdist_wheel:12,bear:7,becaus:[5,7,257,315],becom:[257,266],been:[8,11,183,196,220,236,257,258,260,261,263,266,267,308],befor:[4,6,7,8,220,308],begin:[81,315],behav:102,behavior:[9,11,12,16,81,101,124,245,257,315],being:[4,5,6,7,8,12,258],below:11,best:[6,7,8],better:224,between:[11,308],bfloat16:[8,17,279,318],big:[6,8,318],bill:14,binari:12,binary16:[17,298,318],binary32:[17,299,318],binary64:[17,300,318],bind:12,bit:[6,7,8,11,17,302,303,304,305,310,311,312,313,318],block:[3,6,7,8,13,90,224,229,230,231,232,242,245,254,257,258,317],blocksiz:[6,8,222,225,226,227,228,235,241,248,251,253,258,308,316],blosc:[6,8,12,222,225,226,227,228,235,241,248,251,253,308,317],blosclz:[6,8],bool:[3,8,17,18,19,20,31,33,34,46,49,51,53,54,55,57,64,65,66,67,68,69,70,73,74,75,81,90,92,93,94,99,100,105,109,110,120,123,128,132,133,151,152,162,163,166,167,177,195,198,200,218,220,222,246,247,256,258,259,261,262,264,267,268,270,271,274,280,284,286,289,291,308,315,318],bool_:[17,280],boringssl:12,both:[4,6,7,8,11,34,46,101,124,183,196,220,308,317],bound:[3,4,6,7,8,11,17,64,66,67,68,69,71,72,74,75,76,77,81,82,84,85,87,89,99,101,105,108,109,110,111,112,115,120,124,126,128,130,132,133,134,135,136,138,142,143,149,177,183,191,196,198,213,220,222,236,243,247,255,308,315,317],boundari:317,broadcast:[8,81,89,149,179,183,196,197,201,220,221,225,229,231,232,238,242,253,254,257,308,315,317],brotli:12,bsd:9,bucket:[2,3,5,7,8,14,308,316],buffer:[3,8],bug:12,build:10,build_def:12,build_doc:12,build_ext:12,built:[9,12,279,315],bundl:[9,12],bz2:8,bzip2:[6,8,12],bzl:12,c16:8,c_rehash:9,cach:[0,4,5,6,7,8,10,12,17,52,222,245,247,257,308,316],cache_pool:[0,4,5,6,7,8,54,58,60,62,63,257,316],cacherevalidationbound:[4,5,6,7,8],cafil:14,call:[59,81,90,104,182,185,227,245,257,260,263,315],callback:[90,91,97,268,269,276],can:[9,10,11,12,14,179,201,225,257,258,308,315,316,317],cancel:[90,92,93,257,268,270,271],cannot:[80,81,182,258],capabl:[8,315],capath:14,care:7,cartesian:99,cast:[4,17,233,281,318],caus:[8,315],cdot:11,ce222e317e36:12,cert:[9,14],certain:11,certif:12,chain:[81,315],chang:[11,12,80,83,198,220,258,284],channel:[7,308,316],charact:[12,318],characterist:308,check:[4,6,7,8,263,315],child:[62,63],choic:7,choos:317,chosen:[3,6,7,8,308],chunk:[10,19,20,21,23,24,25,26,29,30,32,33,34,36,39,43,44,46,47,48,177,183,185,196,198,206,215,220,222,227,228,234,241,251,253,257,308],chunk_aspect_ratio:[6,7,8,34,46,308],chunk_aspect_ratio_soft_constraint:[34,46],chunk_el:[6,8,34,46,308],chunk_elements_soft_constraint:[34,46],chunk_layout:[6,7,8,177,179,180,181,182,183,184,185,190,192,195,196,197,198,206,215,220,222,234,248,308,317],chunk_shap:[6,8,34,46,308],chunk_shape_soft_constraint:[34,46],chunk_siz:[7,308,316],chunklayout:[6,7,8,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,177,179,180,181,182,183,185,190,192,195,196,197,198,206,220,222,234,308,317],chunkss:317,circumst:4,clang:12,clear:[34,46],clevel:[6,8,222,225,226,227,228,235,241,248,251,253,308,317],clone:12,close:[11,64,67],cloud:[10,14,15,257,316],cloudsdk_config:14,cmake:12,cname:[6,8,222,225,226,227,228,235,241,248,251,253,308,317],coalesc:[257,258],code:12,codec:[18,19,34,36,46,177,183,186,196,198,207,215,220,222,235,248,308],codec_chunk:[6,7,8,18,34,36,46,317],codec_chunk_aspect_ratio:[34,46],codec_chunk_aspect_ratio_soft_constraint:[34,46],codec_chunk_el:[34,46],codec_chunk_elements_soft_constraint:[34,46],codec_chunk_shap:[34,46],codec_chunk_shape_soft_constraint:[34,46],codecspec:[7,17,49,50,51,177,183,186,196,198,207,220,222,235,308],colexicograph:[6,7,34,39,46,245,317],column:[34,39,46,245,317],com:[9,12],com_facebook_zstd:12,com_github_google_tensorstor:12,com_google_boringssl:12,com_google_brotli:12,com_google_snappi:12,combin:[6,8,308,315,317],comma:[9,12],command:[9,12],commit:[17,245,257,258,263,264,265,266,267,268,272],commit_async:[257,258,260,263,265],commit_start:[258,264],commit_sync:[231,258,263,265],common:[3,4,9,15,34,46,120,315],compar:[18,19,20,33],comparison:[183,196,220,308],compat:[0,9,11,12,183,196,220,229,231,232,238,242,254,257,308,315,316,317],compil:12,complement:[17,302,303,304,305,318],complet:[11,90,173,229,230,231,232,242,245,254,257,268,315,316],complex128:[8,17,282,318],complex64:[8,17,283,318],complex:[3,17,282,283,318],compon:[18,34,99,105,120,128,177,183,318],compos:[2,10,11,120,127,182,204],composit:11,compress:[8,225,226,258,308,316,317],compressed_segment:[7,308,316],compressed_segmentation_block_s:[7,308,316],compressor:[6,186,207,210,222,227,228,235,241,248,251,253,308,317],comput:[3,11,14,179,201,222,225,226,227,228,241,253,315],concaten:9,concurr:[0,5,10,13,14,90,257],condit:[14,101,124],config:14,configur:[0,10,14],confus:315,conjunct:[11,220,308,317],connect:[9,10,14],consecut:[81,315],consequ:102,consid:[257,317],consist:[4,5,6,7,8,10,81,315],constant:[1,11,17,151,153,166,170,301,315],constrain:[6,7,10,11,183,196,220,308,315,317],constraint:[1,2,3,4,11,18,19,21,24,26,29,30,32,34,37,38,39,40,44,46,48,177,183,185,186,196,198,206,207,208,210,215,220,308,317,318],construct:[18,19,21,22,34,35,49,50,52,59,60,61,63,64,66,67,68,69,99,105,106,107,120,128,129,130,151,153,154,155,177,183,184,198,205,284,285,289,290,292,293],constructor:59,consum:[17,81,90,268,315],contain:[3,5,9,11,12,81,85,315,316],content:13,context:[1,2,3,4,5,6,7,8,10,13,14,15,16,17,52,53,54,55,56,57,58,59,60,61,62,63,224,257,258,278,308,316,318],contextresourc:[0,4,5,6,7,8,13,14,16],contigu:[1,64,245],contrast:315,contribut:7,control:257,conveni:[4,5,6,7,8,14,228],convers:[2,222,224,316],convert:[2,18,19,31,34,45,46,49,51,104,177,183,195,196,198,218,220,229,231,232,242,254,257,278,308,315],coordin:[81,315],copi:[0,11,12,185,257,268,273,315],core:[0,10,315],correctli:11,correspond:[6,7,8,11,14,17,21,32,34,46,81,82,90,173,268,279,280,282,283,298,299,300,302,303,304,305,306,309,310,311,312,313,314,315,317,318],cost:11,cpu:0,crash:257,creat:[4,5,10,12,17,52,55,56,58,198,220,222,224,225,226,227,228,229,230,231,232,234,235,236,237,238,241,242,245,248,251,253,254,257,258,259,316,317,318],credenti:[0,14,17,52,316],crt:[9,14],curl:[12,14],current:[0,8,11,12,90,222,224,245,257,258,316],dask:315,data:[0,1,2,3,4,5,10,15,16,183,196,198,209,220,227,229,231,232,233,235,237,238,242,245,254,257,278,279,280,281,289,290,292,298,299,300,302,303,304,305,306,308,309,312,314,315,317,318],data_copy_concurr:[0,4,5,6,7,8],data_encod:[7,308,316],data_typ:7,databas:10,dataset:[6,222,224,225,226,227,228,229,230,231,232,236,237,240,241,242,244,245,251,253,254,257,258],dataset_3d:316,dataset_futur:316,datatyp:[6,209,225,226,258,308,316],date:12,datetim:8,deadlin:[95,98,275,277],decod:[0,10,17,49,317],decrypt:9,defer:315,defin:[0,4,5,6,7,8,11,13,14,16,17,81,99,177,279,315,317],delet:[4,6,7,8,220,308],delete_exist:[4,6,7,8,220,258,308,316],demonstr:316,denot:315,depend:[9,14,81,245,257,315,318],deprec:[8,315],describ:[11,17,18,19],detail:[9,10],determin:[4,6,7,11,101,124,308,317],determinist:3,develop:14,dexpr:315,diagon:[80,82,284,315],differ:[3,11,15,84,89,90,142,149,183,190,196,197,212,220,221,241,242,248,253,254,308,309,314],dim:[17,44,48,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,99,101,103,106,124,128,148,151,154,157,301],dimens:[3,6,7,8,10,11,17,18,19,21,28,32,34,42,44,46,48,64,66,67,68,69,78,80,82,83,84,85,86,87,88,89,99,102,103,104,105,106,109,110,113,116,120,121,125,128,137,149,151,155,177,178,179,180,183,196,197,198,199,201,202,211,214,218,219,220,221,222,223,225,226,230,244,253,254,258,284,285,307,308,316,317],dimension:[3,10,11,17,81,99,222,315],dimension_separ:[8,222,227,228,241,251,253,308],dimexpress:[17,80,81,82,83,84,85,86,87,88,89,99,102,120,125,177,180,198,202,222,226,230,284,315],dimselectionlik:[80,88,99,104,284,285],direct:81,directli:[0,1,2,3,4,6,7,8,11,12,13,14,120,206,207,208,210,215,229,230,231,232,242,254,315,317,318],directori:[9,12,13],disabl:[8,9],discrep:[101,124],disjoint:257,dist:12,distribut:[9,12],divid:315,doc:12,document:[9,15,317,318],doe:[4,6,7,8,9,11,12,13,59,81,83,85,86,87,120,206,207,208,210,215,227,257,279,315,317],domain:[3,10,17,80,81,82,83,84,85,86,87,88,89,90,99,101,102,103,104,105,106,107,108,111,112,115,117,118,120,121,124,125,126,127,128,129,130,131,134,135,136,138,140,142,143,146,147,149,177,178,179,180,181,182,183,187,190,191,193,194,196,197,198,199,201,204,208,213,214,215,216,217,219,220,221,222,223,224,225,226,228,229,230,231,232,236,242,243,244,245,248,249,250,253,254,257,284,301,307,308,315,316,317],domin:315,don:12,done:[10,12,14,85,90,94,173,183,196,220,268,274,308],doubl:[17,300,318],download:12,downsampl:[4,17,287,288,318],downsample_factor:[3,17,287,288],downsample_method:3,downsamplemethod:[3,287,288],driver:[0,10,17,49,81,90,177,186,198,201,202,203,204,205,206,207,208,209,210,211,212,214,215,218,219,220,221,222,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,241,242,245,248,251,253,254,257,258,281,308,315,316,317,318],drop:[11,257],dtype:[1,2,3,4,5,6,7,8,17,81,90,177,183,184,192,195,196,198,208,209,210,215,220,222,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,240,241,242,244,245,248,251,253,254,257,258,278,279,280,281,282,283,289,290,291,292,293,294,295,296,297,298,299,300,302,303,304,305,306,308,309,310,311,312,313,314,315,316,317,318],due:[7,13],dummi:[81,315],duplic:[83,315],durabl:[10,257,268],dynam:9,each:[0,3,4,5,6,7,8,9,11,21,32,59,83,85,86,87,99,105,109,110,113,128,185,224,315,317,318],earlier:12,effect:[11,81,101,124,198,206,207,208,210,215,260,263,315],effici:[3,7,10,11,18,43,44,47,48,257,258,317,318],effort:12,either:[4,6,7,8,11,14,17,64,101,104,124,229,230,231,232,242,254,257,258,266,284,315],element:[2,3,7,18,19,21,25,26,32,34,39,40,45,46,81,99,118,120,147,177,194,198,217,222,250,315,317],elements_soft_constraint:[19,21,26,32,34,46,317],empti:[5,6,11,64,70,78,101,124,183,196,220,308,315],enabl:[4,6,7,8,10,14,120,257],encod:[0,6,8,10,12,17,49,308,316,317,318],end:[88,315],endian:[6,7,8,318],engin:14,enhanc:315,ensur:[12,90,257,258,315],entir:[5,7,11,101,124,224,257,315,317,318],environ:[12,14],epoch:4,equal:[0,1,6,7,11,17,18,19,20,33,39,40,57,81,82,179,180,182,183,196,201,202,204,220,225,228,229,232,235,238,301,308,315,317],equival:[3,6,8,34,46,81,82,85,86,88,121,143,146,147,178,183,191,193,194,196,199,213,216,217,220,223,224,228,243,244,249,250,257,265,308,315,317],error:[5,6,7,8,11,14,90,101,124,183,196,220,265,308,315],escap:12,etc:[3,9,12,14,248],even:[3,5,10,57,315],evenli:317,everi:[4,5,6,7,8,10,11,82,317],evict:0,exactli:[3,6,7,8,81,315],exampl:[12,258,316],except:[6,7,8,85,90,95,183,196,220,258,268,275,308,315,317],excess:7,exclus:[11,64,66,71,72,99,105,108,120,128,134,315],exclusive_max:[6,7,8,11,64,66,67,71,99,101,102,103,104,105,107,108,124,128,129,148,179,180,181,190,197,201,215,220,225,229,248,315],exclusive_min:[64,72],execut:[0,12],exist:[1,4,5,6,7,8,12,81,85,101,124,128,129,183,196,220,229,231,232,242,254,257,289,292,315,317],exit:258,expect:[9,12,315],explicit:[4,11,64,99,105,109,110,128,177,179,182,183,196,198,201,204,220,222,225,228,229,232,257,308,315,317],explicitli:[6,7,8,315,317],expos:5,expr:[85,99,102,120,125,177,180,182,198,202,204,222,226,228,230,232,315],express:[10,17,80,81,83,84,85,86,87,88,89,99,102,120,125,177,180,198,202,222,226,230,284,307],extend:[1,2,3,4,5,6,7,8,11,13,14,16],extens:[8,12,81,279],extent:[8,11,118,317],extern:258,extract:[80,82,284],facil:9,factor:3,fail:[6,14,258,315],fake:14,fals:[4,6,7,8,16,19,31,49,51,53,54,55,57,66,67,68,69,81,173,177,195,198,218,222,247,258,259,315,317],faster:12,fastest:[6,8,12],fetch:12,few:315,fewer:[0,315],field:8,file:[5,6,7,8,9,10,12,14,15,16,257,258,316],file_io_concurr:[0,13,62,63],filesystem:[0,10,13,15,316],fill:[10,88,177,183,188,196,198,210,220,222,238,308,316,317],fill_valu:[8,177,183,188,196,198,210,220,222,227,228,238,241,248,251,253,308,317],filter:[8,186,222,227,228,235,241,248,251,253,308,317],find:[9,12],fine:[229,230,231,232,242,254],finit:[11,64,69,73,183,196,220,308,317],first:[7,11,12,81,82,89,149,197,221,253,254,315],fix:[257,309,314],fix_resizable_bound:[222,247],flag:12,flatten:315,float16:[8,17,298,318],float32:[6,7,8,17,210,234,281,283,299,308,318],float64:[6,8,17,282,300,318],fly:3,flyeem:316,flyem:308,follow:[3,6,7,8,9,11,12,14,101,124,183,196,220,308,315,318],forc:[90,96],form:[11,58,228,315],format:[6,7,8,9,10,308,317,318],fortran:[6,7,34,39,46,245,317],forward:268,framework:52,frequent:3,fresh:[4,5,6,7,8],from:[0,1,2,3,4,5,6,7,8,10,11,13,14,17,18,19,22,34,35,46,49,50,52,55,56,60,61,62,63,81,82,88,99,103,105,106,107,120,128,129,130,177,183,184,185,198,205,224,257,258,278,284,285,289,292,308,315,316,317],fsync:257,full:[5,8,11,16,81,315,317],fulli:[8,10,11,120,257],further:317,futur:[12,17,90,91,92,93,94,95,96,97,98,173,222,245,247,257,258,263,266,268,272,273,308,316],gcc:12,gce:14,gcloud:14,gcs:[2,3,5,7,8,15,16,257,308,316],gcs_request_concurr:14,gcs_request_retri:14,gcs_user_project:14,gener:[12,81,228,315],git:12,github:12,given:[0,3,13,52,58,81,85,86,87,315,317],global:[0,14],good:7,googl:[10,12,14,257,316],google_application_credenti:[9,14],googleapi:9,grain:[229,230,231,232,242,254],granular:[7,317],grid:[6,7,8,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,34,36,37,38,43,46,47,257,317],grid_origin:[6,7,8,18,34,37,38,44,46,48,179,180,181,182,183,184,185,190,192,195,197,215,234,248,317],grid_origin_soft_constraint:[18,34,38,44,46,48,317],grid_soft_constraint:[21,32],group:[7,17,258],guarante:[5,10,257,258,268,279],guid:10,gzip:[6,7,8,308,316,317],half:[0,17,64,66,298,318],handl:[14,17,52,53,58,90,173,222,268],hard:[6,7,8,11,18,19,21,29,32,34,37,39,40,44,46,48,317],has:[6,7,8,11,14,81,87,88,183,196,220,238,257,258,260,261,263,264,266,267,268,308,315],hash:[7,308,316],have:[6,8,11,12,14,64,83,101,124,179,183,196,201,220,225,236,258,279,308,315,316,317],header:[6,8],hemibrain:308,here:6,hierarch:317,high:10,higher:[6,8],hit:316,hold:268,hostnam:9,how:[9,14,317],howev:[3,12,14,81,90,120],http:[12,14],http_archiv:12,http_proxi:9,https_proxi:9,ident:[6,7,11,128,129,308,316],identifi:[0,4,6,8,11,12,15,99,101,103,124,315,317,318],ieee:[17,298,299,300,318],iexpr:315,ignor:[7,44,48,317],ijg:7,imag:7,imaginari:318,immedi:[11,315],immut:[99,315],implement:[5,10,12],impli:[198,206,207,208,210,215],implicit:[6,7,8,11,17,64,66,67,68,69,74,75,81,82,99,101,105,109,110,120,124,128,132,133,183,196,220,308,315,317],implicit_low:[64,66,67,68,69,74],implicit_lower_bound:[99,105,109,120,128,132,148,315],implicit_upp:[64,66,67,68,69,75],implicit_upper_bound:[99,105,110,120,128,133,148],implicitli:[6,7,8,11,315,316],impos:[11,317],improv:[257,258],includ:[6,7,8,9,10,12,16,17,57,99,104,198,206,207,208,210,215,229,231,232,242,245,254,257,315,317],include_context:218,include_default:[19,31,49,51,53,54,55,57,177,195,198,218],inclus:[11,64,66,67,68,76,77,99,105,111,112,115,120,128,135,136,138,143,177,191,198,213,222,243,315],inclusive_max:[11,64,67,76,99,105,111,301],inclusive_min:[6,7,8,11,64,66,67,68,77,99,101,102,103,104,105,107,112,124,128,129,148,179,180,181,190,197,201,215,220,225,229,248,301],incompat:[44,48,183,196,220,308],inconsist:5,increment:12,independ:[7,11,17,177,308,317],index:[3,7,10,18,42,64,80,82,83,84,85,86,87,88,89,99,101,102,103,104,105,106,107,116,122,124,125,126,127,128,129,130,131,142,144,149,150,151,154,162,166,179,181,182,183,190,196,197,201,203,204,208,212,219,220,221,225,227,228,229,231,232,241,242,253,254,284,301,307,308,317],index_arrai:[11,130,148,151,154,156,182,203,204,212,221,227,228,232,241,253],index_array_bound:[11,130],index_rang:[128,148,151,154,157],indexdomain:[6,7,8,11,17,18,44,48,64,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,124,129,131,177,179,180,181,182,183,187,190,196,197,198,201,208,220,222,225,226,229,230,236,308,315,317],indexerror:[81,83,85,86,87,182,315],indexinterv:11,indextransform:[1,2,3,4,5,6,7,8,11,17,81,82,83,84,85,86,87,88,89,99,102,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,153,154,155,162,166,177,181,182,190,197,198,201,202,203,204,212,219,221,222,225,226,228,232,307,315,318],indic:[3,6,7,8,11,17,57,64,66,67,68,69,73,74,75,78,80,81,84,85,88,89,99,101,105,109,110,120,122,124,126,128,142,149,166,177,181,182,190,197,198,203,204,212,221,222,227,228,231,232,241,242,246,253,254,256,257,258,261,262,264,267,268,284,285,301,315,317],indicaet:6,indirectli:[120,317],individu:[5,7,315,317],ineffici:7,inf:[11,17,44,48,64,66,67,69,81,82,83,84,87,89,105,107,125,126,127,128,130,142,149,301,307,315],infinit:[11,64,183,196,220,308,317],info:7,inform:[9,12,14,308],infti:11,inherit:[52,60,61,62],init:0,initi:[1,12,315],inlin:315,inner:[8,39,40],inner_ord:[6,7,8,18,34,39,40,41,42,45,46,179,180,181,182,183,184,185,190,195,197,215,234,248,308,317],inner_order_soft_constraint:[18,34,39,40,46,317],innermost:[18,34,39,46,317],input:[1,2,3,4,6,7,8,11,17,80,81,82,83,84,85,86,87,88,89,104,120,122,124,125,126,127,128,129,130,131,134,135,136,137,138,139,140,142,149,151,155,183,196,219,220,284,307,308,315,318],input_dimens:[11,127,128,129,130,148,151,155,158,203,218,227,253,315,316],input_exclusive_max:[11,81,90,120,124,128,130,134,148,201,202,203,204,212,218,220,221,222,225,226,227,228,233,241,251,253,281,308,315,316],input_inclusive_max:[11,85,120,128,135],input_inclusive_min:[11,81,85,86,90,120,124,128,130,134,136,138,148,201,202,203,204,212,218,220,221,222,225,226,227,228,233,241,251,253,281,308,315,316],input_label:[11,81,82,84,85,86,87,88,89,120,124,128,130,131,137,139,141,145,148,201,202,225,226,308,315,316],input_origin:[120,136,138],input_rank:[11,81,120,122,124,125,127,128,139,141,153,155,182,204,228,307,315],input_shap:[11,82,86,87,88,120,128,131,134,136,138,139,140,141,145,148,154,182,201,202,203,204,212,221,228,232,315],insert:315,instal:[10,14],instanc:[0,59,289,290],instead:[9,12,90,120,228,257,308,315],instruct:10,int16:[6,7,8,17,302,318],int32:[1,2,6,7,8,17,81,240,244,303,308,315,318],int64:[6,8,17,304,318],int8:[6,7,8,17,305,318],integ:[0,1,2,3,4,6,7,8,11,14,17,64,84,102,103,142,190,212,241,242,302,303,304,305,310,311,312,313,317,318],integr:315,intend:12,interfac:[10,90,173,229,230,231,232,242,254,268],interleav:315,intermedi:315,intern:[6,7],interoper:[222,224,279,316],interpret:[315,318],intersect:82,interv:[3,11,17,44,48,64,66,67,68,69,71,72,73,76,77,79],introduc:10,introspect:58,invoc:[12,315],invok:12,involv:[11,315],irrespect:85,isol:[10,258],issu:257,its:[11,13,52,55,56,60,99,107,120,130,177,184,315,317],itself:[5,257,268,315],janelia:308,jax:[8,279],jointli:257,jpeg:[7,12],jpeg_qual:7,json:[0,1,2,3,4,6,8,9,10,11,13,14,15,16,17,18,19,22,31,34,35,36,37,38,39,40,43,45,46,47,49,50,51,52,53,54,55,56,57,60,99,107,119,120,130,148,177,184,195,198,205,218,306,308,317],json_point:5,just:[11,315,316],keep:257,kei:[5,6,7,8,10,52,58,257,258,308,316,317],kept:[7,12],key_encod:8,keyvaluestor:[4,5,6,7,8,13,14,15,16],keyvaluestorebackedchunkdriv:[4,6,7,8,318],keyword:90,kvstore:[2,3,4,5,6,7,8,13,14,15,16,201,202,203,204,205,206,207,208,209,210,211,212,214,215,218,219,220,221,222,224,225,226,227,228,229,230,231,232,234,235,236,237,238,241,242,245,248,251,253,254,257,258,308,316],label:[6,7,8,10,11,17,64,66,67,68,69,78,80,81,82,83,88,99,102,103,104,105,106,107,113,120,125,128,137,179,180,181,182,183,187,190,196,197,201,220,225,226,229,230,236,284,285,308,315,317],lambda:90,larg:[10,224],larger:[11,316],largest:7,last:[11,81,103,104,182,315],latenc:[10,257],later:[12,13],latest:12,latter:8,layer:[5,6,7,8,257,317],layout:[10,17,18,19,33,34,41,42,44,45,46,48,177,183,185,196,198,206,220,222,234,245,308],lead:11,least:[0,11,101,124,315],leav:[85,86],left:[7,11,101,124,308],legaci:315,length:[3,6,8,11,17,122,309,314,315,317],leq:11,less:[11,315],level:[2,6,8,10,316,317],lexicograph:[3,34,39,46,245,317],libcurl:9,libjpeg:12,librari:[8,10,120,315],lightweight:315,like:[9,10,14,102,308,315],likewis:315,limit:[0,10,11,14,62,63,268],link:[9,12],linux:[9,12],list:[6,9,11,12,103,287,288,315],liter:315,littl:[7,8,318],load:12,local:[0,9,10,13,14,15],localhost:14,locat:[9,14,248,308],lock:13,logic:[11,99,257,318],login:14,longer:268,lost:5,low:[7,11],lower:[3,11,64,66,67,68,69,72,74,77,82,85,87,99,105,109,112,115,120,128,132,136,138,143,177,191,198,213,222,243,315,317],lowest:3,lru:0,lz4:[6,8,12,222,225,226,227,228,235,241,248,251,253,308,317],lz4hc:[6,8],mac:9,machin:[10,13,14],maco:12,made:258,mai:[0,3,5,6,7,8,9,11,12,16,64,85,86,87,88,99,104,105,128,173,222,224,229,231,232,235,242,245,248,251,254,255,257,263,267,284,308,315,317,318],major:[34,39,46,245,317],make:[9,12,317],manag:[17,52,258],mani:[9,11,14,81,120,315],manipul:16,manual:[11,12],map:[0,11,17,81,82,83,84,85,86,87,88,89,102,120,122,124,125,126,127,128,129,130,142,144,149,151,153,154,155,162,219,307,315],mark:[11,64,315],match:[0,1,2,3,4,6,7,8,11,16,83,85,86,87,101,124,183,196,220,308,315,317,318],mathrm:[7,11],mathtt:11,max:3,max_retri:14,maximum:[0,3,14],mayb:12,mean:[3,4,5,6,7,8,315],mechan:[4,5,6,7,8,10,268,315],median:3,member:[0,1,2,3,4,5,6,7,8,11,13,14,15,16,34,36,37,38,39,40,43,46,47,57,317,318],memori:[0,1,4,6,7,8,10,11,15,17,201,202,203,204,205,206,207,208,209,210,211,212,214,215,218,219,220,221,222,224,225,226,227,228,229,230,231,232,234,235,236,237,238,241,242,245,248,251,253,254,257,258,278,308,316,318],memory_key_value_stor:16,mere:[227,257,268],merg:[21,32,183,196,220,308,317],metadata:[4,6,7,8,14,206,207,208,209,210,211,214,215,218,219,222,225,226,227,228,241,251,253,258,308,316],metdata:6,method:[3,6,8,14,17,151,159,166,228,287,288,315,316],microsoft:12,middl:316,million:[6,7,8],min:[3,11],mind:257,minim:[308,315],minimum:3,minishard:7,minishard_bit:[7,308,316],minishard_index_encod:[7,308,316],mismatch:11,miss:317,mix:315,mode:[3,12,81,84,89,198,220,222,239,258,308],model:8,modif:[17,258],modifi:[5,11,99,185,257],modul:12,more:[4,5,6,7,8,9,11,12,81,104,228,257,315,318],most:[3,7,8,9,11,14,15,81,104,105,128,182,228,257,315,317],msvc:12,much:12,multi:[10,16,17,222],multipl:[0,3,7,8,10,11,12,13,14,16,229,230,231,232,242,254,257,258,308,315],multipli:11,multiscal:7,multiscale_metadata:[7,308,316],murmurhash3_x86_128:7,must:[0,1,2,3,4,5,6,7,8,9,11,12,14,34,46,59,81,88,179,182,183,196,201,204,220,225,228,229,232,257,308,315,317,318],name:[6,7,8,12,166,171,289,293,294,315],nanomet:7,nasm:12,nativ:[6,8,10],ndarrai:[222,224,315,316],ndim:[18,19,27,41,99,114,120,141,177,189,198,211,222,240],nearest:3,necessari:[9,11,101,124,318],necessarili:[81,315,317],need:[11,12,81,120,315],neg:[88,103,315,317],neither:[4,5,6,7,8,11,308],neq:11,nest:[1,11],nesteddirectorystor:8,net_zlib:12,network:[10,13,14],neuroglanc:[7,10,308,316],neuroglancer_multiscale_volum:7,neuroglancer_precomput:[4,308,316,317],neuroglancer_uint64_sharded_v1:[7,308,316],never:[4,245,257,315],newaxi:[17,81,82,307,315],newli:82,nghttp2:12,no_proxi:9,non:[3,4,5,6,7,8,11,12,14,81,88,101,124,183,196,220,258,268,308,315,317],none:[11,14,17,18,19,21,23,24,25,26,27,28,29,30,32,34,37,38,39,40,44,45,46,48,52,59,60,61,64,66,67,68,69,80,81,85,86,87,90,91,95,96,98,99,105,120,128,129,151,156,157,158,161,173,175,176,177,179,180,181,182,183,186,187,188,189,190,192,196,197,198,201,202,203,204,207,208,209,210,211,212,214,219,220,221,222,224,227,228,235,238,241,245,248,251,253,258,260,263,265,266,268,269,275,277,278,284,307,308,315],nonzero:[81,315],nor:[4,6,7,8,11,308],normal:[4,5,6,7,8,9,11,12,101,124,183,196,220,257,258,308],note:[3,6,7,9,11,12,81,183,196,220,308],now:257,num_channel:[7,308,316],number:[0,3,4,7,11,12,14,17,18,19,21,25,26,28,32,34,42,46,83,85,86,87,99,105,116,118,120,128,147,177,194,198,217,222,244,250,282,283,315,317,318],numer:[3,11,315],numpi:[8,11,17,80,81,84,85,89,120,126,142,149,177,181,182,190,197,198,203,204,212,221,222,224,227,231,241,242,253,254,279,280,282,283,284,289,292,298,299,300,302,303,304,305,306,309,310,311,312,313,314,316],numpy_dtyp:[289,295],numpyindexingspec:[80,81,84,89,120,126,142,149,177,181,190,197,198,203,212,221,222,227,231,241,242,253,254,284],oauth2:9,obj:[126,315],object:[0,1,2,3,4,5,6,7,8,11,13,14,15,16,17,90,91,95,97,98,99,106,128,129,166,167,173,175,176,185,224,257,258,268,269,275,276,277,289,290,297,315,316,317,318],object_:[306,309,314],observ:258,obtain:[6,8,81,99,185,222,247,315,316],occupi:318,occur:[11,90,315],odd:3,offer:3,offici:8,offset:[3,11,18,44,48,80,86,127,128,129,130,145,148,151,153,154,155,160,218,284,315,316,317],often:[14,257],oindex:[80,84,120,126,142,177,181,182,190,197,198,203,204,212,221,222,227,228,231,232,241,242,253,254,284],older:[4,5,6,7,8],omit:[308,315],onc:[11,17,104,257,258,267,268],one:[8,9,11,14,81,82,101,105,124,128,183,196,220,228,308,315,317],ones:6,onli:[0,3,6,7,8,9,11,12,13,34,44,46,48,81,82,90,105,128,183,196,206,207,208,210,215,220,239,245,257,258,268,308,315,316,317],onto:315,op1:315,open:[4,5,6,7,8,10,17,64,66,90,198,220,222,224,225,226,227,228,229,230,231,232,234,235,236,237,238,241,242,245,248,251,253,254,257,258,267,315,316,317,318],openssl:9,oper:[0,4,5,6,7,8,9,10,11,12,13,17,81,83,84,85,86,87,88,89,90,102,120,126,142,149,150,173,181,190,197,203,212,221,222,227,229,230,231,232,242,252,254,255,257,267,268,308,315],opn:315,opt:12,optim:12,optimist:10,option:[0,1,2,3,4,5,6,7,8,9,11,12,13,14,15,16,17,64,99,177,183,196,198,206,207,208,210,215,220,308,317,318],order:[6,7,11,12,14,18,34,39,40,46,81,88,120,121,177,178,198,199,206,215,222,223,227,228,241,245,251,253,257,308,315,317,318],org:12,org_blosc_cblosc:12,org_lz4:12,org_nghttp2:12,org_sourceware_bzip2:12,org_tukaani_xz:12,origin:[3,6,7,8,11,18,34,37,38,46,80,85,86,87,99,112,115,120,143,177,183,191,196,198,213,220,222,243,284,308,315,317],orthogon:[84,142,190,212,241,242,315],other:[3,6,7,8,11,12,18,19,20,21,32,33,44,48,59,64,65,81,99,101,105,120,123,151,152,166,167,198,200,228,284,286,289,291,315,317],otherwis:[1,2,3,4,6,7,8,11,12,14,66,67,68,101,105,124,128,265,317,318],out:[11,81,82,83,84,85,86,87,88,89,124,125,126,127,128,129,130,142,149,219,307,315],outer:[80,84,120,142,177,190,198,212,222,241,242,284],output:[12,17,80,81,82,83,84,85,86,87,88,89,102,120,122,124,125,126,127,128,129,130,142,144,145,148,149,151,153,154,155,162,165,166,182,183,196,203,204,212,218,219,220,221,227,228,232,241,253,284,307,308,315,316],output_rank:[120,122,145,182,204,228,229,232],output_user_root:12,outputindexmap:[11,17,120,127,128,129,144,145,148,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,182,204,228,232],outputindexmethod:[17,151,159,162,166,167,168,169,170,171,172],outsid:[258,315],over:[3,9,11,128,129,257,315,317],overlap:5,overrid:[0,1,2,3,4,5,6,7,8,12,13,14,15,16,220,308,318],overridden:[6,12],own:14,pack:8,pai:14,pair:16,paramet:[6,7,8,14,17,21,32,34,46,49,57,58,60,61,66,67,68,69,83,85,86,87,88,102,103,104,105,106,122,128,129,179,182,183,196,201,204,220,225,228,229,231,232,242,245,254,257,278,308,317,318],parent:[0,1,2,3,4,5,6,7,8,13,14,15,16,52,60,61,62,63,318],pars:[52,55,61],part:[12,18,34,177,183,284],partial:[4,6,7,8,11,308],particular:[0,10],partit:[224,317],pass:12,path:[4,5,6,7,8,9,10,12,13,14,258,308,316],pattern:90,pem:9,pend:0,pep:315,per:[6,7,8,11,19,21,25,26,32,317],perfect:315,perfectli:[257,315],perform:[2,3,7,10,11,80,206,207,208,210,215,229,230,231,232,242,245,254,255,308,315,316,317],permiss:14,permit:[4,5,6,7,8,11,80,81,88,102,183,196,220,308,315],permut:[11,18,34,39,40,46,317],persist:[8,258],pick:7,pip:12,place:[7,9,81],plain:80,platform:[8,12],plu:315,point:[17,257,258,279,298,299,300,318],pointer:5,polici:[222,247],pool:[0,308],posit:[3,11,183,196,220,222,238,308,315,316],posix:[12,13],possibl:[7,11,12,248],potenti:315,power:315,pre:12,prebuilt:12,preced:[9,34,46,183,196,220,308,317],precis:[17,34,46,257,298,299,300,306,309,314,317,318],precomput:[7,10],predecessor:315,prefer:[34,46,317],prefix:315,prepar:9,presenc:5,present:[3,6,11],preset:6,preshift_bit:[7,308,316],prevent:12,previou:315,previous:[4,5,6,7,8,13,14,16,308],primarili:[58,64,102],print:[9,66,67,68,69,90,186,187,188,192,209,211,214,219],prior:[4,5,6,7,8,12,83,85,86,87,315],problem:14,process:[5,10,13,224],produc:[17,90,173,315],product:[99,118],progress:12,project:[12,14],project_id:14,promis:[17,90,173,174,175,176],properti:[3,6,7,8,10,15,185,258,308,317,318],propos:315,protocol:[13,315],provid:[5,6,7,8,9,10,12,13,14,90,257,258,268,315],purpos:[16,102,315],python3:12,python:[1,8,10,17,90,231,232,306,309,314,315],qualiti:7,queri:10,queued_for_writeback_bytes_limit:0,quit:3,rais:[44,48,83,85,86,87,90,104,179,180,181,182,183,190,196,197,201,202,203,204,212,220,221,258,265,308],rang:[11,64,80,86,87,88,154,155,257,284,285,315],rank:[1,2,3,4,5,6,7,8,11,18,19,21,27,28,32,34,39,41,42,44,46,48,81,82,83,84,85,86,87,88,89,99,101,102,105,114,116,120,124,125,126,127,128,129,130,139,142,145,149,162,165,177,179,180,181,182,183,184,189,190,192,195,196,197,198,204,211,214,215,219,220,222,228,229,232,240,244,248,307,308,315,317,318],rare:315,rate:317,rather:[34,39,40,46,81,315,317],ratio:[19,21,23,24,32,34,46,317],raw:[6,258],reach:0,read:[2,3,4,5,6,8,10,11,17,18,19,34,43,44,46,222,224,227,228,229,230,231,232,233,239,242,245,246,252,254,255,257,258,268,278,281,308,315,317],read_chunk:[6,7,8,18,34,43,44,45,46,215,234,248,317],read_chunk_aspect_ratio:[34,46],read_chunk_aspect_ratio_soft_constraint:[34,46],read_chunk_el:[7,34,45,46],read_chunk_elements_soft_constraint:[34,46],read_chunk_shap:[7,34,44,46],read_chunk_shape_soft_constraint:[34,46],read_chunk_templ:[18,44,48],read_futur:316,readabl:[222,246],reader:[13,258],readi:[257,266],readm:12,real:318,rebuild:12,receiv:[11,14],recent:[0,81,104,182,315],recheck:[4,5,6,7,8],recheck_cached_data:[4,5,6,7,8,316],recheck_cached_metadata:[4,6,7,8],recommend:[7,12,229,230,231,232,242,254,315],rectangular:[3,7,11],recurs:317,reduc:[12,228],refer:[0,4,5,6,7,8,9,10,12,13,14,15,16,81,257,315,317,318],reflect:[227,236,245,257,268],regardless:[4,5,6,7,8,315],region:[3,7,11,315,316],regist:[8,90],regular:[18,19,257,258,315,317],rel:[7,88,315,317],relat:[12,14,309,314],relationship:11,reli:318,relianc:13,remain:[6,8,11,81,87,267,315],remot:[0,9,10],remov:82,remove_done_callback:[90,97,268,276],reorder:88,replac:315,repo:12,repositori:12,repres:[6,7,8,11,16,17,64,120,151,173,245,257,315,317,318],represent:[11,17,18,19,22,31,35,45,49,50,51,52,53,54,55,56,57,60,99,107,119,120,130,148,177,184,195,198,205,218,289,315,318],request:14,requestor:14,requir:[1,2,3,4,5,6,7,8,13,14,15,16,105,128,245,308,316,317,318],reserv:11,resiz:[6,7,8,11],resolut:[7,308,316],resolv:[222,247,315],resourc:[0,1,2,3,4,5,6,7,8,10,13,14,15,16,17,52,53,54,58,59,308,318],respect:[3,7,21,32,64,82,85,257,315],result:[6,7,8,10,11,12,17,81,82,83,89,90,98,101,124,127,149,173,179,197,201,221,224,225,227,229,230,231,232,242,245,253,254,257,258,265,266,268,277,315,316,317],retain:[21,32,88,315,317],retri:14,retriev:[14,52,58,316],revalid:[4,5,6,7,8],revers:[88,120,121,177,178,198,199,222,223],rewrit:7,rfc:5,right:[11,14,101,124],rightarrow:11,roll:258,root:13,round:[3,7,11,315],row:[34,39,46,245,317],rs1:13,rtf:12,rule:[11,12],run:14,runtim:[9,14],safe:[10,13,14,257],same:[0,5,6,7,8,11,12,16,59,83,85,86,87,235,248,257,258,268,315,316,317],satisfi:[7,245,315],satur:10,save:9,scalar:[81,85,86,87,229,231,232,242,254,257,279,289,290,315],scale:7,scale_index:[7,308,316],scale_metadata:[7,308,316],schema:[10,11,17,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,215,220,222,248,308],script:12,sdist:12,sdk:14,se_curl:[9,12],second:[4,11],section:[9,10,14],secur:[9,14],segment:[308,316,317],sel:315,select:[17,80,81,82,83,85,86,87,88,99,104,284,285],self:[20,31,32,33,44,45,46,48,51,54,57,58,65,81,83,84,85,86,87,88,89,91,92,93,94,95,96,97,98,100,101,102,103,104,119,121,122,123,124,125,126,127,142,143,146,147,148,149,152,163,164,167,175,176,178,179,180,181,182,190,191,193,194,195,196,197,199,200,201,202,203,204,212,213,216,217,218,220,221,223,224,225,226,227,228,229,230,231,232,233,238,241,242,243,244,245,247,249,250,251,253,254,255,257,260,263,265,269,270,271,274,275,276,277,286,290,291,296],semant:[13,80,81,84,89,120,126,142,149,177,181,190,197,198,203,212,221,222,227,231,241,242,253,254,284,315],separ:[0,8,9,12,14,224,257,315,318],sequenc:[21,32,34,46,80,81,83,85,86,87,99,101,104,105,106,120,122,124,128,129,162,163,183,196,220,284,285,308,315],serial:11,serv:[7,101,124,317],server:[9,14],servic:14,set:[3,7,9,12,14,16,34,46,80,83,85,183,196,220,284,308,315],set_except:[173,175],set_result:[173,176],setup:[10,12],sever:[12,90],sha256:12,shape:[11,18,19,21,23,24,29,30,32,34,44,46,48,99,105,117,118,120,128,140,146,177,179,180,181,182,183,187,190,193,196,197,198,208,215,216,220,222,224,225,226,227,228,229,230,231,232,234,235,236,237,238,241,242,245,248,249,251,253,254,257,308,315,317],shape_soft_constraint:[19,21,30,32,34,45,46,317],shard:[308,316,317],shard_bit:[7,308,316],shard_data_encod:7,shardingspec:7,share:[0,10,13,14,17,52,59,308],shift:[80,86,284],shlex:12,shortcut:315,shorthand:[231,232],should:[9,12,257,317],show:12,shuffl:[6,8,222,225,226,227,228,235,241,248,251,253,308,317],sign:[11,17,302,303,304,305,318],signal:173,signific:257,silent:315,similar:[11,84,85,89,142,149,190,197,212,221,241,242,253,254,315],simpler:3,simplest:12,simpli:[82,118,268,315],simultan:12,sinc:[4,11,81,315,316],singl:[5,6,7,8,9,11,17,81,88,99,103,151,155,299,315,316,317,318],single_input_dimens:[11,166,172],singleton:[17,82,307],size:[0,6,7,8,11,12,21,32,64,68,70,79,99,105,118,120,128,147,177,194,198,217,222,250,257,308,316,317],skip:[12,315],slice:[81,85,99,101,120,124,315,316],slower:[6,8],slowest:[6,8],small:[1,7],smallest:[3,7,8],snappi:[6,8,12],soft:[0,18,19,21,24,26,30,32,34,38,39,40,44,46,48,317],sole:81,some:[11,258],sourc:[11,12,222,229,230,231,232,242,254,257,268,278],space:[12,17,18,42,81,82,83,84,85,86,87,88,89,99,116,120,124,125,126,127,128,129,130,139,142,145,149,183,196,219,220,307,308,315,317],spec:[10,52,55,56,57,59,60,61,63,81,150,179,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,235,251,287,308],special:[0,7,11,12,14,17,81,301,315,317],specif:[0,6,8,12,15,16,17,49,52,55,56,198,206,207,208,210,215,308,317,318],specifi:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,21,32,34,39,40,44,46,48,49,64,66,67,68,80,81,85,86,87,88,89,99,101,103,104,105,124,128,129,149,177,183,185,186,188,196,197,206,207,208,210,215,220,221,222,233,245,253,254,257,281,284,307,308,315,317,318],split:12,squar:315,ssl:[9,12,14],sslkeylogfil:9,stack:12,stage:[17,258],standard:[8,12],start:[3,12,17,81,88,90,103,258,264,267,284,315],startup:12,stderr:9,step:[11,81,257,315],still:[5,7,8,11,102,258,267,315],stop:[81,315],storag:[5,6,7,8,10,14,17,18,34,39,40,46,248,257,258,268,308,317],store:[5,6,7,8,9,11,15,17,233,234,235,238,248,257,258,281,308,316,317],str:[17,52,58,64,66,67,68,69,78,80,83,99,103,105,113,120,128,137,166,171,222,239,284,289,293,294,296,314,315],strictli:[101,124],stride:[3,11,80,85,128,130,148,151,154,155,161,284,315],string:[0,3,4,5,6,7,8,10,11,13,14,15,17,64,78,233,309,314,317,318],strip_prefix:12,strong:10,studio:12,style:[80,81,84,85,89,120,126,142,149,177,181,182,190,197,198,203,204,212,221,222,227,231,241,242,253,254,284],sub:[5,12,316],subarrai:8,subdivid:317,subject:[222,247,268],subscript:[229,230,231,232,242,254,315,316],subsequ:[81,257,268,308,315],subset:[11,12,90,99,104,315],subtyp:[4,6,8,15,317,318],succe:11,success:[263,265],successfulli:[257,266,268],suffic:11,suffici:315,suitabl:[6,7,8,12,308,317],sum:315,suppli:316,support:[0,2,3,4,5,6,7,10,11,12,13,15,16,80,90,150,222,231,246,256,258,279,315,316,317,318],surviv:257,synchron:[90,222,224,229,230,231,232,242,245,254,257,258,265,316],syntax:[0,5,229,230,231,232,242,254,315],system:[9,12,14,15,257],tabl:[11,16],take:[7,9,10,34,46,183,196,220,308,315,317],taken:[7,44,48,317],target:[11,19,21,25,26,32,34,46,80,88,284,317],temporari:[7,12],tensoprstor:9,tensorflow:[8,279],tensorstor:[0,1,2,3,4,5,9,11,12,14,15,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,309,310,311,312,313,314,315,316,317,318],tensorstore_bazel_build_opt:12,tensorstore_bazel_compilation_mod:12,tensorstore_bazel_startup_opt:12,tensorstore_bazelisk:12,tensorstore_ca_bundl:9,tensorstore_ca_path:9,tensorstore_curl_verbos:9,tensorstore_gcs_http_url:[9,14],tensorstore_prebuilt_dir:12,tensorstore_system_lib:[9,12],term:[81,84,89,142,149,190,197,212,221,231,241,242,253,254,315],termin:[309,314],test:[16,90],than:[0,4,5,6,7,8,11,12,34,39,40,46,81,104,315,317],thei:[6,16,57,102,309,314,315],them:257,therefor:[7,9],thi:[0,1,3,4,5,6,7,8,9,11,12,13,14,34,46,52,58,59,62,63,84,89,90,99,101,118,120,121,124,125,127,142,143,146,147,149,178,183,185,190,191,193,194,196,197,199,204,206,207,208,210,212,213,215,216,217,220,221,222,223,224,227,228,231,232,235,241,242,243,244,248,249,250,253,254,255,257,258,268,289,290,308,315,316,317],those:[90,228],though:102,thread:[0,90,224,245],three:[11,101,124,317],through:[10,11,14,15,120],throughput:10,tie:3,time:[4,5,6,7,8,11,317],timedelta:8,timeout:[90,95,98,268,275,277],tmp:[12,258,316],to_json:[18,19,31,45,49,51,53,54,55,57,62,99,119,120,148,177,195,198,218,289,296],togeth:8,tool:12,top:[2,316,317],total:[0,99,118,120,147,177,194,198,217,222,250],total_bytes_limit:[0,4,6,7,8,54,58,60,62,63,316],toward:315,traceback:[81,104,182,315],track:257,traffic:9,transact:[10,16,17,229,230,231,232,242,245,252,254,255,258,259,260,261,262,263,264,265,266,267,268,308],transform:[1,2,3,4,5,6,7,8,10,17,81,82,83,84,85,86,87,88,89,90,99,102,120,122,124,125,126,127,128,129,130,131,134,136,138,139,140,141,142,145,148,149,151,153,154,155,162,177,179,180,181,182,183,190,196,197,198,201,202,203,204,212,218,219,220,221,222,225,226,227,228,229,230,232,233,236,241,251,253,281,307,308,316,318],translat:[3,6,8,11,80,86,87,284,315],translate_bi:[80,81,83,86,102,122,125,218,219,284],translate_to:[80,87,284],transpos:[80,82,88,120,121,177,178,198,199,222,223,284,315],treat:[315,317],tree:12,trip:11,truncat:315,trust:9,tupl:[18,19,23,24,29,30,37,38,39,40,99,108,109,110,111,112,113,115,117,120,122,132,133,134,135,136,137,138,140,143,146,173,174,177,191,193,198,213,216,222,243,249,315],turbo:12,tutori:10,two:[5,11,17,18,19,20,33,257,258,268,302,303,304,305,315,317,318],txn:[231,257,258],type:[0,1,2,3,4,5,10,58,90,120,150,183,196,198,209,220,225,226,229,231,232,233,237,238,242,254,257,258,278,279,280,281,289,290,292,297,298,299,300,302,303,304,305,306,308,309,312,314,315,316,317,318],uint16:[6,7,8,17,215,258,310,318],uint32:[6,7,8,17,90,222,224,225,226,227,228,229,230,231,232,233,235,236,237,238,241,242,245,248,251,253,254,257,281,311,316,318],uint64:[6,7,8,17,308,312,316,318],uint8:[6,7,8,17,183,184,192,195,196,209,313,318],unbound:[11,17,44,48,64,69,105,128,301],unchang:[85,86,87,315],unchunk:7,uncommit:[245,257,258],uncondition:[89,149,197,221,253,254,315],unconstrain:308,under:[2,4,13,315],underli:[4,5,6,7,8,10,11,15,120,257,258,268,317],unequ:315,unicod:[17,314,318],uniform:[3,10,317],uniqu:[11,59],unit:6,unix:4,unknown:[11,235,238],unlabel:[6,11,64,78,105,128,317],unless:[7,14,315],unlik:[81,90,315],unmatch:11,unshar:308,unshard:317,unsign:[17,310,311,312,313,318],unspecifi:[3,6,7,8,11,19,28,34,44,46,48,177,187,192,198,209,214,219,315,317],until:[258,267,268,315],updat:[7,18,19,32,46,177,185,186,187,188,192,196,198,220,222,247],upon:315,upper:[6,8,11,64,66,67,68,69,71,75,76,82,99,105,108,110,111,120,128,133,134,135,315],url:[10,12],usag:258,use:[0,1,3,4,6,7,8,9,12,14,59,81,120,228,229,230,231,232,242,254,257,278,308,315,317],used:[0,1,3,4,6,7,8,9,10,11,12,13,14,17,18,36,85,86,87,120,173,222,231,232,235,248,251,252,255,258,263,267,284,306,307,308,309,314,315,316,317],useful:[1,16,58,64,102,315],uses:[6,7,8,9,11,12,13],usezlib:[6,317],using:[0,5,7,8,9,10,11,12,14,80,81,90,99,177,179,180,181,182,190,197,198,201,202,203,204,212,221,222,225,226,227,228,229,230,231,232,241,242,245,248,253,254,257,258,268,308,315,316,317],ustr:[17,314,318],usual:315,utf:318,util:12,valid:[0,6,11,34,46,81,85,315,317],valu:[0,1,3,4,5,9,10,11,17,34,46,57,64,81,85,90,104,166,168,177,183,188,196,198,210,220,222,238,257,306,308,315,316,317,318],valueerror:[44,48,104,179,180,181,182,190,197,201,202,203,204,212,221],variabl:[12,14,17,309,314],varieti:15,varlength:6,vector:[11,80,81,89,99,105,120,122,128,149,177,197,198,221,222,253,254,284],verbos:[9,315],veri:[7,102],verifi:14,version:[3,9,12,315],via:[1,3,6,7,8,10,39,40,315],view:[2,3,10,120,121,162,177,178,198,199,222,223,225,226,227,228,233,241,253,255,281,287,288,315,316],vindex:[80,81,89,120,126,149,177,181,182,190,197,198,203,204,212,221,222,227,228,231,232,241,242,253,254,284],virtual:[2,3,10,12,17,120,222,225,226,227,228,241,253,287,288],visibl:258,visual:12,volum:7,voxel:7,voxel_offset:[7,308,316],wai:[0,6,7,8,10,12,317],wait:[90,257,316],well:[7,8,81,279,308],were:315,what:4,wheel:12,when:[0,1,4,5,11,12,81,229,230,231,232,242,245,254,257,266,268,315,317],where:[0,3,7,9,11,81,84,89,101,124,126,128,130,142,149,183,196,220,308,315,317,318],wherebi:315,whether:[57,66,67,68,69,81,99,105,109,110,128,258,261,262,264,267,315],which:[0,2,3,4,5,6,7,8,9,10,11,12,14,16,44,48,52,60,61,62,63,64,85,86,87,99,120,185,228,257,263,268,278,284,315,316,317],window:[9,12,13],wireshark:9,wise:[2,6,8],with_transact:[222,231,255,257,258,308],within:[0,3,4,5,6,7,8,11,14,18,34,39,46,222,245,315,317],without:[6,11,14,80,86,87,257,258,284,308,315,316,317],work:[12,14],workspac:12,worst:[6,7],would:83,writabl:[222,256],write:[2,4,5,6,8,10,11,14,17,18,19,34,46,47,48,222,228,229,230,231,232,233,239,242,245,252,254,255,256,257,258,268,278,281,308,315,317],write_chunk:[6,7,8,18,34,45,46,47,48,215,234,248,317],write_chunk_aspect_ratio:[34,46],write_chunk_aspect_ratio_soft_constraint:[34,46],write_chunk_el:[7,34,46],write_chunk_elements_soft_constraint:[34,46],write_chunk_shap:[7,34,46,48],write_chunk_shape_soft_constraint:[34,45,46],write_chunk_templ:[18,44,48],write_futur:316,writeback:[0,10,257],writefutur:[17,90,222,257,268,269,270,271,272,273,274,275,276,277],written:[12,183,196,220,222,238,257,308,316],xcode:12,xre:7,xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx:12,xyz:7,yet:[222,238,245],you:[4,6,7,8,9,12,14,59,257,308,316],your:12,yre:7,yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyi:12,zarr:[2,3,4,10,186,201,202,203,204,206,207,208,210,212,215,221,222,224,227,228,231,232,234,235,237,238,241,242,245,248,251,253,254,257,308,315,317],zarr_format:[8,222,227,228,241,251,253,308],zarrai:8,zero:[4,6,7,8,11,64,70,81,82,105,128,183,196,220,308,315,317],zlib:[6,8,12],zre:7,zstd:[6,8,12]},titles:["Context framework","<code class=\"docutils literal notranslate\"><span class=\"pre\">array</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">cast</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">downsample</span></code> Driver","Drivers","<code class=\"docutils literal notranslate\"><span class=\"pre\">json</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">n5</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">neuroglancer_precomputed</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">zarr</span></code> Driver","Environment variables","TensorStore","Index space","Building and Installing","<code class=\"docutils literal notranslate\"><span class=\"pre\">file</span></code> Key-Value Store driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">gcs</span></code> Key-Value Store driver","Key-Value Storage Layer","<code class=\"docutils literal notranslate\"><span class=\"pre\">memory</span></code> Key-Value Store driver","API reference","tensorstore.ChunkLayout","tensorstore.ChunkLayout.Grid","tensorstore.ChunkLayout.Grid.__eq__","tensorstore.ChunkLayout.Grid.__init__(components)","tensorstore.ChunkLayout.Grid.__init__(json)","tensorstore.ChunkLayout.Grid.aspect_ratio","tensorstore.ChunkLayout.Grid.aspect_ratio_soft_constraint","tensorstore.ChunkLayout.Grid.elements","tensorstore.ChunkLayout.Grid.elements_soft_constraint","tensorstore.ChunkLayout.Grid.ndim","tensorstore.ChunkLayout.Grid.rank","tensorstore.ChunkLayout.Grid.shape","tensorstore.ChunkLayout.Grid.shape_soft_constraint","tensorstore.ChunkLayout.Grid.to_json","tensorstore.ChunkLayout.Grid.update","tensorstore.ChunkLayout.__eq__","tensorstore.ChunkLayout.__init__(components)","tensorstore.ChunkLayout.__init__(json)","tensorstore.ChunkLayout.codec_chunk","tensorstore.ChunkLayout.grid_origin","tensorstore.ChunkLayout.grid_origin_soft_constraint","tensorstore.ChunkLayout.inner_order","tensorstore.ChunkLayout.inner_order_soft_constraint","tensorstore.ChunkLayout.ndim","tensorstore.ChunkLayout.rank","tensorstore.ChunkLayout.read_chunk","tensorstore.ChunkLayout.read_chunk_template","tensorstore.ChunkLayout.to_json","tensorstore.ChunkLayout.update","tensorstore.ChunkLayout.write_chunk","tensorstore.ChunkLayout.write_chunk_template","tensorstore.CodecSpec","tensorstore.CodecSpec.__init__","tensorstore.CodecSpec.to_json","tensorstore.Context","tensorstore.Context.Resource","tensorstore.Context.Resource.to_json","tensorstore.Context.Spec","tensorstore.Context.Spec.__init__","tensorstore.Context.Spec.to_json","tensorstore.Context.__getitem__","tensorstore.Context.__init__(default)","tensorstore.Context.__init__(json)","tensorstore.Context.__init__(spec)","tensorstore.Context.parent","tensorstore.Context.spec","tensorstore.Dim","tensorstore.Dim.__eq__","tensorstore.Dim.__init__(exclusive_max)","tensorstore.Dim.__init__(inclusive_max)","tensorstore.Dim.__init__(size)","tensorstore.Dim.__init__(unbounded)","tensorstore.Dim.empty","tensorstore.Dim.exclusive_max","tensorstore.Dim.exclusive_min","tensorstore.Dim.finite","tensorstore.Dim.implicit_lower","tensorstore.Dim.implicit_upper","tensorstore.Dim.inclusive_max","tensorstore.Dim.inclusive_min","tensorstore.Dim.label","tensorstore.Dim.size","tensorstore.DimExpression","tensorstore.DimExpression.__getitem__","tensorstore.DimExpression.diagonal","tensorstore.DimExpression.label","tensorstore.DimExpression.oindex","tensorstore.DimExpression.stride","tensorstore.DimExpression.translate_by","tensorstore.DimExpression.translate_to","tensorstore.DimExpression.transpose","tensorstore.DimExpression.vindex","tensorstore.Future","tensorstore.Future.add_done_callback","tensorstore.Future.cancel","tensorstore.Future.cancelled","tensorstore.Future.done","tensorstore.Future.exception","tensorstore.Future.force","tensorstore.Future.remove_done_callback","tensorstore.Future.result","tensorstore.IndexDomain","tensorstore.IndexDomain.__eq__","tensorstore.IndexDomain.__getitem__(domain)","tensorstore.IndexDomain.__getitem__(expr)","tensorstore.IndexDomain.__getitem__(identifier)","tensorstore.IndexDomain.__getitem__(selection)","tensorstore.IndexDomain.__init__(components)","tensorstore.IndexDomain.__init__(dimensions)","tensorstore.IndexDomain.__init__(json)","tensorstore.IndexDomain.exclusive_max","tensorstore.IndexDomain.implicit_lower_bounds","tensorstore.IndexDomain.implicit_upper_bounds","tensorstore.IndexDomain.inclusive_max","tensorstore.IndexDomain.inclusive_min","tensorstore.IndexDomain.labels","tensorstore.IndexDomain.ndim","tensorstore.IndexDomain.origin","tensorstore.IndexDomain.rank","tensorstore.IndexDomain.shape","tensorstore.IndexDomain.size","tensorstore.IndexDomain.to_json","tensorstore.IndexTransform","tensorstore.IndexTransform.T","tensorstore.IndexTransform.__call__","tensorstore.IndexTransform.__eq__","tensorstore.IndexTransform.__getitem__(domain)","tensorstore.IndexTransform.__getitem__(expr)","tensorstore.IndexTransform.__getitem__(indices)","tensorstore.IndexTransform.__getitem__(transform)","tensorstore.IndexTransform.__init__(components)","tensorstore.IndexTransform.__init__(domain)","tensorstore.IndexTransform.__init__(json)","tensorstore.IndexTransform.domain","tensorstore.IndexTransform.implicit_lower_bounds","tensorstore.IndexTransform.implicit_upper_bounds","tensorstore.IndexTransform.input_exclusive_max","tensorstore.IndexTransform.input_inclusive_max","tensorstore.IndexTransform.input_inclusive_min","tensorstore.IndexTransform.input_labels","tensorstore.IndexTransform.input_origin","tensorstore.IndexTransform.input_rank","tensorstore.IndexTransform.input_shape","tensorstore.IndexTransform.ndim","tensorstore.IndexTransform.oindex","tensorstore.IndexTransform.origin","tensorstore.IndexTransform.output","tensorstore.IndexTransform.output_rank","tensorstore.IndexTransform.shape","tensorstore.IndexTransform.size","tensorstore.IndexTransform.to_json","tensorstore.IndexTransform.vindex","tensorstore.Indexable","tensorstore.OutputIndexMap","tensorstore.OutputIndexMap.__eq__","tensorstore.OutputIndexMap.__init__(constant)","tensorstore.OutputIndexMap.__init__(index_array)","tensorstore.OutputIndexMap.__init__(input_dimension)","tensorstore.OutputIndexMap.index_array","tensorstore.OutputIndexMap.index_range","tensorstore.OutputIndexMap.input_dimension","tensorstore.OutputIndexMap.method","tensorstore.OutputIndexMap.offset","tensorstore.OutputIndexMap.stride","tensorstore.OutputIndexMaps","tensorstore.OutputIndexMaps.__eq__","tensorstore.OutputIndexMaps.__getitem__","tensorstore.OutputIndexMaps.rank","tensorstore.OutputIndexMethod","tensorstore.OutputIndexMethod.__eq__","tensorstore.OutputIndexMethod.__init__","tensorstore.OutputIndexMethod.array","tensorstore.OutputIndexMethod.constant","tensorstore.OutputIndexMethod.name","tensorstore.OutputIndexMethod.single_input_dimension","tensorstore.Promise","tensorstore.Promise.new","tensorstore.Promise.set_exception","tensorstore.Promise.set_result","tensorstore.Schema","tensorstore.Schema.T","tensorstore.Schema.__getitem__(domain)","tensorstore.Schema.__getitem__(expr)","tensorstore.Schema.__getitem__(indices)","tensorstore.Schema.__getitem__(transform)","tensorstore.Schema.__init__(components)","tensorstore.Schema.__init__(json)","tensorstore.Schema.chunk_layout","tensorstore.Schema.codec","tensorstore.Schema.domain","tensorstore.Schema.fill_value","tensorstore.Schema.ndim","tensorstore.Schema.oindex","tensorstore.Schema.origin","tensorstore.Schema.rank","tensorstore.Schema.shape","tensorstore.Schema.size","tensorstore.Schema.to_json","tensorstore.Schema.update","tensorstore.Schema.vindex","tensorstore.Spec","tensorstore.Spec.T","tensorstore.Spec.__eq__","tensorstore.Spec.__getitem__(domain)","tensorstore.Spec.__getitem__(expr)","tensorstore.Spec.__getitem__(indices)","tensorstore.Spec.__getitem__(transform)","tensorstore.Spec.__init__","tensorstore.Spec.chunk_layout","tensorstore.Spec.codec","tensorstore.Spec.domain","tensorstore.Spec.dtype","tensorstore.Spec.fill_value","tensorstore.Spec.ndim","tensorstore.Spec.oindex","tensorstore.Spec.origin","tensorstore.Spec.rank","tensorstore.Spec.schema","tensorstore.Spec.shape","tensorstore.Spec.size","tensorstore.Spec.to_json","tensorstore.Spec.transform","tensorstore.Spec.update","tensorstore.Spec.vindex","tensorstore.TensorStore","tensorstore.TensorStore.T","tensorstore.TensorStore.__array__","tensorstore.TensorStore.__getitem__(domain)","tensorstore.TensorStore.__getitem__(expr)","tensorstore.TensorStore.__getitem__(indices)","tensorstore.TensorStore.__getitem__(transform)","tensorstore.TensorStore.__setitem__(domain)","tensorstore.TensorStore.__setitem__(expr)","tensorstore.TensorStore.__setitem__(indices)","tensorstore.TensorStore.__setitem__(transform)","tensorstore.TensorStore.astype","tensorstore.TensorStore.chunk_layout","tensorstore.TensorStore.codec","tensorstore.TensorStore.domain","tensorstore.TensorStore.dtype","tensorstore.TensorStore.fill_value","tensorstore.TensorStore.mode","tensorstore.TensorStore.ndim","tensorstore.TensorStore.oindex","tensorstore.TensorStore.oindex.__setitem__","tensorstore.TensorStore.origin","tensorstore.TensorStore.rank","tensorstore.TensorStore.read","tensorstore.TensorStore.readable","tensorstore.TensorStore.resolve","tensorstore.TensorStore.schema","tensorstore.TensorStore.shape","tensorstore.TensorStore.size","tensorstore.TensorStore.spec","tensorstore.TensorStore.transaction","tensorstore.TensorStore.vindex","tensorstore.TensorStore.vindex.__setitem__","tensorstore.TensorStore.with_transaction","tensorstore.TensorStore.writable","tensorstore.TensorStore.write","tensorstore.Transaction","tensorstore.Transaction.__init__","tensorstore.Transaction.abort","tensorstore.Transaction.aborted","tensorstore.Transaction.atomic","tensorstore.Transaction.commit_async","tensorstore.Transaction.commit_started","tensorstore.Transaction.commit_sync","tensorstore.Transaction.future","tensorstore.Transaction.open","tensorstore.WriteFutures","tensorstore.WriteFutures.add_done_callback","tensorstore.WriteFutures.cancel","tensorstore.WriteFutures.cancelled","tensorstore.WriteFutures.commit","tensorstore.WriteFutures.copy","tensorstore.WriteFutures.done","tensorstore.WriteFutures.exception","tensorstore.WriteFutures.remove_done_callback","tensorstore.WriteFutures.result","tensorstore.array","tensorstore.bfloat16","tensorstore.bool","tensorstore.cast","tensorstore.complex128","tensorstore.complex64","tensorstore.d","tensorstore.d.__class_getitem__","tensorstore.d.__eq__","tensorstore.downsample(spec)","tensorstore.downsample(store)","tensorstore.dtype","tensorstore.dtype.__call__","tensorstore.dtype.__eq__","tensorstore.dtype.__init__(dtype)","tensorstore.dtype.__init__(name)","tensorstore.dtype.name","tensorstore.dtype.numpy_dtype","tensorstore.dtype.to_json","tensorstore.dtype.type","tensorstore.float16","tensorstore.float32","tensorstore.float64","tensorstore.inf","tensorstore.int16","tensorstore.int32","tensorstore.int64","tensorstore.int8","tensorstore.json","tensorstore.newaxis","tensorstore.open","tensorstore.string","tensorstore.uint16","tensorstore.uint32","tensorstore.uint64","tensorstore.uint8","tensorstore.ustring","Indexing","Tutorial","Schema","JSON Spec"],titleterms:{"boolean":[81,315],"class":[18,52],"new":[6,7,8,308],"public":[19,49,64,90,99,120,151,162,166,173,222,268,289],Adding:[81,315],TLS:[9,14],accessor:[18,52,53,55,120,177,198,222,258],align:11,all:[101,124],api:[12,17],arrai:[1,6,7,8,81,315],aspect:[6,8],asynchron:17,authent:14,broadcast:11,build:12,cast:2,certif:[9,14],checkout:12,chunk:[4,6,7,8,18,317],cloud:9,codec:[6,7,8,317],compar:315,compress:[6,7],compressor:8,concept:10,configur:9,constraint:[6,7,8],construct:315,constructor:[18,19,49,52,55,64,99,120,151,166,177,198,258,284,289],context:0,core:17,creat:[6,7,8,308],credenti:9,data:[6,7,8,17,222],dataset:316,debug:9,depend:12,develop:12,differ:315,dimens:[81,101,124,315],document:12,domain:[6,7,8,11],downsampl:3,driver:[1,2,3,4,5,6,7,8,13,14,15,16],element:[6,8],ellipsi:[81,315],encod:7,environ:9,error:81,exampl:[0,1,2,3,4,5,6,7,8,11,41,42,44,45,48,54,58,59,60,62,63,64,66,67,68,69,81,82,83,84,85,86,87,89,101,102,103,104,105,106,107,122,124,125,126,127,128,129,130,131,134,136,138,139,140,141,142,145,148,149,153,154,155,179,180,181,182,183,184,185,186,187,188,189,190,192,195,196,197,201,202,203,204,205,206,207,208,209,210,211,212,214,215,218,219,220,221,222,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,240,244,245,248,251,257,281,285,301,307,308,317],exist:308,explicit:[6,7,8],express:315,file:[4,13],fill:[6,7,8],flyem:316,fortran:8,framework:0,from:12,fulli:[101,124],gcs:14,get:10,googl:9,hemibrain:316,highlight:10,http:9,index:[11,17,81,120,177,198,222,315],instal:12,integ:[81,315],interv:[81,315],ipython:12,janelia:316,json:[5,7,318],kei:[13,14,15,16],label:[101,124],layer:15,layout:[6,7,8,317],librari:12,limit:[6,7,8,13],local:[12,316],map:[6,7,8],member:[18,19,49,64,90,99,120,151,162,166,173,198,222,268,284,289],memori:16,method:11,mix:[101,124],mode:315,mutat:[177,198],neuroglancer_precomput:7,non:257,numpi:315,oindex:315,open:308,oper:[80,258,284],order:8,outer:315,output:11,packag:12,parti:12,proxi:9,publish:12,pypi:12,python:12,ratio:[6,8],raw:7,read:[7,316],refer:17,request:9,requir:12,run:12,scalar:8,schema:[6,7,8,317],segment:7,select:[6,7,8,315],semant:257,separ:7,setter:18,shape:[6,7,8],shard:7,shell:12,singl:4,singleton:[81,315],space:11,spec:[17,318],special:[18,19,64,99,120,151,162,166,198,284,289],specif:7,start:10,storag:[4,9,15],store:[13,14,16],structur:8,style:315,support:[8,17],templat:18,tensorstor:[6,7,8,10,308],test:[12,14],third:12,transact:[222,257],transform:[11,315],tutori:316,type:[6,7,8,17,222],unconstrain:[6,7,8],unlabel:[101,124],unshard:7,valu:[6,7,8,13,14,15,16],variabl:9,vector:315,view:17,vindex:315,when:[6,7,8],without:12,write:[7,316],zarr:8}})